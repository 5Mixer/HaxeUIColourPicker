// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_filters_Blur
#include <hxinc/haxe/ui/filters/Blur.h>
#endif
#ifndef INCLUDED_haxe_ui_filters_DropShadow
#include <hxinc/haxe/ui/filters/DropShadow.h>
#endif
#ifndef INCLUDED_haxe_ui_filters_Filter
#include <hxinc/haxe/ui/filters/Filter.h>
#endif
#ifndef INCLUDED_haxe_ui_filters_FilterParser
#include <hxinc/haxe/ui/filters/FilterParser.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_31bcc7ff180c92b7_6_parseFilter,"haxe.ui.filters.FilterParser","parseFilter",0xbacdfa59,"haxe.ui.filters.FilterParser.parseFilter","haxe/ui/filters/FilterParser.hx",6,0x8c53ed41)
HX_LOCAL_STACK_FRAME(_hx_pos_31bcc7ff180c92b7_16_parseDropShadow,"haxe.ui.filters.FilterParser","parseDropShadow",0x4c218090,"haxe.ui.filters.FilterParser.parseDropShadow","haxe/ui/filters/FilterParser.hx",16,0x8c53ed41)
HX_LOCAL_STACK_FRAME(_hx_pos_31bcc7ff180c92b7_42_parseBlur,"haxe.ui.filters.FilterParser","parseBlur",0x48188308,"haxe.ui.filters.FilterParser.parseBlur","haxe/ui/filters/FilterParser.hx",42,0x8c53ed41)
HX_LOCAL_STACK_FRAME(_hx_pos_31bcc7ff180c92b7_60_copyFilterDefaults,"haxe.ui.filters.FilterParser","copyFilterDefaults",0x7dd676b1,"haxe.ui.filters.FilterParser.copyFilterDefaults","haxe/ui/filters/FilterParser.hx",60,0x8c53ed41)
HX_LOCAL_STACK_FRAME(_hx_pos_31bcc7ff180c92b7_80_buildDefaults,"haxe.ui.filters.FilterParser","buildDefaults",0xd6b8936e,"haxe.ui.filters.FilterParser.buildDefaults","haxe/ui/filters/FilterParser.hx",80,0x8c53ed41)
namespace haxe{
namespace ui{
namespace filters{

void FilterParser_obj::__construct() { }

Dynamic FilterParser_obj::__CreateEmpty() { return new FilterParser_obj; }

void *FilterParser_obj::_hx_vtable = 0;

Dynamic FilterParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FilterParser_obj > _hx_result = new FilterParser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FilterParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5edb90d8;
}

 ::haxe::ds::StringMap FilterParser_obj::filterParamDefaults;

 ::haxe::ui::filters::Filter FilterParser_obj::parseFilter(::cpp::VirtualArray filterDetails){
            	HX_STACKFRAME(&_hx_pos_31bcc7ff180c92b7_6_parseFilter)
HXLINE(   7)		 ::haxe::ui::filters::Filter filter = null();
HXLINE(   8)		if (hx::IsEq( filterDetails->__get(0),HX_("drop-shadow",7e,63,30,e1) )) {
HXLINE(   9)			filter = ::haxe::ui::filters::FilterParser_obj::parseDropShadow(filterDetails);
            		}
            		else {
HXLINE(  10)			if (hx::IsEq( filterDetails->__get(0),HX_("blur",a7,42,19,41) )) {
HXLINE(  11)				filter = ::haxe::ui::filters::FilterParser_obj::parseBlur(filterDetails);
            			}
            		}
HXLINE(  13)		return filter;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FilterParser_obj,parseFilter,return )

 ::haxe::ui::filters::DropShadow FilterParser_obj::parseDropShadow(::cpp::VirtualArray filterDetails){
            	HX_GC_STACKFRAME(&_hx_pos_31bcc7ff180c92b7_16_parseDropShadow)
HXLINE(  17)		bool _hx_tmp;
HXDLIN(  17)		if (hx::IsNotNull( filterDetails )) {
HXLINE(  17)			_hx_tmp = (filterDetails->get_length() == 0);
            		}
            		else {
HXLINE(  17)			_hx_tmp = true;
            		}
HXDLIN(  17)		if (_hx_tmp) {
HXLINE(  18)			return null();
            		}
HXLINE(  21)		::cpp::VirtualArray copy = filterDetails->copy();
HXLINE(  22)		::haxe::ui::filters::FilterParser_obj::buildDefaults();
HXLINE(  24)		::String filterName = ( (::String)(copy->__get(0)) );
HXLINE(  25)		copy->remove(filterName);
HXLINE(  27)		copy = ::haxe::ui::filters::FilterParser_obj::copyFilterDefaults(filterName,copy);
HXLINE(  29)		 ::haxe::ui::filters::DropShadow dropShadow =  ::haxe::ui::filters::DropShadow_obj::__alloc( HX_CTX );
HXLINE(  30)		dropShadow->distance = ( (Float)(copy->__get(0)) );
HXLINE(  31)		dropShadow->angle = ( (Float)(copy->__get(1)) );
HXLINE(  32)		dropShadow->color = ( (int)(copy->__get(2)) );
HXLINE(  33)		dropShadow->alpha = ( (Float)(copy->__get(3)) );
HXLINE(  34)		dropShadow->blurX = ( (Float)(copy->__get(4)) );
HXLINE(  35)		dropShadow->blurY = ( (Float)(copy->__get(5)) );
HXLINE(  36)		dropShadow->strength = ( (Float)(copy->__get(6)) );
HXLINE(  37)		dropShadow->quality = ( (int)(copy->__get(7)) );
HXLINE(  38)		dropShadow->inner = ( (bool)(copy->__get(8)) );
HXLINE(  39)		return dropShadow;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FilterParser_obj,parseDropShadow,return )

 ::haxe::ui::filters::Blur FilterParser_obj::parseBlur(::cpp::VirtualArray filterDetails){
            	HX_GC_STACKFRAME(&_hx_pos_31bcc7ff180c92b7_42_parseBlur)
HXLINE(  43)		bool _hx_tmp;
HXDLIN(  43)		if (hx::IsNotNull( filterDetails )) {
HXLINE(  43)			_hx_tmp = (filterDetails->get_length() == 0);
            		}
            		else {
HXLINE(  43)			_hx_tmp = true;
            		}
HXDLIN(  43)		if (_hx_tmp) {
HXLINE(  44)			return null();
            		}
HXLINE(  47)		::cpp::VirtualArray copy = filterDetails->copy();
HXLINE(  48)		::haxe::ui::filters::FilterParser_obj::buildDefaults();
HXLINE(  50)		::String filterName = ( (::String)(copy->__get(0)) );
HXLINE(  51)		copy->remove(filterName);
HXLINE(  53)		copy = ::haxe::ui::filters::FilterParser_obj::copyFilterDefaults(filterName,copy);
HXLINE(  55)		 ::haxe::ui::filters::Blur blur =  ::haxe::ui::filters::Blur_obj::__alloc( HX_CTX );
HXLINE(  56)		blur->amount = ( (Float)(copy->__get(0)) );
HXLINE(  57)		return blur;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FilterParser_obj,parseBlur,return )

::cpp::VirtualArray FilterParser_obj::copyFilterDefaults(::String filterName,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_31bcc7ff180c92b7_60_copyFilterDefaults)
HXLINE(  61)		::cpp::VirtualArray copy = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  63)		::cpp::VirtualArray defaultParams = ( (::cpp::VirtualArray)(::haxe::ui::filters::FilterParser_obj::filterParamDefaults->get(filterName)) );
HXLINE(  64)		if (hx::IsNotNull( defaultParams )) {
HXLINE(  65)			int _g = 0;
HXDLIN(  65)			while((_g < defaultParams->get_length())){
HXLINE(  65)				 ::Dynamic p = defaultParams->__get(_g);
HXDLIN(  65)				_g = (_g + 1);
HXLINE(  66)				copy->push(p);
            			}
            		}
HXLINE(  69)		if (hx::IsNotNull( params )) {
HXLINE(  70)			int n = 0;
HXLINE(  71)			{
HXLINE(  71)				int _g1 = 0;
HXDLIN(  71)				while((_g1 < params->get_length())){
HXLINE(  71)					 ::Dynamic p1 = params->__get(_g1);
HXDLIN(  71)					_g1 = (_g1 + 1);
HXLINE(  72)					copy->set(n,p1);
HXLINE(  73)					n = (n + 1);
            				}
            			}
            		}
HXLINE(  77)		return copy;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FilterParser_obj,copyFilterDefaults,return )

void FilterParser_obj::buildDefaults(){
            	HX_GC_STACKFRAME(&_hx_pos_31bcc7ff180c92b7_80_buildDefaults)
HXLINE(  81)		if (hx::IsNotNull( ::haxe::ui::filters::FilterParser_obj::filterParamDefaults )) {
HXLINE(  82)			return;
            		}
HXLINE(  85)		::haxe::ui::filters::FilterParser_obj::filterParamDefaults =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  86)		{
HXLINE(  86)			::cpp::VirtualArray v = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(  86)			::haxe::ui::filters::FilterParser_obj::filterParamDefaults->set(HX_("drop-shadow",7e,63,30,e1),v);
            		}
HXLINE(  87)		{
HXLINE(  87)			::Dynamic this1 = ::haxe::ui::filters::FilterParser_obj::filterParamDefaults;
HXDLIN(  87)			::cpp::VirtualArray v1 = ( (::cpp::VirtualArray)(::haxe::ui::filters::FilterParser_obj::filterParamDefaults->get(HX_("drop-shadow",7e,63,30,e1))) )->concat(::cpp::VirtualArray_obj::__new(11)->init(0,4)->init(1,45)->init(2,0)->init(3,1)->init(4,4)->init(5,4)->init(6,1)->init(7,1)->init(8,false)->init(9,false)->init(10,false));
HXDLIN(  87)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("drop-shadow",7e,63,30,e1),v1);
            		}
HXLINE(  89)		{
HXLINE(  89)			::cpp::VirtualArray v2 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(  89)			::haxe::ui::filters::FilterParser_obj::filterParamDefaults->set(HX_("blur",a7,42,19,41),v2);
            		}
HXLINE(  90)		{
HXLINE(  90)			::Dynamic this2 = ::haxe::ui::filters::FilterParser_obj::filterParamDefaults;
HXDLIN(  90)			::cpp::VirtualArray v3 = ( (::cpp::VirtualArray)(::haxe::ui::filters::FilterParser_obj::filterParamDefaults->get(HX_("blur",a7,42,19,41))) )->concat(::cpp::VirtualArray_obj::__new(1)->init(0,1));
HXDLIN(  90)			( ( ::haxe::ds::StringMap)(this2) )->set(HX_("blur",a7,42,19,41),v3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FilterParser_obj,buildDefaults,(void))


FilterParser_obj::FilterParser_obj()
{
}

bool FilterParser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"parseBlur") ) { outValue = parseBlur_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseFilter") ) { outValue = parseFilter_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"buildDefaults") ) { outValue = buildDefaults_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parseDropShadow") ) { outValue = parseDropShadow_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"copyFilterDefaults") ) { outValue = copyFilterDefaults_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"filterParamDefaults") ) { outValue = ( filterParamDefaults ); return true; }
	}
	return false;
}

bool FilterParser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"filterParamDefaults") ) { filterParamDefaults=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *FilterParser_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FilterParser_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FilterParser_obj::filterParamDefaults,HX_("filterParamDefaults",67,9f,5f,d6)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FilterParser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FilterParser_obj::filterParamDefaults,"filterParamDefaults");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FilterParser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FilterParser_obj::filterParamDefaults,"filterParamDefaults");
};

#endif

hx::Class FilterParser_obj::__mClass;

static ::String FilterParser_obj_sStaticFields[] = {
	HX_("filterParamDefaults",67,9f,5f,d6),
	HX_("parseFilter",4b,cc,71,00),
	HX_("parseDropShadow",82,33,7a,b5),
	HX_("parseBlur",7a,94,bf,c8),
	HX_("copyFilterDefaults",ff,a6,6e,c3),
	HX_("buildDefaults",e0,45,6a,aa),
	::String(null())
};

void FilterParser_obj::__register()
{
	FilterParser_obj _hx_dummy;
	FilterParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.filters.FilterParser",7c,31,b4,0a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FilterParser_obj::__GetStatic;
	__mClass->mSetStaticField = &FilterParser_obj::__SetStatic;
	__mClass->mMarkFunc = FilterParser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FilterParser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FilterParser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FilterParser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FilterParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FilterParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace filters
