// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_EasingFunction
#include <hxinc/haxe/ui/styles/EasingFunction.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Value
#include <hxinc/haxe/ui/styles/Value.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_animation_KeyFrame
#include <hxinc/haxe/ui/styles/animation/KeyFrame.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_animation_util_Actuator
#include <hxinc/haxe/ui/styles/animation/util/Actuator.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_animation_util_ActuatorOptions
#include <hxinc/haxe/ui/styles/animation/util/ActuatorOptions.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_elements_Directive
#include <hxinc/haxe/ui/styles/elements/Directive.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a8d5c98c92ede0c6_7_new,"haxe.ui.styles.animation.KeyFrame","new",0xf6c4ec44,"haxe.ui.styles.animation.KeyFrame.new","haxe/ui/styles/animation/KeyFrame.hx",7,0x354be64a)
HX_LOCAL_STACK_FRAME(_hx_pos_a8d5c98c92ede0c6_19_stop,"haxe.ui.styles.animation.KeyFrame","stop",0xf8e33b9e,"haxe.ui.styles.animation.KeyFrame.stop","haxe/ui/styles/animation/KeyFrame.hx",19,0x354be64a)
HX_LOCAL_STACK_FRAME(_hx_pos_a8d5c98c92ede0c6_38_run,"haxe.ui.styles.animation.KeyFrame","run",0xf6c8032f,"haxe.ui.styles.animation.KeyFrame.run","haxe/ui/styles/animation/KeyFrame.hx",38,0x354be64a)
HX_LOCAL_STACK_FRAME(_hx_pos_a8d5c98c92ede0c6_25_run,"haxe.ui.styles.animation.KeyFrame","run",0xf6c8032f,"haxe.ui.styles.animation.KeyFrame.run","haxe/ui/styles/animation/KeyFrame.hx",25,0x354be64a)
namespace haxe{
namespace ui{
namespace styles{
namespace animation{

void KeyFrame_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a8d5c98c92ede0c6_7_new)
HXLINE(  10)		this->delay = ((Float)0);
HXLINE(   9)		this->time = ((Float)0);
HXLINE(   8)		this->_hx_set_directives(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
            	}

Dynamic KeyFrame_obj::__CreateEmpty() { return new KeyFrame_obj; }

void *KeyFrame_obj::_hx_vtable = 0;

Dynamic KeyFrame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyFrame_obj > _hx_result = new KeyFrame_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyFrame_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b277596;
}

void KeyFrame_obj::stop(){
            	HX_GC_STACKFRAME(&_hx_pos_a8d5c98c92ede0c6_19_stop)
HXDLIN(  19)		if (hx::IsNotNull( this->_actuator )) {
HXLINE(  20)			this->_actuator->stop();
HXLINE(  21)			this->_hx_set__actuator(HX_CTX, null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyFrame_obj,stop,(void))

void KeyFrame_obj::run( ::Dynamic target, ::Dynamic cb){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::styles::animation::KeyFrame,_gthis, ::Dynamic,cb) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_a8d5c98c92ede0c6_38_run)
HXLINE(  39)			_gthis->_hx_set__actuator(HX_CTX, null());
HXLINE(  40)			cb();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_a8d5c98c92ede0c6_25_run)
HXDLIN(  25)		 ::haxe::ui::styles::animation::KeyFrame _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  26)		if (hx::IsNotNull( this->_actuator )) {
HXLINE(  27)			return;
            		}
HXLINE(  30)		 ::Dynamic properties =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  31)		{
HXLINE(  31)			int _g = 0;
HXDLIN(  31)			::Array< ::Dynamic> _g1 = this->directives;
HXDLIN(  31)			while((_g < _g1->length)){
HXLINE(  31)				 ::haxe::ui::styles::elements::Directive d = _g1->__get(_g).StaticCast<  ::haxe::ui::styles::elements::Directive >();
HXDLIN(  31)				_g = (_g + 1);
HXLINE(  32)				::Reflect_obj::setField(properties,d->directive,d->value);
            			}
            		}
HXLINE(  35)		Float _hx_tmp = this->time;
HXDLIN(  35)		this->_hx_set__actuator(HX_CTX,  ::haxe::ui::styles::animation::util::Actuator_obj::__alloc( HX_CTX ,target,properties,_hx_tmp, ::haxe::ui::styles::animation::util::ActuatorOptions_obj::__alloc( HX_CTX ,this->delay,this->easingFunction, ::Dynamic(new _hx_Closure_0(_gthis,cb)),null())));
HXLINE(  43)		this->_actuator->run();
            	}


HX_DEFINE_DYNAMIC_FUNC2(KeyFrame_obj,run,(void))


hx::ObjectPtr< KeyFrame_obj > KeyFrame_obj::__new() {
	hx::ObjectPtr< KeyFrame_obj > __this = new KeyFrame_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< KeyFrame_obj > KeyFrame_obj::__alloc(hx::Ctx *_hx_ctx) {
	KeyFrame_obj *__this = (KeyFrame_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(KeyFrame_obj), true, "haxe.ui.styles.animation.KeyFrame"));
	*(void **)__this = KeyFrame_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

KeyFrame_obj::KeyFrame_obj()
{
}

void KeyFrame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyFrame);
	HX_MARK_MEMBER_NAME(directives,"directives");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(easingFunction,"easingFunction");
	HX_MARK_MEMBER_NAME(_actuator,"_actuator");
	HX_MARK_END_CLASS();
}

void KeyFrame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(directives,"directives");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(easingFunction,"easingFunction");
	HX_VISIT_MEMBER_NAME(_actuator,"_actuator");
}

hx::Val KeyFrame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_actuator") ) { return hx::Val( _actuator ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"directives") ) { return hx::Val( directives ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"easingFunction") ) { return hx::Val( easingFunction ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val KeyFrame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_actuator") ) { _hx_set__actuator(HX_CTX_GET,inValue.Cast<  ::haxe::ui::styles::animation::util::Actuator >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"directives") ) { _hx_set_directives(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"easingFunction") ) { _hx_set_easingFunction(HX_CTX_GET,inValue.Cast<  ::haxe::ui::styles::EasingFunction >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyFrame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("directives",44,dd,1a,28));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("delay",83,d7,26,d7));
	outFields->push(HX_("easingFunction",e3,d6,ae,0d));
	outFields->push(HX_("_actuator",98,f4,3d,08));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo KeyFrame_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(KeyFrame_obj,directives),HX_("directives",44,dd,1a,28)},
	{hx::fsFloat,(int)offsetof(KeyFrame_obj,time),HX_("time",0d,cc,fc,4c)},
	{hx::fsFloat,(int)offsetof(KeyFrame_obj,delay),HX_("delay",83,d7,26,d7)},
	{hx::fsObject /*  ::haxe::ui::styles::EasingFunction */ ,(int)offsetof(KeyFrame_obj,easingFunction),HX_("easingFunction",e3,d6,ae,0d)},
	{hx::fsObject /*  ::haxe::ui::styles::animation::util::Actuator */ ,(int)offsetof(KeyFrame_obj,_actuator),HX_("_actuator",98,f4,3d,08)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *KeyFrame_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyFrame_obj_sMemberFields[] = {
	HX_("directives",44,dd,1a,28),
	HX_("time",0d,cc,fc,4c),
	HX_("delay",83,d7,26,d7),
	HX_("easingFunction",e3,d6,ae,0d),
	HX_("_actuator",98,f4,3d,08),
	HX_("stop",02,f0,5b,4c),
	HX_("run",4b,e7,56,00),
	::String(null()) };

hx::Class KeyFrame_obj::__mClass;

void KeyFrame_obj::__register()
{
	KeyFrame_obj _hx_dummy;
	KeyFrame_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.styles.animation.KeyFrame",52,ba,48,d5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KeyFrame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KeyFrame_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyFrame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyFrame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace styles
} // end namespace animation
