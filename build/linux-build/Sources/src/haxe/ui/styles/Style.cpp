// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_filters_Filter
#include <hxinc/haxe/ui/filters/Filter.h>
#endif
#ifndef INCLUDED_haxe_ui_filters_FilterParser
#include <hxinc/haxe/ui/filters/FilterParser.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_EasingFunction
#include <hxinc/haxe/ui/styles/EasingFunction.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <hxinc/haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Value
#include <hxinc/haxe/ui/styles/Value.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_ValueTools
#include <hxinc/haxe/ui/styles/ValueTools.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_animation_AnimationOptions
#include <hxinc/haxe/ui/styles/animation/AnimationOptions.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_elements_Directive
#include <hxinc/haxe/ui/styles/elements/Directive.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9d9665b5ee789a4_9_new,"haxe.ui.styles.Style","new",0x2c473849,"haxe.ui.styles.Style.new","haxe/ui/styles/Style.hx",9,0x438ac9a8)
HX_LOCAL_STACK_FRAME(_hx_pos_d9d9665b5ee789a4_109_mergeDirectives,"haxe.ui.styles.Style","mergeDirectives",0x72f23b85,"haxe.ui.styles.Style.mergeDirectives","haxe/ui/styles/Style.hx",109,0x438ac9a8)
HX_LOCAL_STACK_FRAME(_hx_pos_d9d9665b5ee789a4_324_apply,"haxe.ui.styles.Style","apply",0xc1c77997,"haxe.ui.styles.Style.apply","haxe/ui/styles/Style.hx",324,0x438ac9a8)
HX_LOCAL_STACK_FRAME(_hx_pos_d9d9665b5ee789a4_448_equalTo,"haxe.ui.styles.Style","equalTo",0x442d7eb8,"haxe.ui.styles.Style.equalTo","haxe/ui/styles/Style.hx",448,0x438ac9a8)
HX_LOCAL_STACK_FRAME(_hx_pos_d9d9665b5ee789a4_553_createAnimationOptions,"haxe.ui.styles.Style","createAnimationOptions",0x876bdd8d,"haxe.ui.styles.Style.createAnimationOptions","haxe/ui/styles/Style.hx",553,0x438ac9a8)
namespace haxe{
namespace ui{
namespace styles{

void Style_obj::__construct( ::Dynamic left, ::Dynamic top, ::Dynamic autoWidth, ::Dynamic width, ::Dynamic percentWidth, ::Dynamic initialWidth, ::Dynamic initialPercentWidth, ::Dynamic minWidth, ::Dynamic maxWidth, ::Dynamic autoHeight, ::Dynamic height, ::Dynamic percentHeight, ::Dynamic initialHeight, ::Dynamic initialPercentHeight, ::Dynamic minHeight, ::Dynamic maxHeight, ::Dynamic paddingTop, ::Dynamic paddingLeft, ::Dynamic paddingRight, ::Dynamic paddingBottom, ::Dynamic marginTop, ::Dynamic marginLeft, ::Dynamic marginRight, ::Dynamic marginBottom, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic backgroundColorEnd,::String backgroundGradientStyle, ::Dynamic backgroundOpacity,::String backgroundImage,::String backgroundImageRepeat, ::Dynamic backgroundImageClipTop, ::Dynamic backgroundImageClipLeft, ::Dynamic backgroundImageClipBottom, ::Dynamic backgroundImageClipRight, ::Dynamic backgroundImageSliceTop, ::Dynamic backgroundImageSliceLeft, ::Dynamic backgroundImageSliceBottom, ::Dynamic backgroundImageSliceRight, ::Dynamic borderColor, ::Dynamic borderTopColor, ::Dynamic borderLeftColor, ::Dynamic borderBottomColor, ::Dynamic borderRightColor, ::Dynamic borderSize, ::Dynamic borderTopSize, ::Dynamic borderLeftSize, ::Dynamic borderBottomSize, ::Dynamic borderRightSize, ::Dynamic borderRadius, ::Dynamic borderOpacity,::String borderStyle,::String icon,::String iconPosition,::String horizontalAlign,::String verticalAlign,::String textAlign, ::Dynamic opacity, ::Dynamic clip, ::Dynamic native,::String fontName, ::Dynamic fontSize, ::Dynamic fontBold, ::Dynamic fontUnderline, ::Dynamic fontItalic,::String cursor, ::Dynamic hidden,::Array< ::Dynamic> filter,::String resource,::String animationName, ::haxe::ui::styles::animation::AnimationOptions animationOptions,::String mode,::String pointerEvents){
            	HX_GC_STACKFRAME(&_hx_pos_d9d9665b5ee789a4_9_new)
HXDLIN(   9)		this->_hx_set_left(HX_CTX, left);
HXDLIN(   9)		this->_hx_set_top(HX_CTX, top);
HXDLIN(   9)		this->_hx_set_autoWidth(HX_CTX, autoWidth);
HXDLIN(   9)		this->_hx_set_width(HX_CTX, width);
HXDLIN(   9)		this->_hx_set_percentWidth(HX_CTX, percentWidth);
HXDLIN(   9)		this->_hx_set_initialWidth(HX_CTX, initialWidth);
HXDLIN(   9)		this->_hx_set_initialPercentWidth(HX_CTX, initialPercentWidth);
HXDLIN(   9)		this->_hx_set_minWidth(HX_CTX, minWidth);
HXDLIN(   9)		this->_hx_set_maxWidth(HX_CTX, maxWidth);
HXDLIN(   9)		this->_hx_set_autoHeight(HX_CTX, autoHeight);
HXDLIN(   9)		this->_hx_set_height(HX_CTX, height);
HXDLIN(   9)		this->_hx_set_percentHeight(HX_CTX, percentHeight);
HXDLIN(   9)		this->_hx_set_initialHeight(HX_CTX, initialHeight);
HXDLIN(   9)		this->_hx_set_initialPercentHeight(HX_CTX, initialPercentHeight);
HXDLIN(   9)		this->_hx_set_minHeight(HX_CTX, minHeight);
HXDLIN(   9)		this->_hx_set_maxHeight(HX_CTX, maxHeight);
HXDLIN(   9)		this->_hx_set_paddingTop(HX_CTX, paddingTop);
HXDLIN(   9)		this->_hx_set_paddingLeft(HX_CTX, paddingLeft);
HXDLIN(   9)		this->_hx_set_paddingRight(HX_CTX, paddingRight);
HXDLIN(   9)		this->_hx_set_paddingBottom(HX_CTX, paddingBottom);
HXDLIN(   9)		this->_hx_set_marginTop(HX_CTX, marginTop);
HXDLIN(   9)		this->_hx_set_marginLeft(HX_CTX, marginLeft);
HXDLIN(   9)		this->_hx_set_marginRight(HX_CTX, marginRight);
HXDLIN(   9)		this->_hx_set_marginBottom(HX_CTX, marginBottom);
HXDLIN(   9)		this->_hx_set_horizontalSpacing(HX_CTX, horizontalSpacing);
HXDLIN(   9)		this->_hx_set_verticalSpacing(HX_CTX, verticalSpacing);
HXDLIN(   9)		this->_hx_set_color(HX_CTX, color);
HXDLIN(   9)		this->_hx_set_backgroundColor(HX_CTX, backgroundColor);
HXDLIN(   9)		this->_hx_set_backgroundColorEnd(HX_CTX, backgroundColorEnd);
HXDLIN(   9)		this->_hx_set_backgroundGradientStyle(HX_CTX, backgroundGradientStyle);
HXDLIN(   9)		this->_hx_set_backgroundOpacity(HX_CTX, backgroundOpacity);
HXDLIN(   9)		this->_hx_set_backgroundImage(HX_CTX, backgroundImage);
HXDLIN(   9)		this->_hx_set_backgroundImageRepeat(HX_CTX, backgroundImageRepeat);
HXDLIN(   9)		this->_hx_set_backgroundImageClipTop(HX_CTX, backgroundImageClipTop);
HXDLIN(   9)		this->_hx_set_backgroundImageClipLeft(HX_CTX, backgroundImageClipLeft);
HXDLIN(   9)		this->_hx_set_backgroundImageClipBottom(HX_CTX, backgroundImageClipBottom);
HXDLIN(   9)		this->_hx_set_backgroundImageClipRight(HX_CTX, backgroundImageClipRight);
HXDLIN(   9)		this->_hx_set_backgroundImageSliceTop(HX_CTX, backgroundImageSliceTop);
HXDLIN(   9)		this->_hx_set_backgroundImageSliceLeft(HX_CTX, backgroundImageSliceLeft);
HXDLIN(   9)		this->_hx_set_backgroundImageSliceBottom(HX_CTX, backgroundImageSliceBottom);
HXDLIN(   9)		this->_hx_set_backgroundImageSliceRight(HX_CTX, backgroundImageSliceRight);
HXDLIN(   9)		this->_hx_set_borderColor(HX_CTX, borderColor);
HXDLIN(   9)		this->_hx_set_borderTopColor(HX_CTX, borderTopColor);
HXDLIN(   9)		this->_hx_set_borderLeftColor(HX_CTX, borderLeftColor);
HXDLIN(   9)		this->_hx_set_borderBottomColor(HX_CTX, borderBottomColor);
HXDLIN(   9)		this->_hx_set_borderRightColor(HX_CTX, borderRightColor);
HXDLIN(   9)		this->_hx_set_borderSize(HX_CTX, borderSize);
HXDLIN(   9)		this->_hx_set_borderTopSize(HX_CTX, borderTopSize);
HXDLIN(   9)		this->_hx_set_borderLeftSize(HX_CTX, borderLeftSize);
HXDLIN(   9)		this->_hx_set_borderBottomSize(HX_CTX, borderBottomSize);
HXDLIN(   9)		this->_hx_set_borderRightSize(HX_CTX, borderRightSize);
HXDLIN(   9)		this->_hx_set_borderRadius(HX_CTX, borderRadius);
HXDLIN(   9)		this->_hx_set_borderOpacity(HX_CTX, borderOpacity);
HXDLIN(   9)		this->_hx_set_borderStyle(HX_CTX, borderStyle);
HXDLIN(   9)		this->_hx_set_icon(HX_CTX, icon);
HXDLIN(   9)		this->_hx_set_iconPosition(HX_CTX, iconPosition);
HXDLIN(   9)		this->_hx_set_horizontalAlign(HX_CTX, horizontalAlign);
HXDLIN(   9)		this->_hx_set_verticalAlign(HX_CTX, verticalAlign);
HXDLIN(   9)		this->_hx_set_textAlign(HX_CTX, textAlign);
HXDLIN(   9)		this->_hx_set_opacity(HX_CTX, opacity);
HXDLIN(   9)		this->_hx_set_clip(HX_CTX, clip);
HXDLIN(   9)		this->_hx_set_native(HX_CTX, native);
HXDLIN(   9)		this->_hx_set_fontName(HX_CTX, fontName);
HXDLIN(   9)		this->_hx_set_fontSize(HX_CTX, fontSize);
HXDLIN(   9)		this->_hx_set_fontBold(HX_CTX, fontBold);
HXDLIN(   9)		this->_hx_set_fontUnderline(HX_CTX, fontUnderline);
HXDLIN(   9)		this->_hx_set_fontItalic(HX_CTX, fontItalic);
HXDLIN(   9)		this->_hx_set_cursor(HX_CTX, cursor);
HXDLIN(   9)		this->_hx_set_hidden(HX_CTX, hidden);
HXDLIN(   9)		this->_hx_set_filter(HX_CTX, filter);
HXDLIN(   9)		this->_hx_set_resource(HX_CTX, resource);
HXDLIN(   9)		this->_hx_set_animationName(HX_CTX, animationName);
HXDLIN(   9)		this->_hx_set_animationOptions(HX_CTX, animationOptions);
HXDLIN(   9)		this->_hx_set_mode(HX_CTX, mode);
HXDLIN(   9)		this->_hx_set_pointerEvents(HX_CTX, pointerEvents);
            	}

Dynamic Style_obj::__CreateEmpty() { return new Style_obj; }

void *Style_obj::_hx_vtable = 0;

Dynamic Style_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Style_obj > _hx_result = new Style_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19],inArgs[20],inArgs[21],inArgs[22],inArgs[23],inArgs[24],inArgs[25],inArgs[26],inArgs[27],inArgs[28],inArgs[29],inArgs[30],inArgs[31],inArgs[32],inArgs[33],inArgs[34],inArgs[35],inArgs[36],inArgs[37],inArgs[38],inArgs[39],inArgs[40],inArgs[41],inArgs[42],inArgs[43],inArgs[44],inArgs[45],inArgs[46],inArgs[47],inArgs[48],inArgs[49],inArgs[50],inArgs[51],inArgs[52],inArgs[53],inArgs[54],inArgs[55],inArgs[56],inArgs[57],inArgs[58],inArgs[59],inArgs[60],inArgs[61],inArgs[62],inArgs[63],inArgs[64],inArgs[65],inArgs[66],inArgs[67],inArgs[68],inArgs[69],inArgs[70],inArgs[71],inArgs[72],inArgs[73],inArgs[74]);
	return _hx_result;
}

bool Style_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23ee4ab5;
}

void Style_obj::mergeDirectives( ::haxe::ds::StringMap map){
            	HX_GC_STACKFRAME(&_hx_pos_d9d9665b5ee789a4_109_mergeDirectives)
HXDLIN( 109)		 ::Dynamic key = map->keys();
HXDLIN( 109)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 109)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 110)			 ::haxe::ui::styles::elements::Directive v = ( ( ::haxe::ui::styles::elements::Directive)(map->get(key1)) );
HXLINE( 112)			::String _hx_switch_0 = key1;
            			if (  (_hx_switch_0==HX_("animation-delay",3a,1e,9e,af)) ){
HXLINE( 300)				if (hx::IsNull( this->animationOptions )) {
HXLINE( 300)					this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            				}
HXLINE( 301)				this->animationOptions->_hx_set_delay(HX_CTX, ::haxe::ui::styles::ValueTools_obj::time(v->value));
HXLINE( 299)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("animation-direction",76,d0,26,5b)) ){
HXLINE( 311)				if (hx::IsNull( this->animationOptions )) {
HXLINE( 311)					this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            				}
HXLINE( 312)				this->animationOptions->_hx_set_direction(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXLINE( 310)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("animation-duration",fd,94,5c,5e)) ){
HXLINE( 294)				if (hx::IsNull( this->animationOptions )) {
HXLINE( 294)					this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            				}
HXLINE( 295)				this->animationOptions->_hx_set_duration(HX_CTX, ::haxe::ui::styles::ValueTools_obj::time(v->value));
HXLINE( 293)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("animation-fill-mode",e4,12,c9,b7)) ){
HXLINE( 314)				if (hx::IsNull( this->animationOptions )) {
HXLINE( 314)					this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            				}
HXLINE( 315)				this->animationOptions->_hx_set_fillMode(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXLINE( 313)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("animation-iteration-count",56,1d,0c,30)) ){
HXLINE( 303)				if (hx::IsNull( this->animationOptions )) {
HXLINE( 303)					this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            				}
HXLINE( 304)				 ::haxe::ui::styles::Value _g = v->value;
HXDLIN( 304)				 ::Dynamic _hx_tmp;
HXDLIN( 304)				if ((_g->_hx_getIndex() == 6)) {
HXLINE( 305)					::String val = _g->_hx_getString(0);
HXLINE( 306)					if ((val == HX_("infinite",d4,16,69,da))) {
HXLINE( 304)						_hx_tmp = -1;
            					}
            					else {
HXLINE( 304)						_hx_tmp = 0;
            					}
            				}
            				else {
HXLINE( 304)					_hx_tmp = ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value);
            				}
HXDLIN( 304)				this->animationOptions->_hx_set_iterationCount(HX_CTX, _hx_tmp);
HXLINE( 302)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("animation-name",74,af,fd,ae)) ){
HXLINE( 292)				this->_hx_set_animationName(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 292)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("animation-timing-function",f2,dd,68,8f)) ){
HXLINE( 297)				if (hx::IsNull( this->animationOptions )) {
HXLINE( 297)					this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            				}
HXLINE( 298)				this->animationOptions->_hx_set_easingFunction(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcEasing(v->value));
HXLINE( 296)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-color",84,e8,6d,de)) ){
HXLINE( 169)				 ::haxe::ui::styles::Value _g1 = v->value;
HXLINE( 170)				{
HXLINE( 171)					this->_hx_set_backgroundColor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXLINE( 172)					if (map->exists(HX_("background-color-end",52,18,72,2e))) {
HXLINE( 173)						this->_hx_set_backgroundColorEnd(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(( ( ::haxe::ui::styles::elements::Directive)(map->get(HX_("background-color-end",52,18,72,2e))) )->value));
            					}
            					else {
HXLINE( 175)						this->_hx_set_backgroundColorEnd(HX_CTX, null());
            					}
            				}
HXLINE( 169)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-color-end",52,18,72,2e)) ){
HXLINE( 179)				this->_hx_set_backgroundColorEnd(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 179)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-gradient-style",93,4c,5d,f2)) ){
HXLINE( 181)				this->_hx_set_backgroundGradientStyle(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 181)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image",7c,96,7a,51)) ){
HXLINE( 186)				this->_hx_set_backgroundImage(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 186)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-clip-bottom",77,77,29,f7)) ){
HXLINE( 197)				this->_hx_set_backgroundImageClipBottom(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 197)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-clip-left",93,1d,47,f5)) ){
HXLINE( 193)				this->_hx_set_backgroundImageClipLeft(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 193)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-clip-right",d0,d0,ff,1f)) ){
HXLINE( 195)				this->_hx_set_backgroundImageClipRight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 195)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-clip-top",89,46,05,ca)) ){
HXLINE( 191)				this->_hx_set_backgroundImageClipTop(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 191)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-repeat",4c,e8,d5,ca)) ){
HXLINE( 188)				this->_hx_set_backgroundImageRepeat(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 188)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-slice-bottom",77,2c,4a,86)) ){
HXLINE( 206)				this->_hx_set_backgroundImageSliceBottom(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 206)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-slice-left",93,92,60,b3)) ){
HXLINE( 202)				this->_hx_set_backgroundImageSliceLeft(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 202)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-slice-right",d0,bb,2c,b8)) ){
HXLINE( 204)				this->_hx_set_backgroundImageSliceRight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 204)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-image-slice-top",89,71,91,06)) ){
HXLINE( 200)				this->_hx_set_backgroundImageSliceTop(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 200)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("background-opacity",2c,9f,1b,c0)) ){
HXLINE( 183)				this->_hx_set_backgroundOpacity(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_float(v->value));
HXDLIN( 183)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-bottom-color",82,36,ce,4f)) ){
HXLINE( 217)				this->_hx_set_borderBottomColor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 217)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-bottom-size",82,24,35,2c)) ||  (_hx_switch_0==HX_("border-bottom-width",25,7b,d4,cf)) ){
HXLINE( 226)				this->_hx_set_borderBottomSize(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 226)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-color",02,74,10,71)) ){
HXLINE( 209)				this->_hx_set_borderColor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 209)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-left-color",5e,12,2b,99)) ){
HXLINE( 213)				this->_hx_set_borderLeftColor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 213)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-left-size",26,78,a1,a1)) ||  (_hx_switch_0==HX_("border-left-width",01,57,31,19)) ){
HXLINE( 222)				this->_hx_set_borderLeftSize(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 222)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-opacity",2a,86,16,29)) ){
HXLINE( 231)				this->_hx_set_borderOpacity(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_float(v->value));
HXDLIN( 231)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-radius",d3,18,c5,67)) ){
HXLINE( 229)				this->_hx_set_borderRadius(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 229)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-right-color",d1,4a,d2,a1)) ){
HXLINE( 215)				this->_hx_set_borderRightColor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 215)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-right-size",13,4f,36,fb)) ||  (_hx_switch_0==HX_("border-right-width",74,8f,d8,21)) ){
HXLINE( 224)				this->_hx_set_borderRightSize(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 224)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-style",d0,a7,d1,aa)) ){
HXLINE( 233)				this->_hx_set_borderStyle(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 233)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-top-color",8a,f0,a5,c6)) ){
HXLINE( 211)				this->_hx_set_borderTopColor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 211)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("border-top-size",7a,83,50,ad)) ||  (_hx_switch_0==HX_("border-top-width",2d,35,ac,46)) ){
HXLINE( 220)				this->_hx_set_borderTopSize(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 220)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("clip",d0,6e,c2,41)) ){
HXLINE( 272)				this->_hx_set_clip(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_bool(v->value));
HXDLIN( 272)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ){
HXLINE( 166)				this->_hx_set_color(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_int(v->value));
HXDLIN( 166)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("cursor",d6,8e,e8,3e)) ){
HXLINE( 267)				this->_hx_set_cursor(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 267)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("filter",b8,1f,35,85)) ){
HXLINE( 277)				 ::haxe::ui::styles::Value _g2 = v->value;
HXDLIN( 277)				switch((int)(_g2->_hx_getIndex())){
            					case (int)5: {
HXLINE( 278)						::Array< ::Dynamic> vl = _g2->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 278)						::String f = _g2->_hx_getString(0);
HXDLIN( 278)						{
HXLINE( 279)							::cpp::VirtualArray arr = ::haxe::ui::styles::ValueTools_obj::array(vl);
HXLINE( 280)							arr->insert(0,f);
HXLINE( 281)							this->_hx_set_filter(HX_CTX, ::Array_obj< ::Dynamic>::__new(1)->init(0,::haxe::ui::filters::FilterParser_obj::parseFilter(arr)));
            						}
            					}
            					break;
            					case (int)6: {
HXLINE( 282)						::String f1 = _g2->_hx_getString(0);
HXLINE( 283)						this->_hx_set_filter(HX_CTX, ::Array_obj< ::Dynamic>::__new(1)->init(0,::haxe::ui::filters::FilterParser_obj::parseFilter(::cpp::VirtualArray_obj::__new(1)->init(0,f1))));
            					}
            					break;
            					case (int)9: {
HXLINE( 285)						this->_hx_set_filter(HX_CTX, null());
            					}
            					break;
            					default:{
            					}
            				}
HXLINE( 277)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("font-bold",03,d0,d1,42)) ){
HXLINE( 260)				this->_hx_set_fontBold(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_bool(v->value));
HXDLIN( 260)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("font-italic",ee,98,29,9d)) ){
HXLINE( 264)				this->_hx_set_fontItalic(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_bool(v->value));
HXDLIN( 264)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("font-name",c9,c0,b5,4a)) ){
HXLINE( 256)				this->_hx_set_fontName(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 256)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("font-size",3f,ef,09,4e)) ){
HXLINE( 258)				this->_hx_set_fontSize(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 258)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("font-underline",ce,7d,77,c9)) ){
HXLINE( 262)				this->_hx_set_fontUnderline(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_bool(v->value));
HXDLIN( 262)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE( 131)				this->_hx_set_autoHeight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::constant(v->value,HX_("auto",6f,df,76,40)));
HXLINE( 132)				this->_hx_set_height(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXLINE( 133)				this->_hx_set_percentHeight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::percent(v->value));
HXLINE( 130)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("hidden",6a,ff,95,4c)) ){
HXLINE( 269)				this->_hx_set_hidden(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_bool(v->value));
HXDLIN( 269)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("horizontal-align",5c,53,a7,93)) ){
HXLINE( 246)				this->_hx_set_horizontalAlign(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 246)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("horizontal-spacing",da,c3,ba,32)) ){
HXLINE( 161)				this->_hx_set_horizontalSpacing(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 161)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("icon",79,e7,b2,45)) ){
HXLINE( 236)				if ((v->value->_hx_getIndex() == 9)) {
HXLINE( 238)					this->_hx_set_icon(HX_CTX, null());
            				}
            				else {
HXLINE( 240)					this->_hx_set_icon(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
            				}
HXLINE( 236)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("icon-position",3d,f7,d4,68)) ){
HXLINE( 243)				this->_hx_set_iconPosition(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 243)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("initial-height",d0,af,f7,6c)) ){
HXLINE( 135)				this->_hx_set_initialHeight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXLINE( 136)				this->_hx_set_initialPercentHeight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXLINE( 134)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("initial-width",3d,3e,ce,5d)) ){
HXLINE( 123)				this->_hx_set_initialWidth(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXLINE( 124)				this->_hx_set_initialPercentWidth(HX_CTX, ::haxe::ui::styles::ValueTools_obj::percent(v->value));
HXLINE( 122)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 114)				this->_hx_set_left(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 114)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("margin-bottom",6a,d8,ef,2a)) ){
HXLINE( 158)				this->_hx_set_marginBottom(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 158)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("margin-left",c6,4b,ff,e7)) ){
HXLINE( 154)				this->_hx_set_marginLeft(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 154)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("margin-right",3d,0f,70,8e)) ){
HXLINE( 156)				this->_hx_set_marginRight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 156)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("margin-top",b6,1f,6b,70)) ){
HXLINE( 152)				this->_hx_set_marginTop(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 152)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("max-height",b0,39,65,ee)) ){
HXLINE( 140)				this->_hx_set_maxHeight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 140)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("max-width",5d,90,68,c3)) ){
HXLINE( 128)				this->_hx_set_maxWidth(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 128)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("min-height",82,0c,f8,49)) ){
HXLINE( 138)				this->_hx_set_minHeight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 138)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("min-width",cb,7d,25,ed)) ){
HXLINE( 126)				this->_hx_set_minWidth(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 126)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("mode",63,d3,60,48)) ){
HXLINE( 317)				this->_hx_set_mode(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 317)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("native",97,c9,1c,22)) ){
HXLINE( 274)				this->_hx_set_native(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_bool(v->value));
HXDLIN( 274)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("opacity",cb,5d,65,eb)) ){
HXLINE( 253)				this->_hx_set_opacity(HX_CTX, ::haxe::ui::styles::ValueTools_obj::_hx_float(v->value));
HXDLIN( 253)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("padding-bottom",27,b9,bd,d9)) ){
HXLINE( 149)				this->_hx_set_paddingBottom(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 149)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("padding-left",43,93,ce,ce)) ){
HXLINE( 145)				this->_hx_set_paddingLeft(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 145)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("padding-right",20,55,ff,9c)) ){
HXLINE( 147)				this->_hx_set_paddingRight(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 147)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("padding-top",d9,16,74,71)) ){
HXLINE( 143)				this->_hx_set_paddingTop(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 143)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("pointer-events",e9,af,84,7a)) ){
HXLINE( 319)				this->_hx_set_pointerEvents(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 319)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("resource",ce,5c,a0,12)) ){
HXLINE( 290)				this->_hx_set_resource(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 290)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("text-align",e5,9f,fc,21)) ){
HXLINE( 250)				this->_hx_set_textAlign(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 250)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE( 116)				this->_hx_set_top(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 116)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("vertical-align",6e,0c,90,b5)) ){
HXLINE( 248)				this->_hx_set_verticalAlign(HX_CTX, ::haxe::ui::styles::ValueTools_obj::string(v->value));
HXDLIN( 248)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("vertical-spacing",6c,65,11,2b)) ){
HXLINE( 163)				this->_hx_set_verticalSpacing(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXDLIN( 163)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE( 119)				this->_hx_set_autoWidth(HX_CTX, ::haxe::ui::styles::ValueTools_obj::constant(v->value,HX_("auto",6f,df,76,40)));
HXLINE( 120)				this->_hx_set_width(HX_CTX, ::haxe::ui::styles::ValueTools_obj::calcDimension(v->value));
HXLINE( 121)				this->_hx_set_percentWidth(HX_CTX, ::haxe::ui::styles::ValueTools_obj::percent(v->value));
HXLINE( 118)				goto _hx_goto_2;
            			}
            			_hx_goto_2:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Style_obj,mergeDirectives,(void))

void Style_obj::apply( ::haxe::ui::styles::Style s){
            	HX_GC_STACKFRAME(&_hx_pos_d9d9665b5ee789a4_324_apply)
HXLINE( 325)		if (hx::IsNotNull( s->cursor )) {
HXLINE( 325)			this->_hx_set_cursor(HX_CTX, s->cursor);
            		}
HXLINE( 326)		if (hx::IsNotNull( s->hidden )) {
HXLINE( 326)			this->_hx_set_hidden(HX_CTX, s->hidden);
            		}
HXLINE( 328)		if (hx::IsNotNull( s->left )) {
HXLINE( 328)			this->_hx_set_left(HX_CTX, s->left);
            		}
HXLINE( 329)		if (hx::IsNotNull( s->top )) {
HXLINE( 329)			this->_hx_set_top(HX_CTX, s->top);
            		}
HXLINE( 331)		if (hx::IsNotNull( s->autoWidth )) {
HXLINE( 331)			this->_hx_set_autoWidth(HX_CTX, s->autoWidth);
            		}
HXLINE( 332)		if (hx::IsNotNull( s->autoHeight )) {
HXLINE( 332)			this->_hx_set_autoHeight(HX_CTX, s->autoHeight);
            		}
HXLINE( 333)		if (hx::IsNotNull( s->verticalSpacing )) {
HXLINE( 333)			this->_hx_set_verticalSpacing(HX_CTX, s->verticalSpacing);
            		}
HXLINE( 334)		if (hx::IsNotNull( s->horizontalSpacing )) {
HXLINE( 334)			this->_hx_set_horizontalSpacing(HX_CTX, s->horizontalSpacing);
            		}
HXLINE( 336)		if (hx::IsNotNull( s->width )) {
HXLINE( 337)			this->_hx_set_width(HX_CTX, s->width);
HXLINE( 338)			this->_hx_set_autoWidth(HX_CTX, false);
            		}
HXLINE( 340)		if (hx::IsNotNull( s->initialWidth )) {
HXLINE( 340)			this->_hx_set_initialWidth(HX_CTX, s->initialWidth);
            		}
HXLINE( 341)		if (hx::IsNotNull( s->initialPercentWidth )) {
HXLINE( 341)			this->_hx_set_initialPercentWidth(HX_CTX, s->initialPercentWidth);
            		}
HXLINE( 342)		if (hx::IsNotNull( s->minWidth )) {
HXLINE( 342)			this->_hx_set_minWidth(HX_CTX, s->minWidth);
            		}
HXLINE( 343)		if (hx::IsNotNull( s->maxWidth )) {
HXLINE( 343)			this->_hx_set_maxWidth(HX_CTX, s->maxWidth);
            		}
HXLINE( 345)		if (hx::IsNotNull( s->height )) {
HXLINE( 346)			this->_hx_set_height(HX_CTX, s->height);
HXLINE( 347)			this->_hx_set_autoHeight(HX_CTX, false);
            		}
HXLINE( 349)		if (hx::IsNotNull( s->initialHeight )) {
HXLINE( 349)			this->_hx_set_initialHeight(HX_CTX, s->initialHeight);
            		}
HXLINE( 350)		if (hx::IsNotNull( s->initialPercentHeight )) {
HXLINE( 350)			this->_hx_set_initialPercentHeight(HX_CTX, s->initialPercentHeight);
            		}
HXLINE( 351)		if (hx::IsNotNull( s->minHeight )) {
HXLINE( 351)			this->_hx_set_minHeight(HX_CTX, s->minHeight);
            		}
HXLINE( 352)		if (hx::IsNotNull( s->maxHeight )) {
HXLINE( 352)			this->_hx_set_maxHeight(HX_CTX, s->maxHeight);
            		}
HXLINE( 354)		if (hx::IsNotNull( s->percentWidth )) {
HXLINE( 355)			this->_hx_set_percentWidth(HX_CTX, s->percentWidth);
HXLINE( 356)			this->_hx_set_autoWidth(HX_CTX, false);
            		}
HXLINE( 358)		if (hx::IsNotNull( s->percentHeight )) {
HXLINE( 359)			this->_hx_set_percentHeight(HX_CTX, s->percentHeight);
HXLINE( 360)			this->_hx_set_autoHeight(HX_CTX, false);
            		}
HXLINE( 363)		if (hx::IsNotNull( s->paddingTop )) {
HXLINE( 363)			this->_hx_set_paddingTop(HX_CTX, s->paddingTop);
            		}
HXLINE( 364)		if (hx::IsNotNull( s->paddingLeft )) {
HXLINE( 364)			this->_hx_set_paddingLeft(HX_CTX, s->paddingLeft);
            		}
HXLINE( 365)		if (hx::IsNotNull( s->paddingRight )) {
HXLINE( 365)			this->_hx_set_paddingRight(HX_CTX, s->paddingRight);
            		}
HXLINE( 366)		if (hx::IsNotNull( s->paddingBottom )) {
HXLINE( 366)			this->_hx_set_paddingBottom(HX_CTX, s->paddingBottom);
            		}
HXLINE( 368)		if (hx::IsNotNull( s->marginTop )) {
HXLINE( 368)			this->_hx_set_marginTop(HX_CTX, s->marginTop);
            		}
HXLINE( 369)		if (hx::IsNotNull( s->marginLeft )) {
HXLINE( 369)			this->_hx_set_marginLeft(HX_CTX, s->marginLeft);
            		}
HXLINE( 370)		if (hx::IsNotNull( s->marginRight )) {
HXLINE( 370)			this->_hx_set_marginRight(HX_CTX, s->marginRight);
            		}
HXLINE( 371)		if (hx::IsNotNull( s->marginBottom )) {
HXLINE( 371)			this->_hx_set_marginBottom(HX_CTX, s->marginBottom);
            		}
HXLINE( 373)		if (hx::IsNotNull( s->color )) {
HXLINE( 373)			this->_hx_set_color(HX_CTX, s->color);
            		}
HXLINE( 375)		if (hx::IsNotNull( s->backgroundColor )) {
HXLINE( 376)			this->_hx_set_backgroundColor(HX_CTX, s->backgroundColor);
HXLINE( 377)			this->_hx_set_backgroundColorEnd(HX_CTX, null());
            		}
HXLINE( 379)		if (hx::IsNotNull( s->backgroundColorEnd )) {
HXLINE( 379)			this->_hx_set_backgroundColorEnd(HX_CTX, s->backgroundColorEnd);
            		}
HXLINE( 380)		if (hx::IsNotNull( s->backgroundGradientStyle )) {
HXLINE( 380)			this->_hx_set_backgroundGradientStyle(HX_CTX, s->backgroundGradientStyle);
            		}
HXLINE( 381)		if (hx::IsNotNull( s->backgroundOpacity )) {
HXLINE( 381)			this->_hx_set_backgroundOpacity(HX_CTX, s->backgroundOpacity);
            		}
HXLINE( 383)		if (hx::IsNotNull( s->backgroundImage )) {
HXLINE( 383)			this->_hx_set_backgroundImage(HX_CTX, s->backgroundImage);
            		}
HXLINE( 384)		if (hx::IsNotNull( s->backgroundImageRepeat )) {
HXLINE( 384)			this->_hx_set_backgroundImageRepeat(HX_CTX, s->backgroundImageRepeat);
            		}
HXLINE( 386)		if (hx::IsNotNull( s->backgroundImageClipTop )) {
HXLINE( 386)			this->_hx_set_backgroundImageClipTop(HX_CTX, s->backgroundImageClipTop);
            		}
HXLINE( 387)		if (hx::IsNotNull( s->backgroundImageClipLeft )) {
HXLINE( 387)			this->_hx_set_backgroundImageClipLeft(HX_CTX, s->backgroundImageClipLeft);
            		}
HXLINE( 388)		if (hx::IsNotNull( s->backgroundImageClipBottom )) {
HXLINE( 388)			this->_hx_set_backgroundImageClipBottom(HX_CTX, s->backgroundImageClipBottom);
            		}
HXLINE( 389)		if (hx::IsNotNull( s->backgroundImageClipRight )) {
HXLINE( 389)			this->_hx_set_backgroundImageClipRight(HX_CTX, s->backgroundImageClipRight);
            		}
HXLINE( 391)		if (hx::IsNotNull( s->backgroundImageSliceTop )) {
HXLINE( 391)			this->_hx_set_backgroundImageSliceTop(HX_CTX, s->backgroundImageSliceTop);
            		}
HXLINE( 392)		if (hx::IsNotNull( s->backgroundImageSliceLeft )) {
HXLINE( 392)			this->_hx_set_backgroundImageSliceLeft(HX_CTX, s->backgroundImageSliceLeft);
            		}
HXLINE( 393)		if (hx::IsNotNull( s->backgroundImageSliceBottom )) {
HXLINE( 393)			this->_hx_set_backgroundImageSliceBottom(HX_CTX, s->backgroundImageSliceBottom);
            		}
HXLINE( 394)		if (hx::IsNotNull( s->backgroundImageSliceRight )) {
HXLINE( 394)			this->_hx_set_backgroundImageSliceRight(HX_CTX, s->backgroundImageSliceRight);
            		}
HXLINE( 396)		if (hx::IsNotNull( s->borderColor )) {
HXLINE( 396)			this->_hx_set_borderColor(HX_CTX, s->borderColor);
            		}
HXLINE( 397)		if (hx::IsNotNull( s->borderTopColor )) {
HXLINE( 397)			this->_hx_set_borderTopColor(HX_CTX, s->borderTopColor);
            		}
HXLINE( 398)		if (hx::IsNotNull( s->borderLeftColor )) {
HXLINE( 398)			this->_hx_set_borderLeftColor(HX_CTX, s->borderLeftColor);
            		}
HXLINE( 399)		if (hx::IsNotNull( s->borderBottomColor )) {
HXLINE( 399)			this->_hx_set_borderBottomColor(HX_CTX, s->borderBottomColor);
            		}
HXLINE( 400)		if (hx::IsNotNull( s->borderRightColor )) {
HXLINE( 400)			this->_hx_set_borderRightColor(HX_CTX, s->borderRightColor);
            		}
HXLINE( 402)		if (hx::IsNotNull( s->borderSize )) {
HXLINE( 402)			this->_hx_set_borderSize(HX_CTX, s->borderSize);
            		}
HXLINE( 403)		if (hx::IsNotNull( s->borderTopSize )) {
HXLINE( 403)			this->_hx_set_borderTopSize(HX_CTX, s->borderTopSize);
            		}
HXLINE( 404)		if (hx::IsNotNull( s->borderLeftSize )) {
HXLINE( 404)			this->_hx_set_borderLeftSize(HX_CTX, s->borderLeftSize);
            		}
HXLINE( 405)		if (hx::IsNotNull( s->borderBottomSize )) {
HXLINE( 405)			this->_hx_set_borderBottomSize(HX_CTX, s->borderBottomSize);
            		}
HXLINE( 406)		if (hx::IsNotNull( s->borderRightSize )) {
HXLINE( 406)			this->_hx_set_borderRightSize(HX_CTX, s->borderRightSize);
            		}
HXLINE( 408)		if (hx::IsNotNull( s->borderRadius )) {
HXLINE( 408)			this->_hx_set_borderRadius(HX_CTX, s->borderRadius);
            		}
HXLINE( 409)		if (hx::IsNotNull( s->borderOpacity )) {
HXLINE( 409)			this->_hx_set_borderOpacity(HX_CTX, s->borderOpacity);
            		}
HXLINE( 410)		if (hx::IsNotNull( s->borderStyle )) {
HXLINE( 410)			this->_hx_set_borderStyle(HX_CTX, s->borderStyle);
            		}
HXLINE( 412)		if (hx::IsNotNull( s->filter )) {
HXLINE( 412)			this->_hx_set_filter(HX_CTX, s->filter->copy());
            		}
HXLINE( 413)		if (hx::IsNotNull( s->resource )) {
HXLINE( 413)			this->_hx_set_resource(HX_CTX, s->resource);
            		}
HXLINE( 415)		if (hx::IsNotNull( s->icon )) {
HXLINE( 415)			this->_hx_set_icon(HX_CTX, s->icon);
            		}
HXLINE( 416)		if (hx::IsNotNull( s->iconPosition )) {
HXLINE( 416)			this->_hx_set_iconPosition(HX_CTX, s->iconPosition);
            		}
HXLINE( 418)		if (hx::IsNotNull( s->horizontalAlign )) {
HXLINE( 418)			this->_hx_set_horizontalAlign(HX_CTX, s->horizontalAlign);
            		}
HXLINE( 419)		if (hx::IsNotNull( s->verticalAlign )) {
HXLINE( 419)			this->_hx_set_verticalAlign(HX_CTX, s->verticalAlign);
            		}
HXLINE( 420)		if (hx::IsNotNull( s->textAlign )) {
HXLINE( 420)			this->_hx_set_textAlign(HX_CTX, s->textAlign);
            		}
HXLINE( 422)		if (hx::IsNotNull( s->opacity )) {
HXLINE( 422)			this->_hx_set_opacity(HX_CTX, s->opacity);
            		}
HXLINE( 424)		if (hx::IsNotNull( s->clip )) {
HXLINE( 424)			this->_hx_set_clip(HX_CTX, s->clip);
            		}
HXLINE( 425)		if (hx::IsNotNull( s->native )) {
HXLINE( 425)			this->_hx_set_native(HX_CTX, s->native);
            		}
HXLINE( 427)		if (hx::IsNotNull( s->fontName )) {
HXLINE( 427)			this->_hx_set_fontName(HX_CTX, s->fontName);
            		}
HXLINE( 428)		if (hx::IsNotNull( s->fontSize )) {
HXLINE( 428)			this->_hx_set_fontSize(HX_CTX, s->fontSize);
            		}
HXLINE( 429)		if (hx::IsNotNull( s->fontBold )) {
HXLINE( 429)			this->_hx_set_fontBold(HX_CTX, s->fontBold);
            		}
HXLINE( 430)		if (hx::IsNotNull( s->fontUnderline )) {
HXLINE( 430)			this->_hx_set_fontUnderline(HX_CTX, s->fontUnderline);
            		}
HXLINE( 431)		if (hx::IsNotNull( s->fontItalic )) {
HXLINE( 431)			this->_hx_set_fontItalic(HX_CTX, s->fontItalic);
            		}
HXLINE( 433)		if (hx::IsNotNull( s->animationName )) {
HXLINE( 433)			this->_hx_set_animationName(HX_CTX, s->animationName);
            		}
HXLINE( 434)		if (hx::IsNotNull( s->animationOptions )) {
HXLINE( 435)			if (hx::IsNull( this->animationOptions )) {
HXLINE( 435)				this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            			}
HXLINE( 436)			if (hx::IsNotNull( s->animationOptions->duration )) {
HXLINE( 436)				this->animationOptions->_hx_set_duration(HX_CTX, s->animationOptions->duration);
            			}
HXLINE( 437)			if (hx::IsNotNull( s->animationOptions->delay )) {
HXLINE( 437)				this->animationOptions->_hx_set_delay(HX_CTX, s->animationOptions->delay);
            			}
HXLINE( 438)			if (hx::IsNotNull( s->animationOptions->iterationCount )) {
HXLINE( 438)				this->animationOptions->_hx_set_iterationCount(HX_CTX, s->animationOptions->iterationCount);
            			}
HXLINE( 439)			if (hx::IsNotNull( s->animationOptions->easingFunction )) {
HXLINE( 439)				this->animationOptions->_hx_set_easingFunction(HX_CTX, s->animationOptions->easingFunction);
            			}
HXLINE( 440)			if (hx::IsNotNull( s->animationOptions->direction )) {
HXLINE( 440)				this->animationOptions->_hx_set_direction(HX_CTX, s->animationOptions->direction);
            			}
HXLINE( 441)			if (hx::IsNotNull( s->animationOptions->fillMode )) {
HXLINE( 441)				this->animationOptions->_hx_set_fillMode(HX_CTX, s->animationOptions->fillMode);
            			}
            		}
HXLINE( 444)		if (hx::IsNotNull( s->mode )) {
HXLINE( 444)			this->_hx_set_mode(HX_CTX, s->mode);
            		}
HXLINE( 445)		if (hx::IsNotNull( s->pointerEvents )) {
HXLINE( 445)			this->_hx_set_pointerEvents(HX_CTX, s->pointerEvents);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Style_obj,apply,(void))

bool Style_obj::equalTo( ::haxe::ui::styles::Style s){
            	HX_STACKFRAME(&_hx_pos_d9d9665b5ee789a4_448_equalTo)
HXLINE( 449)		if ((s->cursor != this->cursor)) {
HXLINE( 449)			return false;
            		}
HXLINE( 450)		if (hx::IsNotEq( s->hidden,this->hidden )) {
HXLINE( 450)			return false;
            		}
HXLINE( 452)		if (hx::IsNotEq( s->left,this->left )) {
HXLINE( 452)			return false;
            		}
HXLINE( 453)		if (hx::IsNotEq( s->top,this->top )) {
HXLINE( 453)			return false;
            		}
HXLINE( 456)		if (hx::IsNotEq( s->autoWidth,this->autoWidth )) {
HXLINE( 456)			return false;
            		}
HXLINE( 457)		if (hx::IsNotEq( s->autoHeight,this->autoHeight )) {
HXLINE( 457)			return false;
            		}
HXLINE( 458)		if (hx::IsNotEq( s->verticalSpacing,this->verticalSpacing )) {
HXLINE( 458)			return false;
            		}
HXLINE( 459)		if (hx::IsNotEq( s->horizontalSpacing,this->horizontalSpacing )) {
HXLINE( 459)			return false;
            		}
HXLINE( 461)		if (hx::IsNotEq( s->width,this->width )) {
HXLINE( 461)			return false;
            		}
HXLINE( 462)		if (hx::IsNotEq( s->initialWidth,this->initialWidth )) {
HXLINE( 462)			return false;
            		}
HXLINE( 463)		if (hx::IsNotEq( s->initialPercentWidth,this->initialPercentWidth )) {
HXLINE( 463)			return false;
            		}
HXLINE( 464)		if (hx::IsNotEq( s->minWidth,this->minWidth )) {
HXLINE( 464)			return false;
            		}
HXLINE( 465)		if (hx::IsNotEq( s->maxWidth,this->maxWidth )) {
HXLINE( 465)			return false;
            		}
HXLINE( 467)		if (hx::IsNotEq( s->height,this->height )) {
HXLINE( 467)			return false;
            		}
HXLINE( 468)		if (hx::IsNotEq( s->initialHeight,this->initialHeight )) {
HXLINE( 468)			return false;
            		}
HXLINE( 469)		if (hx::IsNotEq( s->initialPercentHeight,this->initialPercentHeight )) {
HXLINE( 469)			return false;
            		}
HXLINE( 470)		if (hx::IsNotEq( s->minHeight,this->minHeight )) {
HXLINE( 470)			return false;
            		}
HXLINE( 471)		if (hx::IsNotEq( s->maxHeight,this->maxHeight )) {
HXLINE( 471)			return false;
            		}
HXLINE( 473)		if (hx::IsNotEq( s->percentWidth,this->percentWidth )) {
HXLINE( 473)			return false;
            		}
HXLINE( 474)		if (hx::IsNotEq( s->percentHeight,this->percentHeight )) {
HXLINE( 474)			return false;
            		}
HXLINE( 476)		if (hx::IsNotEq( s->paddingTop,this->paddingTop )) {
HXLINE( 476)			return false;
            		}
HXLINE( 477)		if (hx::IsNotEq( s->paddingLeft,this->paddingLeft )) {
HXLINE( 477)			return false;
            		}
HXLINE( 478)		if (hx::IsNotEq( s->paddingRight,this->paddingRight )) {
HXLINE( 478)			return false;
            		}
HXLINE( 479)		if (hx::IsNotEq( s->paddingBottom,this->paddingBottom )) {
HXLINE( 479)			return false;
            		}
HXLINE( 481)		if (hx::IsNotEq( s->marginTop,this->marginTop )) {
HXLINE( 481)			return false;
            		}
HXLINE( 482)		if (hx::IsNotEq( s->marginLeft,this->marginLeft )) {
HXLINE( 482)			return false;
            		}
HXLINE( 483)		if (hx::IsNotEq( s->marginRight,this->marginRight )) {
HXLINE( 483)			return false;
            		}
HXLINE( 484)		if (hx::IsNotEq( s->marginBottom,this->marginBottom )) {
HXLINE( 484)			return false;
            		}
HXLINE( 486)		if (hx::IsNotEq( s->color,this->color )) {
HXLINE( 486)			return false;
            		}
HXLINE( 488)		if (hx::IsNotEq( s->backgroundColor,this->backgroundColor )) {
HXLINE( 488)			return false;
            		}
HXLINE( 489)		if (hx::IsNotEq( s->backgroundColorEnd,this->backgroundColorEnd )) {
HXLINE( 489)			return false;
            		}
HXLINE( 490)		if ((s->backgroundGradientStyle != this->backgroundGradientStyle)) {
HXLINE( 490)			return false;
            		}
HXLINE( 491)		if (hx::IsNotEq( s->backgroundOpacity,this->backgroundOpacity )) {
HXLINE( 491)			return false;
            		}
HXLINE( 493)		if ((s->backgroundImage != this->backgroundImage)) {
HXLINE( 493)			return false;
            		}
HXLINE( 494)		if ((s->backgroundImageRepeat != this->backgroundImageRepeat)) {
HXLINE( 494)			return false;
            		}
HXLINE( 496)		if (hx::IsNotEq( s->backgroundImageClipTop,this->backgroundImageClipTop )) {
HXLINE( 496)			return false;
            		}
HXLINE( 497)		if (hx::IsNotEq( s->backgroundImageClipLeft,this->backgroundImageClipLeft )) {
HXLINE( 497)			return false;
            		}
HXLINE( 498)		if (hx::IsNotEq( s->backgroundImageClipBottom,this->backgroundImageClipBottom )) {
HXLINE( 498)			return false;
            		}
HXLINE( 499)		if (hx::IsNotEq( s->backgroundImageClipRight,this->backgroundImageClipRight )) {
HXLINE( 499)			return false;
            		}
HXLINE( 501)		if (hx::IsNotEq( s->backgroundImageSliceTop,this->backgroundImageSliceTop )) {
HXLINE( 501)			return false;
            		}
HXLINE( 502)		if (hx::IsNotEq( s->backgroundImageSliceLeft,this->backgroundImageSliceLeft )) {
HXLINE( 502)			return false;
            		}
HXLINE( 503)		if (hx::IsNotEq( s->backgroundImageSliceBottom,this->backgroundImageSliceBottom )) {
HXLINE( 503)			return false;
            		}
HXLINE( 504)		if (hx::IsNotEq( s->backgroundImageSliceRight,this->backgroundImageSliceRight )) {
HXLINE( 504)			return false;
            		}
HXLINE( 506)		if (hx::IsNotEq( s->borderColor,this->borderColor )) {
HXLINE( 506)			return false;
            		}
HXLINE( 507)		if (hx::IsNotEq( s->borderTopColor,this->borderTopColor )) {
HXLINE( 507)			return false;
            		}
HXLINE( 508)		if (hx::IsNotEq( s->borderLeftColor,this->borderLeftColor )) {
HXLINE( 508)			return false;
            		}
HXLINE( 509)		if (hx::IsNotEq( s->borderBottomColor,this->borderBottomColor )) {
HXLINE( 509)			return false;
            		}
HXLINE( 510)		if (hx::IsNotEq( s->borderRightColor,this->borderRightColor )) {
HXLINE( 510)			return false;
            		}
HXLINE( 512)		if (hx::IsNotEq( s->borderSize,this->borderSize )) {
HXLINE( 512)			return false;
            		}
HXLINE( 513)		if (hx::IsNotEq( s->borderTopSize,this->borderTopSize )) {
HXLINE( 513)			return false;
            		}
HXLINE( 514)		if (hx::IsNotEq( s->borderLeftSize,this->borderLeftSize )) {
HXLINE( 514)			return false;
            		}
HXLINE( 515)		if (hx::IsNotEq( s->borderBottomSize,this->borderBottomSize )) {
HXLINE( 515)			return false;
            		}
HXLINE( 516)		if (hx::IsNotEq( s->borderRightSize,this->borderRightSize )) {
HXLINE( 516)			return false;
            		}
HXLINE( 518)		if (hx::IsNotEq( s->borderRadius,this->borderRadius )) {
HXLINE( 518)			return false;
            		}
HXLINE( 519)		if (hx::IsNotEq( s->borderOpacity,this->borderOpacity )) {
HXLINE( 519)			return false;
            		}
HXLINE( 520)		if ((s->borderStyle != this->borderStyle)) {
HXLINE( 520)			return false;
            		}
HXLINE( 522)		if (hx::IsNotEq( s->filter,this->filter )) {
HXLINE( 522)			return false;
            		}
HXLINE( 523)		if ((s->resource != this->resource)) {
HXLINE( 523)			return false;
            		}
HXLINE( 525)		if ((s->icon != this->icon)) {
HXLINE( 525)			return false;
            		}
HXLINE( 526)		if ((s->iconPosition != this->iconPosition)) {
HXLINE( 526)			return false;
            		}
HXLINE( 528)		if ((s->horizontalAlign != this->horizontalAlign)) {
HXLINE( 528)			return false;
            		}
HXLINE( 529)		if ((s->verticalAlign != this->verticalAlign)) {
HXLINE( 529)			return false;
            		}
HXLINE( 530)		if ((s->textAlign != this->textAlign)) {
HXLINE( 530)			return false;
            		}
HXLINE( 532)		if (hx::IsNotEq( s->opacity,this->opacity )) {
HXLINE( 532)			return false;
            		}
HXLINE( 534)		if (hx::IsNotEq( s->clip,this->clip )) {
HXLINE( 534)			return false;
            		}
HXLINE( 535)		if (hx::IsNotEq( s->native,this->native )) {
HXLINE( 535)			return false;
            		}
HXLINE( 537)		if ((s->fontName != this->fontName)) {
HXLINE( 537)			return false;
            		}
HXLINE( 538)		if (hx::IsNotEq( s->fontSize,this->fontSize )) {
HXLINE( 538)			return false;
            		}
HXLINE( 539)		if (hx::IsNotEq( s->fontBold,this->fontBold )) {
HXLINE( 539)			return false;
            		}
HXLINE( 540)		if (hx::IsNotEq( s->fontUnderline,this->fontUnderline )) {
HXLINE( 540)			return false;
            		}
HXLINE( 541)		if (hx::IsNotEq( s->fontItalic,this->fontItalic )) {
HXLINE( 541)			return false;
            		}
HXLINE( 543)		if ((s->resource != this->resource)) {
HXLINE( 543)			return false;
            		}
HXLINE( 544)		if ((s->animationName != this->animationName)) {
HXLINE( 544)			return false;
            		}
HXLINE( 545)		bool _hx_tmp;
HXDLIN( 545)		if (hx::IsNotNull( this->animationOptions )) {
HXLINE( 545)			_hx_tmp = (this->animationOptions->compareTo(s->animationOptions) == false);
            		}
            		else {
HXLINE( 545)			_hx_tmp = false;
            		}
HXDLIN( 545)		if (_hx_tmp) {
HXLINE( 545)			return false;
            		}
HXLINE( 547)		if ((s->mode != this->mode)) {
HXLINE( 547)			return false;
            		}
HXLINE( 548)		if ((s->pointerEvents != this->pointerEvents)) {
HXLINE( 548)			return false;
            		}
HXLINE( 549)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Style_obj,equalTo,return )

void Style_obj::createAnimationOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_d9d9665b5ee789a4_553_createAnimationOptions)
HXDLIN( 553)		if (hx::IsNull( this->animationOptions )) {
HXDLIN( 553)			this->_hx_set_animationOptions(HX_CTX,  ::haxe::ui::styles::animation::AnimationOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Style_obj,createAnimationOptions,(void))


hx::ObjectPtr< Style_obj > Style_obj::__new( ::Dynamic left, ::Dynamic top, ::Dynamic autoWidth, ::Dynamic width, ::Dynamic percentWidth, ::Dynamic initialWidth, ::Dynamic initialPercentWidth, ::Dynamic minWidth, ::Dynamic maxWidth, ::Dynamic autoHeight, ::Dynamic height, ::Dynamic percentHeight, ::Dynamic initialHeight, ::Dynamic initialPercentHeight, ::Dynamic minHeight, ::Dynamic maxHeight, ::Dynamic paddingTop, ::Dynamic paddingLeft, ::Dynamic paddingRight, ::Dynamic paddingBottom, ::Dynamic marginTop, ::Dynamic marginLeft, ::Dynamic marginRight, ::Dynamic marginBottom, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic backgroundColorEnd,::String backgroundGradientStyle, ::Dynamic backgroundOpacity,::String backgroundImage,::String backgroundImageRepeat, ::Dynamic backgroundImageClipTop, ::Dynamic backgroundImageClipLeft, ::Dynamic backgroundImageClipBottom, ::Dynamic backgroundImageClipRight, ::Dynamic backgroundImageSliceTop, ::Dynamic backgroundImageSliceLeft, ::Dynamic backgroundImageSliceBottom, ::Dynamic backgroundImageSliceRight, ::Dynamic borderColor, ::Dynamic borderTopColor, ::Dynamic borderLeftColor, ::Dynamic borderBottomColor, ::Dynamic borderRightColor, ::Dynamic borderSize, ::Dynamic borderTopSize, ::Dynamic borderLeftSize, ::Dynamic borderBottomSize, ::Dynamic borderRightSize, ::Dynamic borderRadius, ::Dynamic borderOpacity,::String borderStyle,::String icon,::String iconPosition,::String horizontalAlign,::String verticalAlign,::String textAlign, ::Dynamic opacity, ::Dynamic clip, ::Dynamic native,::String fontName, ::Dynamic fontSize, ::Dynamic fontBold, ::Dynamic fontUnderline, ::Dynamic fontItalic,::String cursor, ::Dynamic hidden,::Array< ::Dynamic> filter,::String resource,::String animationName, ::haxe::ui::styles::animation::AnimationOptions animationOptions,::String mode,::String pointerEvents) {
	hx::ObjectPtr< Style_obj > __this = new Style_obj();
	__this->__construct(left,top,autoWidth,width,percentWidth,initialWidth,initialPercentWidth,minWidth,maxWidth,autoHeight,height,percentHeight,initialHeight,initialPercentHeight,minHeight,maxHeight,paddingTop,paddingLeft,paddingRight,paddingBottom,marginTop,marginLeft,marginRight,marginBottom,horizontalSpacing,verticalSpacing,color,backgroundColor,backgroundColorEnd,backgroundGradientStyle,backgroundOpacity,backgroundImage,backgroundImageRepeat,backgroundImageClipTop,backgroundImageClipLeft,backgroundImageClipBottom,backgroundImageClipRight,backgroundImageSliceTop,backgroundImageSliceLeft,backgroundImageSliceBottom,backgroundImageSliceRight,borderColor,borderTopColor,borderLeftColor,borderBottomColor,borderRightColor,borderSize,borderTopSize,borderLeftSize,borderBottomSize,borderRightSize,borderRadius,borderOpacity,borderStyle,icon,iconPosition,horizontalAlign,verticalAlign,textAlign,opacity,clip,native,fontName,fontSize,fontBold,fontUnderline,fontItalic,cursor,hidden,filter,resource,animationName,animationOptions,mode,pointerEvents);
	return __this;
}

hx::ObjectPtr< Style_obj > Style_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic left, ::Dynamic top, ::Dynamic autoWidth, ::Dynamic width, ::Dynamic percentWidth, ::Dynamic initialWidth, ::Dynamic initialPercentWidth, ::Dynamic minWidth, ::Dynamic maxWidth, ::Dynamic autoHeight, ::Dynamic height, ::Dynamic percentHeight, ::Dynamic initialHeight, ::Dynamic initialPercentHeight, ::Dynamic minHeight, ::Dynamic maxHeight, ::Dynamic paddingTop, ::Dynamic paddingLeft, ::Dynamic paddingRight, ::Dynamic paddingBottom, ::Dynamic marginTop, ::Dynamic marginLeft, ::Dynamic marginRight, ::Dynamic marginBottom, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic backgroundColorEnd,::String backgroundGradientStyle, ::Dynamic backgroundOpacity,::String backgroundImage,::String backgroundImageRepeat, ::Dynamic backgroundImageClipTop, ::Dynamic backgroundImageClipLeft, ::Dynamic backgroundImageClipBottom, ::Dynamic backgroundImageClipRight, ::Dynamic backgroundImageSliceTop, ::Dynamic backgroundImageSliceLeft, ::Dynamic backgroundImageSliceBottom, ::Dynamic backgroundImageSliceRight, ::Dynamic borderColor, ::Dynamic borderTopColor, ::Dynamic borderLeftColor, ::Dynamic borderBottomColor, ::Dynamic borderRightColor, ::Dynamic borderSize, ::Dynamic borderTopSize, ::Dynamic borderLeftSize, ::Dynamic borderBottomSize, ::Dynamic borderRightSize, ::Dynamic borderRadius, ::Dynamic borderOpacity,::String borderStyle,::String icon,::String iconPosition,::String horizontalAlign,::String verticalAlign,::String textAlign, ::Dynamic opacity, ::Dynamic clip, ::Dynamic native,::String fontName, ::Dynamic fontSize, ::Dynamic fontBold, ::Dynamic fontUnderline, ::Dynamic fontItalic,::String cursor, ::Dynamic hidden,::Array< ::Dynamic> filter,::String resource,::String animationName, ::haxe::ui::styles::animation::AnimationOptions animationOptions,::String mode,::String pointerEvents) {
	Style_obj *__this = (Style_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Style_obj), true, "haxe.ui.styles.Style"));
	*(void **)__this = Style_obj::_hx_vtable;
	__this->__construct(left,top,autoWidth,width,percentWidth,initialWidth,initialPercentWidth,minWidth,maxWidth,autoHeight,height,percentHeight,initialHeight,initialPercentHeight,minHeight,maxHeight,paddingTop,paddingLeft,paddingRight,paddingBottom,marginTop,marginLeft,marginRight,marginBottom,horizontalSpacing,verticalSpacing,color,backgroundColor,backgroundColorEnd,backgroundGradientStyle,backgroundOpacity,backgroundImage,backgroundImageRepeat,backgroundImageClipTop,backgroundImageClipLeft,backgroundImageClipBottom,backgroundImageClipRight,backgroundImageSliceTop,backgroundImageSliceLeft,backgroundImageSliceBottom,backgroundImageSliceRight,borderColor,borderTopColor,borderLeftColor,borderBottomColor,borderRightColor,borderSize,borderTopSize,borderLeftSize,borderBottomSize,borderRightSize,borderRadius,borderOpacity,borderStyle,icon,iconPosition,horizontalAlign,verticalAlign,textAlign,opacity,clip,native,fontName,fontSize,fontBold,fontUnderline,fontItalic,cursor,hidden,filter,resource,animationName,animationOptions,mode,pointerEvents);
	return __this;
}

Style_obj::Style_obj()
{
}

void Style_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Style);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(autoWidth,"autoWidth");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(percentWidth,"percentWidth");
	HX_MARK_MEMBER_NAME(initialWidth,"initialWidth");
	HX_MARK_MEMBER_NAME(initialPercentWidth,"initialPercentWidth");
	HX_MARK_MEMBER_NAME(minWidth,"minWidth");
	HX_MARK_MEMBER_NAME(maxWidth,"maxWidth");
	HX_MARK_MEMBER_NAME(autoHeight,"autoHeight");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(percentHeight,"percentHeight");
	HX_MARK_MEMBER_NAME(initialHeight,"initialHeight");
	HX_MARK_MEMBER_NAME(initialPercentHeight,"initialPercentHeight");
	HX_MARK_MEMBER_NAME(minHeight,"minHeight");
	HX_MARK_MEMBER_NAME(maxHeight,"maxHeight");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(marginTop,"marginTop");
	HX_MARK_MEMBER_NAME(marginLeft,"marginLeft");
	HX_MARK_MEMBER_NAME(marginRight,"marginRight");
	HX_MARK_MEMBER_NAME(marginBottom,"marginBottom");
	HX_MARK_MEMBER_NAME(horizontalSpacing,"horizontalSpacing");
	HX_MARK_MEMBER_NAME(verticalSpacing,"verticalSpacing");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(backgroundColorEnd,"backgroundColorEnd");
	HX_MARK_MEMBER_NAME(backgroundGradientStyle,"backgroundGradientStyle");
	HX_MARK_MEMBER_NAME(backgroundOpacity,"backgroundOpacity");
	HX_MARK_MEMBER_NAME(backgroundImage,"backgroundImage");
	HX_MARK_MEMBER_NAME(backgroundImageRepeat,"backgroundImageRepeat");
	HX_MARK_MEMBER_NAME(backgroundImageClipTop,"backgroundImageClipTop");
	HX_MARK_MEMBER_NAME(backgroundImageClipLeft,"backgroundImageClipLeft");
	HX_MARK_MEMBER_NAME(backgroundImageClipBottom,"backgroundImageClipBottom");
	HX_MARK_MEMBER_NAME(backgroundImageClipRight,"backgroundImageClipRight");
	HX_MARK_MEMBER_NAME(backgroundImageSliceTop,"backgroundImageSliceTop");
	HX_MARK_MEMBER_NAME(backgroundImageSliceLeft,"backgroundImageSliceLeft");
	HX_MARK_MEMBER_NAME(backgroundImageSliceBottom,"backgroundImageSliceBottom");
	HX_MARK_MEMBER_NAME(backgroundImageSliceRight,"backgroundImageSliceRight");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(borderTopColor,"borderTopColor");
	HX_MARK_MEMBER_NAME(borderLeftColor,"borderLeftColor");
	HX_MARK_MEMBER_NAME(borderBottomColor,"borderBottomColor");
	HX_MARK_MEMBER_NAME(borderRightColor,"borderRightColor");
	HX_MARK_MEMBER_NAME(borderSize,"borderSize");
	HX_MARK_MEMBER_NAME(borderTopSize,"borderTopSize");
	HX_MARK_MEMBER_NAME(borderLeftSize,"borderLeftSize");
	HX_MARK_MEMBER_NAME(borderBottomSize,"borderBottomSize");
	HX_MARK_MEMBER_NAME(borderRightSize,"borderRightSize");
	HX_MARK_MEMBER_NAME(borderRadius,"borderRadius");
	HX_MARK_MEMBER_NAME(borderOpacity,"borderOpacity");
	HX_MARK_MEMBER_NAME(borderStyle,"borderStyle");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(iconPosition,"iconPosition");
	HX_MARK_MEMBER_NAME(horizontalAlign,"horizontalAlign");
	HX_MARK_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_MARK_MEMBER_NAME(textAlign,"textAlign");
	HX_MARK_MEMBER_NAME(opacity,"opacity");
	HX_MARK_MEMBER_NAME(clip,"clip");
	HX_MARK_MEMBER_NAME(native,"native");
	HX_MARK_MEMBER_NAME(fontName,"fontName");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(fontBold,"fontBold");
	HX_MARK_MEMBER_NAME(fontUnderline,"fontUnderline");
	HX_MARK_MEMBER_NAME(fontItalic,"fontItalic");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(hidden,"hidden");
	HX_MARK_MEMBER_NAME(filter,"filter");
	HX_MARK_MEMBER_NAME(resource,"resource");
	HX_MARK_MEMBER_NAME(animationName,"animationName");
	HX_MARK_MEMBER_NAME(animationOptions,"animationOptions");
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_MEMBER_NAME(pointerEvents,"pointerEvents");
	HX_MARK_END_CLASS();
}

void Style_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(autoWidth,"autoWidth");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(percentWidth,"percentWidth");
	HX_VISIT_MEMBER_NAME(initialWidth,"initialWidth");
	HX_VISIT_MEMBER_NAME(initialPercentWidth,"initialPercentWidth");
	HX_VISIT_MEMBER_NAME(minWidth,"minWidth");
	HX_VISIT_MEMBER_NAME(maxWidth,"maxWidth");
	HX_VISIT_MEMBER_NAME(autoHeight,"autoHeight");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(percentHeight,"percentHeight");
	HX_VISIT_MEMBER_NAME(initialHeight,"initialHeight");
	HX_VISIT_MEMBER_NAME(initialPercentHeight,"initialPercentHeight");
	HX_VISIT_MEMBER_NAME(minHeight,"minHeight");
	HX_VISIT_MEMBER_NAME(maxHeight,"maxHeight");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(marginTop,"marginTop");
	HX_VISIT_MEMBER_NAME(marginLeft,"marginLeft");
	HX_VISIT_MEMBER_NAME(marginRight,"marginRight");
	HX_VISIT_MEMBER_NAME(marginBottom,"marginBottom");
	HX_VISIT_MEMBER_NAME(horizontalSpacing,"horizontalSpacing");
	HX_VISIT_MEMBER_NAME(verticalSpacing,"verticalSpacing");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(backgroundColorEnd,"backgroundColorEnd");
	HX_VISIT_MEMBER_NAME(backgroundGradientStyle,"backgroundGradientStyle");
	HX_VISIT_MEMBER_NAME(backgroundOpacity,"backgroundOpacity");
	HX_VISIT_MEMBER_NAME(backgroundImage,"backgroundImage");
	HX_VISIT_MEMBER_NAME(backgroundImageRepeat,"backgroundImageRepeat");
	HX_VISIT_MEMBER_NAME(backgroundImageClipTop,"backgroundImageClipTop");
	HX_VISIT_MEMBER_NAME(backgroundImageClipLeft,"backgroundImageClipLeft");
	HX_VISIT_MEMBER_NAME(backgroundImageClipBottom,"backgroundImageClipBottom");
	HX_VISIT_MEMBER_NAME(backgroundImageClipRight,"backgroundImageClipRight");
	HX_VISIT_MEMBER_NAME(backgroundImageSliceTop,"backgroundImageSliceTop");
	HX_VISIT_MEMBER_NAME(backgroundImageSliceLeft,"backgroundImageSliceLeft");
	HX_VISIT_MEMBER_NAME(backgroundImageSliceBottom,"backgroundImageSliceBottom");
	HX_VISIT_MEMBER_NAME(backgroundImageSliceRight,"backgroundImageSliceRight");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(borderTopColor,"borderTopColor");
	HX_VISIT_MEMBER_NAME(borderLeftColor,"borderLeftColor");
	HX_VISIT_MEMBER_NAME(borderBottomColor,"borderBottomColor");
	HX_VISIT_MEMBER_NAME(borderRightColor,"borderRightColor");
	HX_VISIT_MEMBER_NAME(borderSize,"borderSize");
	HX_VISIT_MEMBER_NAME(borderTopSize,"borderTopSize");
	HX_VISIT_MEMBER_NAME(borderLeftSize,"borderLeftSize");
	HX_VISIT_MEMBER_NAME(borderBottomSize,"borderBottomSize");
	HX_VISIT_MEMBER_NAME(borderRightSize,"borderRightSize");
	HX_VISIT_MEMBER_NAME(borderRadius,"borderRadius");
	HX_VISIT_MEMBER_NAME(borderOpacity,"borderOpacity");
	HX_VISIT_MEMBER_NAME(borderStyle,"borderStyle");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(iconPosition,"iconPosition");
	HX_VISIT_MEMBER_NAME(horizontalAlign,"horizontalAlign");
	HX_VISIT_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_VISIT_MEMBER_NAME(textAlign,"textAlign");
	HX_VISIT_MEMBER_NAME(opacity,"opacity");
	HX_VISIT_MEMBER_NAME(clip,"clip");
	HX_VISIT_MEMBER_NAME(native,"native");
	HX_VISIT_MEMBER_NAME(fontName,"fontName");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(fontBold,"fontBold");
	HX_VISIT_MEMBER_NAME(fontUnderline,"fontUnderline");
	HX_VISIT_MEMBER_NAME(fontItalic,"fontItalic");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(hidden,"hidden");
	HX_VISIT_MEMBER_NAME(filter,"filter");
	HX_VISIT_MEMBER_NAME(resource,"resource");
	HX_VISIT_MEMBER_NAME(animationName,"animationName");
	HX_VISIT_MEMBER_NAME(animationOptions,"animationOptions");
	HX_VISIT_MEMBER_NAME(mode,"mode");
	HX_VISIT_MEMBER_NAME(pointerEvents,"pointerEvents");
}

hx::Val Style_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"icon") ) { return hx::Val( icon ); }
		if (HX_FIELD_EQ(inName,"clip") ) { return hx::Val( clip ); }
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"native") ) { return hx::Val( native ); }
		if (HX_FIELD_EQ(inName,"cursor") ) { return hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"hidden") ) { return hx::Val( hidden ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opacity") ) { return hx::Val( opacity ); }
		if (HX_FIELD_EQ(inName,"equalTo") ) { return hx::Val( equalTo_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minWidth") ) { return hx::Val( minWidth ); }
		if (HX_FIELD_EQ(inName,"maxWidth") ) { return hx::Val( maxWidth ); }
		if (HX_FIELD_EQ(inName,"fontName") ) { return hx::Val( fontName ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return hx::Val( fontSize ); }
		if (HX_FIELD_EQ(inName,"fontBold") ) { return hx::Val( fontBold ); }
		if (HX_FIELD_EQ(inName,"resource") ) { return hx::Val( resource ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { return hx::Val( autoWidth ); }
		if (HX_FIELD_EQ(inName,"minHeight") ) { return hx::Val( minHeight ); }
		if (HX_FIELD_EQ(inName,"maxHeight") ) { return hx::Val( maxHeight ); }
		if (HX_FIELD_EQ(inName,"marginTop") ) { return hx::Val( marginTop ); }
		if (HX_FIELD_EQ(inName,"textAlign") ) { return hx::Val( textAlign ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoHeight") ) { return hx::Val( autoHeight ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return hx::Val( paddingTop ); }
		if (HX_FIELD_EQ(inName,"marginLeft") ) { return hx::Val( marginLeft ); }
		if (HX_FIELD_EQ(inName,"borderSize") ) { return hx::Val( borderSize ); }
		if (HX_FIELD_EQ(inName,"fontItalic") ) { return hx::Val( fontItalic ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return hx::Val( paddingLeft ); }
		if (HX_FIELD_EQ(inName,"marginRight") ) { return hx::Val( marginRight ); }
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"borderStyle") ) { return hx::Val( borderStyle ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"percentWidth") ) { return hx::Val( percentWidth ); }
		if (HX_FIELD_EQ(inName,"initialWidth") ) { return hx::Val( initialWidth ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return hx::Val( paddingRight ); }
		if (HX_FIELD_EQ(inName,"marginBottom") ) { return hx::Val( marginBottom ); }
		if (HX_FIELD_EQ(inName,"borderRadius") ) { return hx::Val( borderRadius ); }
		if (HX_FIELD_EQ(inName,"iconPosition") ) { return hx::Val( iconPosition ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"percentHeight") ) { return hx::Val( percentHeight ); }
		if (HX_FIELD_EQ(inName,"initialHeight") ) { return hx::Val( initialHeight ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return hx::Val( paddingBottom ); }
		if (HX_FIELD_EQ(inName,"borderTopSize") ) { return hx::Val( borderTopSize ); }
		if (HX_FIELD_EQ(inName,"borderOpacity") ) { return hx::Val( borderOpacity ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { return hx::Val( verticalAlign ); }
		if (HX_FIELD_EQ(inName,"fontUnderline") ) { return hx::Val( fontUnderline ); }
		if (HX_FIELD_EQ(inName,"animationName") ) { return hx::Val( animationName ); }
		if (HX_FIELD_EQ(inName,"pointerEvents") ) { return hx::Val( pointerEvents ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"borderTopColor") ) { return hx::Val( borderTopColor ); }
		if (HX_FIELD_EQ(inName,"borderLeftSize") ) { return hx::Val( borderLeftSize ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"verticalSpacing") ) { return hx::Val( verticalSpacing ); }
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"backgroundImage") ) { return hx::Val( backgroundImage ); }
		if (HX_FIELD_EQ(inName,"borderLeftColor") ) { return hx::Val( borderLeftColor ); }
		if (HX_FIELD_EQ(inName,"borderRightSize") ) { return hx::Val( borderRightSize ); }
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { return hx::Val( horizontalAlign ); }
		if (HX_FIELD_EQ(inName,"mergeDirectives") ) { return hx::Val( mergeDirectives_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"borderRightColor") ) { return hx::Val( borderRightColor ); }
		if (HX_FIELD_EQ(inName,"borderBottomSize") ) { return hx::Val( borderBottomSize ); }
		if (HX_FIELD_EQ(inName,"animationOptions") ) { return hx::Val( animationOptions ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"horizontalSpacing") ) { return hx::Val( horizontalSpacing ); }
		if (HX_FIELD_EQ(inName,"backgroundOpacity") ) { return hx::Val( backgroundOpacity ); }
		if (HX_FIELD_EQ(inName,"borderBottomColor") ) { return hx::Val( borderBottomColor ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"backgroundColorEnd") ) { return hx::Val( backgroundColorEnd ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"initialPercentWidth") ) { return hx::Val( initialPercentWidth ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"initialPercentHeight") ) { return hx::Val( initialPercentHeight ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"backgroundImageRepeat") ) { return hx::Val( backgroundImageRepeat ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"backgroundImageClipTop") ) { return hx::Val( backgroundImageClipTop ); }
		if (HX_FIELD_EQ(inName,"createAnimationOptions") ) { return hx::Val( createAnimationOptions_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"backgroundGradientStyle") ) { return hx::Val( backgroundGradientStyle ); }
		if (HX_FIELD_EQ(inName,"backgroundImageClipLeft") ) { return hx::Val( backgroundImageClipLeft ); }
		if (HX_FIELD_EQ(inName,"backgroundImageSliceTop") ) { return hx::Val( backgroundImageSliceTop ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"backgroundImageClipRight") ) { return hx::Val( backgroundImageClipRight ); }
		if (HX_FIELD_EQ(inName,"backgroundImageSliceLeft") ) { return hx::Val( backgroundImageSliceLeft ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"backgroundImageClipBottom") ) { return hx::Val( backgroundImageClipBottom ); }
		if (HX_FIELD_EQ(inName,"backgroundImageSliceRight") ) { return hx::Val( backgroundImageSliceRight ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"backgroundImageSliceBottom") ) { return hx::Val( backgroundImageSliceBottom ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Style_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { _hx_set_top(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { _hx_set_left(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"icon") ) { _hx_set_icon(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"clip") ) { _hx_set_clip(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"mode") ) { _hx_set_mode(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { _hx_set_width(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { _hx_set_color(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { _hx_set_height(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"native") ) { _hx_set_native(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"cursor") ) { _hx_set_cursor(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"hidden") ) { _hx_set_hidden(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"filter") ) { _hx_set_filter(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opacity") ) { _hx_set_opacity(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minWidth") ) { _hx_set_minWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"maxWidth") ) { _hx_set_maxWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"fontName") ) { _hx_set_fontName(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"fontSize") ) { _hx_set_fontSize(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"fontBold") ) { _hx_set_fontBold(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"resource") ) { _hx_set_resource(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { _hx_set_autoWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"minHeight") ) { _hx_set_minHeight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"maxHeight") ) { _hx_set_maxHeight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"marginTop") ) { _hx_set_marginTop(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"textAlign") ) { _hx_set_textAlign(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoHeight") ) { _hx_set_autoHeight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { _hx_set_paddingTop(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"marginLeft") ) { _hx_set_marginLeft(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderSize") ) { _hx_set_borderSize(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"fontItalic") ) { _hx_set_fontItalic(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { _hx_set_paddingLeft(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"marginRight") ) { _hx_set_marginRight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderColor") ) { _hx_set_borderColor(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderStyle") ) { _hx_set_borderStyle(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"percentWidth") ) { _hx_set_percentWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"initialWidth") ) { _hx_set_initialWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { _hx_set_paddingRight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"marginBottom") ) { _hx_set_marginBottom(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderRadius") ) { _hx_set_borderRadius(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"iconPosition") ) { _hx_set_iconPosition(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"percentHeight") ) { _hx_set_percentHeight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"initialHeight") ) { _hx_set_initialHeight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { _hx_set_paddingBottom(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderTopSize") ) { _hx_set_borderTopSize(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderOpacity") ) { _hx_set_borderOpacity(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { _hx_set_verticalAlign(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"fontUnderline") ) { _hx_set_fontUnderline(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"animationName") ) { _hx_set_animationName(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerEvents") ) { _hx_set_pointerEvents(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"borderTopColor") ) { _hx_set_borderTopColor(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderLeftSize") ) { _hx_set_borderLeftSize(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"verticalSpacing") ) { _hx_set_verticalSpacing(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { _hx_set_backgroundColor(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundImage") ) { _hx_set_backgroundImage(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderLeftColor") ) { _hx_set_borderLeftColor(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderRightSize") ) { _hx_set_borderRightSize(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { _hx_set_horizontalAlign(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"borderRightColor") ) { _hx_set_borderRightColor(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderBottomSize") ) { _hx_set_borderBottomSize(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"animationOptions") ) { _hx_set_animationOptions(HX_CTX_GET,inValue.Cast<  ::haxe::ui::styles::animation::AnimationOptions >()); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"horizontalSpacing") ) { _hx_set_horizontalSpacing(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundOpacity") ) { _hx_set_backgroundOpacity(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"borderBottomColor") ) { _hx_set_borderBottomColor(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"backgroundColorEnd") ) { _hx_set_backgroundColorEnd(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"initialPercentWidth") ) { _hx_set_initialPercentWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"initialPercentHeight") ) { _hx_set_initialPercentHeight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"backgroundImageRepeat") ) { _hx_set_backgroundImageRepeat(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"backgroundImageClipTop") ) { _hx_set_backgroundImageClipTop(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"backgroundGradientStyle") ) { _hx_set_backgroundGradientStyle(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundImageClipLeft") ) { _hx_set_backgroundImageClipLeft(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundImageSliceTop") ) { _hx_set_backgroundImageSliceTop(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"backgroundImageClipRight") ) { _hx_set_backgroundImageClipRight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundImageSliceLeft") ) { _hx_set_backgroundImageSliceLeft(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"backgroundImageClipBottom") ) { _hx_set_backgroundImageClipBottom(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundImageSliceRight") ) { _hx_set_backgroundImageSliceRight(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"backgroundImageSliceBottom") ) { _hx_set_backgroundImageSliceBottom(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Style_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("autoWidth",17,f4,6d,a8));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("percentWidth",01,51,1b,fe));
	outFields->push(HX_("initialWidth",e2,b6,72,8e));
	outFields->push(HX_("initialPercentWidth",a5,63,65,03));
	outFields->push(HX_("minWidth",14,23,9a,c1));
	outFields->push(HX_("maxWidth",c2,08,80,74));
	outFields->push(HX_("autoHeight",b6,18,17,6e));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("percentHeight",8c,08,1b,10));
	outFields->push(HX_("initialHeight",8b,c7,3c,cc));
	outFields->push(HX_("initialPercentHeight",68,45,a1,ab));
	outFields->push(HX_("minHeight",19,07,94,5b));
	outFields->push(HX_("maxHeight",ab,19,d7,31));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("marginTop",07,7f,40,ee));
	outFields->push(HX_("marginLeft",55,53,dd,84));
	outFields->push(HX_("marginRight",ce,a4,d8,33));
	outFields->push(HX_("marginBottom",b9,21,0a,41));
	outFields->push(HX_("horizontalSpacing",ff,82,ed,70));
	outFields->push(HX_("verticalSpacing",ad,b9,a6,fa));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("backgroundColorEnd",46,f8,6e,2a));
	outFields->push(HX_("backgroundGradientStyle",53,34,9a,0d));
	outFields->push(HX_("backgroundOpacity",7d,6b,a7,64));
	outFields->push(HX_("backgroundImage",8d,fc,53,80));
	outFields->push(HX_("backgroundImageRepeat",c8,6f,dc,43));
	outFields->push(HX_("backgroundImageClipTop",98,58,30,79));
	outFields->push(HX_("backgroundImageClipLeft",a4,d8,cb,8b));
	outFields->push(HX_("backgroundImageClipBottom",c8,d8,9f,c4));
	outFields->push(HX_("backgroundImageClipRight",9f,c4,9e,3d));
	outFields->push(HX_("backgroundImageSliceTop",10,e7,36,b3));
	outFields->push(HX_("backgroundImageSliceLeft",2c,f3,81,17));
	outFields->push(HX_("backgroundImageSliceBottom",50,a5,f7,3d));
	outFields->push(HX_("backgroundImageSliceRight",17,e1,3f,f1));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("borderTopColor",9a,53,b1,a1));
	outFields->push(HX_("borderLeftColor",50,f5,f1,a9));
	outFields->push(HX_("borderBottomColor",ec,e0,49,43));
	outFields->push(HX_("borderRightColor",f3,87,4e,61));
	outFields->push(HX_("borderSize",cd,ff,ed,06));
	outFields->push(HX_("borderTopSize",6a,32,3e,22));
	outFields->push(HX_("borderLeftSize",74,b9,d3,5c));
	outFields->push(HX_("borderBottomSize",58,35,68,45));
	outFields->push(HX_("borderRightSize",31,8c,cf,01));
	outFields->push(HX_("borderRadius",5e,0a,30,0e));
	outFields->push(HX_("borderOpacity",3f,ee,3e,20));
	outFields->push(HX_("borderStyle",a5,70,96,10));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("iconPosition",42,e5,38,76));
	outFields->push(HX_("horizontalAlign",41,8f,67,f4));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("textAlign",d8,e6,7e,ba));
	outFields->push(HX_("opacity",cb,5d,65,eb));
	outFields->push(HX_("clip",d0,6e,c2,41));
	outFields->push(HX_("native",97,c9,1c,22));
	outFields->push(HX_("fontName",ba,8f,7d,cb));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("fontBold",f4,9e,99,c3));
	outFields->push(HX_("fontUnderline",3d,e5,a6,f7));
	outFields->push(HX_("fontItalic",1f,c6,b7,ba));
	outFields->push(HX_("cursor",d6,8e,e8,3e));
	outFields->push(HX_("hidden",6a,ff,95,4c));
	outFields->push(HX_("filter",b8,1f,35,85));
	outFields->push(HX_("resource",ce,5c,a0,12));
	outFields->push(HX_("animationName",6f,5f,4b,3b));
	outFields->push(HX_("animationOptions",ba,14,f0,ed));
	outFields->push(HX_("mode",63,d3,60,48));
	outFields->push(HX_("pointerEvents",b6,2f,49,f7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Style_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,left),HX_("left",07,08,b0,47)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,top),HX_("top",95,66,58,00)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,autoWidth),HX_("autoWidth",17,f4,6d,a8)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,percentWidth),HX_("percentWidth",01,51,1b,fe)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,initialWidth),HX_("initialWidth",e2,b6,72,8e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,initialPercentWidth),HX_("initialPercentWidth",a5,63,65,03)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,minWidth),HX_("minWidth",14,23,9a,c1)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,maxWidth),HX_("maxWidth",c2,08,80,74)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,autoHeight),HX_("autoHeight",b6,18,17,6e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,percentHeight),HX_("percentHeight",8c,08,1b,10)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,initialHeight),HX_("initialHeight",8b,c7,3c,cc)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,initialPercentHeight),HX_("initialPercentHeight",68,45,a1,ab)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,minHeight),HX_("minHeight",19,07,94,5b)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,maxHeight),HX_("maxHeight",ab,19,d7,31)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,marginTop),HX_("marginTop",07,7f,40,ee)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,marginLeft),HX_("marginLeft",55,53,dd,84)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,marginRight),HX_("marginRight",ce,a4,d8,33)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,marginBottom),HX_("marginBottom",b9,21,0a,41)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,horizontalSpacing),HX_("horizontalSpacing",ff,82,ed,70)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,verticalSpacing),HX_("verticalSpacing",ad,b9,a6,fa)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,color),HX_("color",63,71,5c,4a)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundColorEnd),HX_("backgroundColorEnd",46,f8,6e,2a)},
	{hx::fsString,(int)offsetof(Style_obj,backgroundGradientStyle),HX_("backgroundGradientStyle",53,34,9a,0d)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundOpacity),HX_("backgroundOpacity",7d,6b,a7,64)},
	{hx::fsString,(int)offsetof(Style_obj,backgroundImage),HX_("backgroundImage",8d,fc,53,80)},
	{hx::fsString,(int)offsetof(Style_obj,backgroundImageRepeat),HX_("backgroundImageRepeat",c8,6f,dc,43)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageClipTop),HX_("backgroundImageClipTop",98,58,30,79)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageClipLeft),HX_("backgroundImageClipLeft",a4,d8,cb,8b)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageClipBottom),HX_("backgroundImageClipBottom",c8,d8,9f,c4)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageClipRight),HX_("backgroundImageClipRight",9f,c4,9e,3d)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageSliceTop),HX_("backgroundImageSliceTop",10,e7,36,b3)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageSliceLeft),HX_("backgroundImageSliceLeft",2c,f3,81,17)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageSliceBottom),HX_("backgroundImageSliceBottom",50,a5,f7,3d)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,backgroundImageSliceRight),HX_("backgroundImageSliceRight",17,e1,3f,f1)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderTopColor),HX_("borderTopColor",9a,53,b1,a1)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderLeftColor),HX_("borderLeftColor",50,f5,f1,a9)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderBottomColor),HX_("borderBottomColor",ec,e0,49,43)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderRightColor),HX_("borderRightColor",f3,87,4e,61)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderSize),HX_("borderSize",cd,ff,ed,06)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderTopSize),HX_("borderTopSize",6a,32,3e,22)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderLeftSize),HX_("borderLeftSize",74,b9,d3,5c)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderBottomSize),HX_("borderBottomSize",58,35,68,45)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderRightSize),HX_("borderRightSize",31,8c,cf,01)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderRadius),HX_("borderRadius",5e,0a,30,0e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,borderOpacity),HX_("borderOpacity",3f,ee,3e,20)},
	{hx::fsString,(int)offsetof(Style_obj,borderStyle),HX_("borderStyle",a5,70,96,10)},
	{hx::fsString,(int)offsetof(Style_obj,icon),HX_("icon",79,e7,b2,45)},
	{hx::fsString,(int)offsetof(Style_obj,iconPosition),HX_("iconPosition",42,e5,38,76)},
	{hx::fsString,(int)offsetof(Style_obj,horizontalAlign),HX_("horizontalAlign",41,8f,67,f4)},
	{hx::fsString,(int)offsetof(Style_obj,verticalAlign),HX_("verticalAlign",6f,1e,7c,e4)},
	{hx::fsString,(int)offsetof(Style_obj,textAlign),HX_("textAlign",d8,e6,7e,ba)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,opacity),HX_("opacity",cb,5d,65,eb)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,clip),HX_("clip",d0,6e,c2,41)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,native),HX_("native",97,c9,1c,22)},
	{hx::fsString,(int)offsetof(Style_obj,fontName),HX_("fontName",ba,8f,7d,cb)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,fontSize),HX_("fontSize",30,be,d1,ce)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,fontBold),HX_("fontBold",f4,9e,99,c3)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,fontUnderline),HX_("fontUnderline",3d,e5,a6,f7)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,fontItalic),HX_("fontItalic",1f,c6,b7,ba)},
	{hx::fsString,(int)offsetof(Style_obj,cursor),HX_("cursor",d6,8e,e8,3e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Style_obj,hidden),HX_("hidden",6a,ff,95,4c)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Style_obj,filter),HX_("filter",b8,1f,35,85)},
	{hx::fsString,(int)offsetof(Style_obj,resource),HX_("resource",ce,5c,a0,12)},
	{hx::fsString,(int)offsetof(Style_obj,animationName),HX_("animationName",6f,5f,4b,3b)},
	{hx::fsObject /*  ::haxe::ui::styles::animation::AnimationOptions */ ,(int)offsetof(Style_obj,animationOptions),HX_("animationOptions",ba,14,f0,ed)},
	{hx::fsString,(int)offsetof(Style_obj,mode),HX_("mode",63,d3,60,48)},
	{hx::fsString,(int)offsetof(Style_obj,pointerEvents),HX_("pointerEvents",b6,2f,49,f7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Style_obj_sStaticStorageInfo = 0;
#endif

static ::String Style_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("autoWidth",17,f4,6d,a8),
	HX_("width",06,b6,62,ca),
	HX_("percentWidth",01,51,1b,fe),
	HX_("initialWidth",e2,b6,72,8e),
	HX_("initialPercentWidth",a5,63,65,03),
	HX_("minWidth",14,23,9a,c1),
	HX_("maxWidth",c2,08,80,74),
	HX_("autoHeight",b6,18,17,6e),
	HX_("height",e7,07,4c,02),
	HX_("percentHeight",8c,08,1b,10),
	HX_("initialHeight",8b,c7,3c,cc),
	HX_("initialPercentHeight",68,45,a1,ab),
	HX_("minHeight",19,07,94,5b),
	HX_("maxHeight",ab,19,d7,31),
	HX_("paddingTop",44,fd,05,3a),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("marginTop",07,7f,40,ee),
	HX_("marginLeft",55,53,dd,84),
	HX_("marginRight",ce,a4,d8,33),
	HX_("marginBottom",b9,21,0a,41),
	HX_("horizontalSpacing",ff,82,ed,70),
	HX_("verticalSpacing",ad,b9,a6,fa),
	HX_("color",63,71,5c,4a),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("backgroundColorEnd",46,f8,6e,2a),
	HX_("backgroundGradientStyle",53,34,9a,0d),
	HX_("backgroundOpacity",7d,6b,a7,64),
	HX_("backgroundImage",8d,fc,53,80),
	HX_("backgroundImageRepeat",c8,6f,dc,43),
	HX_("backgroundImageClipTop",98,58,30,79),
	HX_("backgroundImageClipLeft",a4,d8,cb,8b),
	HX_("backgroundImageClipBottom",c8,d8,9f,c4),
	HX_("backgroundImageClipRight",9f,c4,9e,3d),
	HX_("backgroundImageSliceTop",10,e7,36,b3),
	HX_("backgroundImageSliceLeft",2c,f3,81,17),
	HX_("backgroundImageSliceBottom",50,a5,f7,3d),
	HX_("backgroundImageSliceRight",17,e1,3f,f1),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("borderTopColor",9a,53,b1,a1),
	HX_("borderLeftColor",50,f5,f1,a9),
	HX_("borderBottomColor",ec,e0,49,43),
	HX_("borderRightColor",f3,87,4e,61),
	HX_("borderSize",cd,ff,ed,06),
	HX_("borderTopSize",6a,32,3e,22),
	HX_("borderLeftSize",74,b9,d3,5c),
	HX_("borderBottomSize",58,35,68,45),
	HX_("borderRightSize",31,8c,cf,01),
	HX_("borderRadius",5e,0a,30,0e),
	HX_("borderOpacity",3f,ee,3e,20),
	HX_("borderStyle",a5,70,96,10),
	HX_("icon",79,e7,b2,45),
	HX_("iconPosition",42,e5,38,76),
	HX_("horizontalAlign",41,8f,67,f4),
	HX_("verticalAlign",6f,1e,7c,e4),
	HX_("textAlign",d8,e6,7e,ba),
	HX_("opacity",cb,5d,65,eb),
	HX_("clip",d0,6e,c2,41),
	HX_("native",97,c9,1c,22),
	HX_("fontName",ba,8f,7d,cb),
	HX_("fontSize",30,be,d1,ce),
	HX_("fontBold",f4,9e,99,c3),
	HX_("fontUnderline",3d,e5,a6,f7),
	HX_("fontItalic",1f,c6,b7,ba),
	HX_("cursor",d6,8e,e8,3e),
	HX_("hidden",6a,ff,95,4c),
	HX_("filter",b8,1f,35,85),
	HX_("resource",ce,5c,a0,12),
	HX_("animationName",6f,5f,4b,3b),
	HX_("animationOptions",ba,14,f0,ed),
	HX_("mode",63,d3,60,48),
	HX_("pointerEvents",b6,2f,49,f7),
	HX_("mergeDirectives",1c,1a,ce,b7),
	HX_("apply",6e,85,3b,24),
	HX_("equalTo",4f,6e,9d,34),
	HX_("createAnimationOptions",d6,0f,a9,df),
	::String(null()) };

hx::Class Style_obj::__mClass;

void Style_obj::__register()
{
	Style_obj _hx_dummy;
	Style_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.styles.Style",d7,5f,c9,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Style_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Style_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Style_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Style_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace styles
