// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_LayoutInfo
#include <hxinc/haxe/ui/parsers/ui/LayoutInfo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_17d6599d6eff670b_9_new,"haxe.ui.parsers.ui.LayoutInfo","new",0x4581d498,"haxe.ui.parsers.ui.LayoutInfo.new","haxe/ui/parsers/ui/LayoutInfo.hx",9,0x649101d8)
namespace haxe{
namespace ui{
namespace parsers{
namespace ui{

void LayoutInfo_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_17d6599d6eff670b_9_new)
HXDLIN(   9)		this->_hx_set_properties(HX_CTX,  ::haxe::ds::StringMap_obj::__alloc( HX_CTX ));
            	}

Dynamic LayoutInfo_obj::__CreateEmpty() { return new LayoutInfo_obj; }

void *LayoutInfo_obj::_hx_vtable = 0;

Dynamic LayoutInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LayoutInfo_obj > _hx_result = new LayoutInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LayoutInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a9e6ea6;
}


hx::ObjectPtr< LayoutInfo_obj > LayoutInfo_obj::__new() {
	hx::ObjectPtr< LayoutInfo_obj > __this = new LayoutInfo_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< LayoutInfo_obj > LayoutInfo_obj::__alloc(hx::Ctx *_hx_ctx) {
	LayoutInfo_obj *__this = (LayoutInfo_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LayoutInfo_obj), true, "haxe.ui.parsers.ui.LayoutInfo"));
	*(void **)__this = LayoutInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LayoutInfo_obj::LayoutInfo_obj()
{
}

void LayoutInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LayoutInfo);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_END_CLASS();
}

void LayoutInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(properties,"properties");
}

hx::Val LayoutInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"properties") ) { return hx::Val( properties ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LayoutInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { _hx_set_type(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"properties") ) { _hx_set_properties(HX_CTX_GET,inValue.Cast<  ::haxe::ds::StringMap >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LayoutInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("properties",f3,fb,0e,61));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LayoutInfo_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(LayoutInfo_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(LayoutInfo_obj,properties),HX_("properties",f3,fb,0e,61)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LayoutInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String LayoutInfo_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("properties",f3,fb,0e,61),
	::String(null()) };

hx::Class LayoutInfo_obj::__mClass;

void LayoutInfo_obj::__register()
{
	LayoutInfo_obj _hx_dummy;
	LayoutInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.parsers.ui.LayoutInfo",a6,e8,2d,01);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LayoutInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LayoutInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LayoutInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LayoutInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace parsers
} // end namespace ui
