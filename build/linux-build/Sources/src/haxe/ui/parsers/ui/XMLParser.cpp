// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <hxinc/Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <hxinc/_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_ComponentInfo
#include <hxinc/haxe/ui/parsers/ui/ComponentInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_ComponentParser
#include <hxinc/haxe/ui/parsers/ui/ComponentParser.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_LayoutInfo
#include <hxinc/haxe/ui/parsers/ui/LayoutInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_XMLParser
#include <hxinc/haxe/ui/parsers/ui/XMLParser.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_resolvers_ResourceResolver
#include <hxinc/haxe/ui/parsers/ui/resolvers/ResourceResolver.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <hxinc/haxe/xml/Printer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3e8eecc968b631a7_7_new,"haxe.ui.parsers.ui.XMLParser","new",0x3c5a825a,"haxe.ui.parsers.ui.XMLParser.new","haxe/ui/parsers/ui/XMLParser.hx",7,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_10_parse,"haxe.ui.parsers.ui.XMLParser","parse",0x0de834ad,"haxe.ui.parsers.ui.XMLParser.parse","haxe/ui/parsers/ui/XMLParser.hx",10,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_25_parseComponent,"haxe.ui.parsers.ui.XMLParser","parseComponent",0xb8eb1e50,"haxe.ui.parsers.ui.XMLParser.parseComponent","haxe/ui/parsers/ui/XMLParser.hx",25,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_65_parseImportNode,"haxe.ui.parsers.ui.XMLParser","parseImportNode",0x0af3a114,"haxe.ui.parsers.ui.XMLParser.parseImportNode","haxe/ui/parsers/ui/XMLParser.hx",65,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_87_parseScriptNode,"haxe.ui.parsers.ui.XMLParser","parseScriptNode",0xfc9b98ba,"haxe.ui.parsers.ui.XMLParser.parseScriptNode","haxe/ui/parsers/ui/XMLParser.hx",87,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_112_parseStyleNode,"haxe.ui.parsers.ui.XMLParser","parseStyleNode",0x8870f566,"haxe.ui.parsers.ui.XMLParser.parseStyleNode","haxe/ui/parsers/ui/XMLParser.hx",112,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_137_parseLayoutNode,"haxe.ui.parsers.ui.XMLParser","parseLayoutNode",0x9e5a34d9,"haxe.ui.parsers.ui.XMLParser.parseLayoutNode","haxe/ui/parsers/ui/XMLParser.hx",137,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_150_parseDetails,"haxe.ui.parsers.ui.XMLParser","parseDetails",0x5e056f95,"haxe.ui.parsers.ui.XMLParser.parseDetails","haxe/ui/parsers/ui/XMLParser.hx",150,0x19f9ca56)
HX_LOCAL_STACK_FRAME(_hx_pos_3e8eecc968b631a7_161_parseAttributes,"haxe.ui.parsers.ui.XMLParser","parseAttributes",0x52225be4,"haxe.ui.parsers.ui.XMLParser.parseAttributes","haxe/ui/parsers/ui/XMLParser.hx",161,0x19f9ca56)
namespace haxe{
namespace ui{
namespace parsers{
namespace ui{

void XMLParser_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3e8eecc968b631a7_7_new)
HXDLIN(   7)		super::__construct();
            	}

Dynamic XMLParser_obj::__CreateEmpty() { return new XMLParser_obj; }

void *XMLParser_obj::_hx_vtable = 0;

Dynamic XMLParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< XMLParser_obj > _hx_result = new XMLParser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool XMLParser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x310ae04e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x310ae04e;
	} else {
		return inClassId==(int)0x560e7894;
	}
}

 ::haxe::ui::parsers::ui::ComponentInfo XMLParser_obj::parse(::String data, ::haxe::ui::parsers::ui::resolvers::ResourceResolver resourceResolver){
            	HX_GC_STACKFRAME(&_hx_pos_3e8eecc968b631a7_10_parse)
HXLINE(  11)		this->_hx_set__resourceResolver(HX_CTX, resourceResolver);
HXLINE(  13)		 ::haxe::ui::parsers::ui::ComponentInfo component =  ::haxe::ui::parsers::ui::ComponentInfo_obj::__alloc( HX_CTX );
HXLINE(  15)		 ::Xml xml = ::Xml_obj::parse(data)->firstElement();
HXLINE(  20)		::haxe::ui::parsers::ui::XMLParser_obj::parseComponent(component,xml,resourceResolver);
HXLINE(  22)		return component;
            	}


bool XMLParser_obj::parseComponent( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml, ::haxe::ui::parsers::ui::resolvers::ResourceResolver resourceResolver){
            	HX_GC_STACKFRAME(&_hx_pos_3e8eecc968b631a7_25_parseComponent)
HXLINE(  26)		bool isComponent = false;
HXLINE(  27)		if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(  27)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            		}
HXDLIN(  27)		::String nodeName = xml->nodeName;
HXLINE(  28)		if ((nodeName == HX_("import",65,a1,82,08))) {
HXLINE(  29)			::haxe::ui::parsers::ui::XMLParser_obj::parseImportNode(component->parent,xml,resourceResolver);
            		}
            		else {
HXLINE(  30)			if ((nodeName == HX_("script",0b,4e,60,47))) {
HXLINE(  31)				::haxe::ui::parsers::ui::XMLParser_obj::parseScriptNode(component,xml,resourceResolver);
            			}
            			else {
HXLINE(  32)				if ((nodeName == HX_("style",31,a5,1d,84))) {
HXLINE(  33)					::haxe::ui::parsers::ui::XMLParser_obj::parseStyleNode(component,xml,resourceResolver);
            				}
            				else {
HXLINE(  34)					if ((nodeName == HX_("data",2a,56,63,42))) {
HXLINE(  35)						if (hx::IsNotNull( xml->firstElement() )) {
HXLINE(  36)							::String _hx_tmp = ::haxe::xml::Printer_obj::print(xml,null());
HXDLIN(  36)							component->parent->_hx_set_data(HX_CTX, ::StringTools_obj::trim(_hx_tmp));
            						}
            						else {
HXLINE(  37)							bool _hx_tmp1;
HXDLIN(  37)							if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE(  37)								_hx_tmp1 = (xml->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE(  37)								_hx_tmp1 = false;
            							}
HXDLIN(  37)							if (_hx_tmp1) {
HXLINE(  37)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            							}
HXDLIN(  37)							 ::Xml _this = xml->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  37)							bool _hx_tmp2;
HXDLIN(  37)							if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  37)								_hx_tmp2 = (_this->nodeType == ::Xml_obj::Element);
            							}
            							else {
HXLINE(  37)								_hx_tmp2 = true;
            							}
HXDLIN(  37)							if (_hx_tmp2) {
HXLINE(  37)								HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            							}
HXDLIN(  37)							if (::StringTools_obj::startsWith(::StringTools_obj::trim(_this->nodeValue),HX_("[",5b,00,00,00))) {
HXLINE(  38)								bool _hx_tmp3;
HXDLIN(  38)								if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE(  38)									_hx_tmp3 = (xml->nodeType != ::Xml_obj::Element);
            								}
            								else {
HXLINE(  38)									_hx_tmp3 = false;
            								}
HXDLIN(  38)								if (_hx_tmp3) {
HXLINE(  38)									HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            								}
HXDLIN(  38)								 ::Xml _this1 = xml->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  38)								bool _hx_tmp4;
HXDLIN(  38)								if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  38)									_hx_tmp4 = (_this1->nodeType == ::Xml_obj::Element);
            								}
            								else {
HXLINE(  38)									_hx_tmp4 = true;
            								}
HXDLIN(  38)								if (_hx_tmp4) {
HXLINE(  38)									HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            								}
HXDLIN(  38)								component->parent->_hx_set_data(HX_CTX, ::StringTools_obj::trim(_this1->nodeValue));
            							}
            						}
            					}
            					else {
HXLINE(  40)						if ((nodeName == HX_("layout",aa,ae,b8,58))) {
HXLINE(  41)							::haxe::ui::parsers::ui::XMLParser_obj::parseLayoutNode(component->parent,xml);
            						}
            						else {
HXLINE(  43)							::haxe::ui::parsers::ui::XMLParser_obj::parseDetails(component,xml);
HXLINE(  44)							::haxe::ui::parsers::ui::XMLParser_obj::parseAttributes(component,xml);
HXLINE(  46)							{
HXLINE(  46)								 ::Dynamic childXml = xml->elements();
HXDLIN(  46)								while(( (bool)(childXml->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  46)									 ::Xml childXml1 = ( ( ::Xml)(childXml->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  47)									 ::haxe::ui::parsers::ui::ComponentInfo child =  ::haxe::ui::parsers::ui::ComponentInfo_obj::__alloc( HX_CTX );
HXLINE(  48)									child->_hx_set_parent(HX_CTX, component);
HXLINE(  49)									if ((::haxe::ui::parsers::ui::XMLParser_obj::parseComponent(child,childXml1,resourceResolver) == true)) {
HXLINE(  50)										component->children->push(child);
            									}
            								}
            							}
HXLINE(  54)							bool _hx_tmp5;
HXDLIN(  54)							if ((component->type == HX_("itemrenderer",56,55,53,bd))) {
HXLINE(  54)								_hx_tmp5 = hx::IsNotNull( component->parent );
            							}
            							else {
HXLINE(  54)								_hx_tmp5 = false;
            							}
HXDLIN(  54)							if (_hx_tmp5) {
HXLINE(  55)								component->parent->properties->set(HX_("native",97,c9,1c,22),HX_("false",a3,35,4f,fb));
            							}
HXLINE(  58)							component->validate();
HXLINE(  59)							isComponent = true;
            						}
            					}
            				}
            			}
            		}
HXLINE(  61)		return isComponent;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(XMLParser_obj,parseComponent,return )

void XMLParser_obj::parseImportNode( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml, ::haxe::ui::parsers::ui::resolvers::ResourceResolver resourceResolver){
            	HX_GC_STACKFRAME(&_hx_pos_3e8eecc968b631a7_65_parseImportNode)
HXDLIN(  65)		bool _hx_tmp;
HXDLIN(  65)		if (hx::IsNull( xml->get(HX_("source",db,b0,31,32)) )) {
HXDLIN(  65)			_hx_tmp = hx::IsNotNull( xml->get(HX_("resource",ce,5c,a0,12)) );
            		}
            		else {
HXDLIN(  65)			_hx_tmp = true;
            		}
HXDLIN(  65)		if (_hx_tmp) {
HXLINE(  66)			::String source = xml->get(HX_("source",db,b0,31,32));
HXLINE(  67)			if (hx::IsNull( source )) {
HXLINE(  68)				source = xml->get(HX_("resource",ce,5c,a0,12));
            			}
HXLINE(  70)			::String sourceData = resourceResolver->getResourceData(source);
HXLINE(  71)			if (hx::IsNotNull( sourceData )) {
HXLINE(  72)				::String extension = resourceResolver->extension(source);
HXLINE(  73)				 ::haxe::ui::parsers::ui::ComponentInfo c = ::haxe::ui::parsers::ui::ComponentParser_obj::get(extension)->parse(sourceData,resourceResolver);
HXLINE(  75)				component->findRootComponent()->_hx_set_styles(HX_CTX, component->findRootComponent()->styles->concat(c->styles));
HXLINE(  76)				c->_hx_set_styles(HX_CTX, ::Array_obj< ::String >::__new(0));
HXLINE(  78)				component->findRootComponent()->_hx_set_scriptlets(HX_CTX, component->findRootComponent()->scriptlets->concat(c->scriptlets));
HXLINE(  79)				c->_hx_set_scriptlets(HX_CTX, ::Array_obj< ::String >::__new(0));
HXLINE(  81)				c->_hx_set_parent(HX_CTX, component);
HXLINE(  82)				component->children->push(c);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(XMLParser_obj,parseImportNode,(void))

void XMLParser_obj::parseScriptNode( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml, ::haxe::ui::parsers::ui::resolvers::ResourceResolver resourceResolver){
            	HX_STACKFRAME(&_hx_pos_3e8eecc968b631a7_87_parseScriptNode)
HXLINE(  88)		::String scriptText = null();
HXLINE(  89)		bool _hx_tmp;
HXDLIN(  89)		if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE(  89)			_hx_tmp = (xml->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  89)			_hx_tmp = false;
            		}
HXDLIN(  89)		if (_hx_tmp) {
HXLINE(  89)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            		}
HXDLIN(  89)		if (hx::IsNotNull( xml->children->__get(0).StaticCast<  ::Xml >() )) {
HXLINE(  90)			bool scriptText1;
HXDLIN(  90)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE(  90)				scriptText1 = (xml->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  90)				scriptText1 = false;
            			}
HXDLIN(  90)			if (scriptText1) {
HXLINE(  90)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            			}
HXDLIN(  90)			 ::Xml _this = xml->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  90)			bool scriptText2;
HXDLIN(  90)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  90)				scriptText2 = (_this->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  90)				scriptText2 = true;
            			}
HXDLIN(  90)			if (scriptText2) {
HXLINE(  90)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(  90)			scriptText = _this->nodeValue;
            		}
HXLINE(  93)		if (hx::IsNotNull( xml->get(HX_("source",db,b0,31,32)) )) {
HXLINE(  94)			::String source = xml->get(HX_("source",db,b0,31,32));
HXLINE(  95)			::String sourceData = resourceResolver->getResourceData(source);
HXLINE(  96)			if (hx::IsNotNull( sourceData )) {
HXLINE(  97)				if (hx::IsNull( scriptText )) {
HXLINE(  98)					scriptText = HX_("",00,00,00,00);
            				}
HXLINE( 100)				scriptText = (scriptText + (HX_("\n",0a,00,00,00) + sourceData));
            			}
            		}
HXLINE( 104)		if (hx::IsNotNull( scriptText )) {
HXLINE( 105)			::String scope = HX_("global",63,31,b2,a7);
HXLINE( 106)			if ((scope == HX_("global",63,31,b2,a7))) {
HXLINE( 107)				component->findRootComponent()->scriptlets->push(scriptText);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(XMLParser_obj,parseScriptNode,(void))

void XMLParser_obj::parseStyleNode( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml, ::haxe::ui::parsers::ui::resolvers::ResourceResolver resourceResolver){
            	HX_STACKFRAME(&_hx_pos_3e8eecc968b631a7_112_parseStyleNode)
HXLINE( 113)		::String styleText = null();
HXLINE( 114)		bool _hx_tmp;
HXDLIN( 114)		if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 114)			_hx_tmp = (xml->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 114)			_hx_tmp = false;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 114)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            		}
HXDLIN( 114)		if (hx::IsNotNull( xml->children->__get(0).StaticCast<  ::Xml >() )) {
HXLINE( 115)			bool styleText1;
HXDLIN( 115)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 115)				styleText1 = (xml->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 115)				styleText1 = false;
            			}
HXDLIN( 115)			if (styleText1) {
HXLINE( 115)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            			}
HXDLIN( 115)			 ::Xml _this = xml->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 115)			bool styleText2;
HXDLIN( 115)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 115)				styleText2 = (_this->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 115)				styleText2 = true;
            			}
HXDLIN( 115)			if (styleText2) {
HXLINE( 115)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 115)			styleText = _this->nodeValue;
            		}
HXLINE( 118)		if (hx::IsNotNull( xml->get(HX_("source",db,b0,31,32)) )) {
HXLINE( 119)			::String source = xml->get(HX_("source",db,b0,31,32));
HXLINE( 120)			::String sourceData = resourceResolver->getResourceData(source);
HXLINE( 121)			if (hx::IsNotNull( sourceData )) {
HXLINE( 122)				if (hx::IsNull( styleText )) {
HXLINE( 123)					styleText = HX_("",00,00,00,00);
            				}
HXLINE( 125)				styleText = (styleText + (HX_("\n",0a,00,00,00) + sourceData));
            			}
            		}
HXLINE( 129)		if (hx::IsNotNull( styleText )) {
HXLINE( 130)			::String scope = HX_("global",63,31,b2,a7);
HXLINE( 131)			if ((scope == HX_("global",63,31,b2,a7))) {
HXLINE( 132)				component->findRootComponent()->styles->push(styleText);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(XMLParser_obj,parseStyleNode,(void))

void XMLParser_obj::parseLayoutNode( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_3e8eecc968b631a7_137_parseLayoutNode)
HXLINE( 138)		 ::Xml layoutXml = xml->firstElement();
HXLINE( 139)		 ::haxe::ui::parsers::ui::LayoutInfo layout =  ::haxe::ui::parsers::ui::LayoutInfo_obj::__alloc( HX_CTX );
HXLINE( 140)		component->_hx_set_layout(HX_CTX, layout);
HXLINE( 142)		if ((layoutXml->nodeType != ::Xml_obj::Element)) {
HXLINE( 142)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(layoutXml->nodeType)));
            		}
HXDLIN( 142)		layout->_hx_set_type(HX_CTX, layoutXml->nodeName);
HXLINE( 144)		{
HXLINE( 144)			 ::Dynamic attrName = layoutXml->attributes();
HXDLIN( 144)			while(( (bool)(attrName->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 144)				::String attrName1 = ( (::String)(attrName->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 145)				::String attrValue = layoutXml->get(attrName1);
HXLINE( 146)				layout->properties->set(attrName1,attrValue);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(XMLParser_obj,parseLayoutNode,(void))

void XMLParser_obj::parseDetails( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_3e8eecc968b631a7_150_parseDetails)
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		bool _hx_tmp1;
HXDLIN( 151)		if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 151)			_hx_tmp1 = (xml->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 151)			_hx_tmp1 = false;
            		}
HXDLIN( 151)		if (_hx_tmp1) {
HXLINE( 151)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            		}
HXDLIN( 151)		if (hx::IsNotNull( xml->children->__get(0).StaticCast<  ::Xml >() )) {
HXLINE( 151)			bool _hx_tmp2;
HXDLIN( 151)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 151)				_hx_tmp2 = (xml->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 151)				_hx_tmp2 = false;
            			}
HXDLIN( 151)			if (_hx_tmp2) {
HXLINE( 151)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            			}
HXDLIN( 151)			_hx_tmp = ((HX_("",00,00,00,00) + ::_Xml::XmlType_Impl__obj::toString(xml->children->__get(0).StaticCast<  ::Xml >()->nodeType)) == HX_("1",31,00,00,00));
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if (_hx_tmp) {
HXLINE( 152)			bool value;
HXDLIN( 152)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 152)				value = (xml->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 152)				value = false;
            			}
HXDLIN( 152)			if (value) {
HXLINE( 152)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            			}
HXDLIN( 152)			 ::Xml _this = xml->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 152)			bool value1;
HXDLIN( 152)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 152)				value1 = (_this->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 152)				value1 = true;
            			}
HXDLIN( 152)			if (value1) {
HXLINE( 152)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 152)			::String value2 = ::StringTools_obj::trim(_this->nodeValue);
HXLINE( 153)			bool _hx_tmp3;
HXDLIN( 153)			if (hx::IsNotNull( value2 )) {
HXLINE( 153)				_hx_tmp3 = (value2.length > 0);
            			}
            			else {
HXLINE( 153)				_hx_tmp3 = false;
            			}
HXDLIN( 153)			if (_hx_tmp3) {
HXLINE( 154)				component->_hx_set_text(HX_CTX, value2);
            			}
            		}
HXLINE( 157)		if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE( 157)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            		}
HXDLIN( 157)		component->_hx_set_type(HX_CTX, ::StringTools_obj::replace(xml->nodeName.toLowerCase(),HX_("-",2d,00,00,00),HX_("",00,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(XMLParser_obj,parseDetails,(void))

void XMLParser_obj::parseAttributes( ::haxe::ui::parsers::ui::ComponentInfo component, ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_3e8eecc968b631a7_161_parseAttributes)
HXDLIN( 161)		 ::Dynamic attrName = xml->attributes();
HXDLIN( 161)		while(( (bool)(attrName->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 161)			::String attrName1 = ( (::String)(attrName->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 162)			::String attrValue = xml->get(attrName1);
HXLINE( 163)			::String _hx_switch_0 = attrName1;
            			if (  (_hx_switch_0==HX_("composite",07,10,a5,12)) ){
HXLINE( 215)				component->_hx_set_composite(HX_CTX, (attrValue == HX_("true",4e,a7,03,4d)));
HXDLIN( 215)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("condition",9b,e9,33,fc)) ){
HXLINE( 165)				component->_hx_set_condition(HX_CTX, attrValue);
HXDLIN( 165)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("contentHeight",00,3a,47,d8)) ){
HXLINE( 203)				if ((::haxe::ui::parsers::ui::ComponentParser_obj::isPercentage(attrValue) == true)) {
HXLINE( 204)					component->_hx_set_percentContentHeight(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
            				else {
HXLINE( 206)					component->_hx_set_contentHeight(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
HXLINE( 203)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("contentWidth",0d,0a,f1,b0)) ){
HXLINE( 197)				if ((::haxe::ui::parsers::ui::ComponentParser_obj::isPercentage(attrValue) == true)) {
HXLINE( 198)					component->_hx_set_percentContentWidth(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
            				else {
HXLINE( 200)					component->_hx_set_contentWidth(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
HXLINE( 197)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("direction",3f,62,40,10)) ){
HXLINE( 219)				component->_hx_set_direction(HX_CTX, attrValue);
HXDLIN( 219)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE( 191)				if ((::haxe::ui::parsers::ui::ComponentParser_obj::isPercentage(attrValue) == true)) {
HXLINE( 192)					component->_hx_set_percentHeight(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
            				else {
HXLINE( 194)					component->_hx_set_height(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
HXLINE( 191)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("id",db,5b,00,00)) ){
HXLINE( 179)				component->_hx_set_id(HX_CTX, attrValue);
HXDLIN( 179)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE( 167)				::Array< ::String > condition = ::Array_obj< ::String >::__new(0);
HXLINE( 168)				{
HXLINE( 168)					int _g = 0;
HXDLIN( 168)					::Array< ::String > _g1 = attrValue.split(HX_(",",2c,00,00,00));
HXDLIN( 168)					while((_g < _g1->length)){
HXLINE( 168)						::String t = _g1->__get(_g);
HXDLIN( 168)						_g = (_g + 1);
HXLINE( 169)						condition->push(((HX_("backend == \"",ee,f4,64,87) + ::StringTools_obj::trim(t)) + HX_("\"",22,00,00,00)));
            					}
            				}
HXLINE( 171)				component->_hx_set_condition(HX_CTX, condition->join(HX_(" || ",80,57,85,15)));
HXLINE( 166)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("layout",aa,ae,b8,58)) ){
HXLINE( 217)				component->_hx_set_layoutName(HX_CTX, attrValue);
HXDLIN( 217)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 181)				component->_hx_set_left(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
HXDLIN( 181)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("style",31,a5,1d,84)) ){
HXLINE( 211)				component->_hx_set_style(HX_CTX, attrValue);
HXDLIN( 211)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("styleName",1c,30,cf,de)) ||  (_hx_switch_0==HX_("styleNames",d7,e8,7a,16)) ){
HXLINE( 213)				component->_hx_set_styleNames(HX_CTX, attrValue);
HXDLIN( 213)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE( 209)				component->_hx_set_text(HX_CTX, attrValue);
HXDLIN( 209)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE( 183)				component->_hx_set_top(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
HXDLIN( 183)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("unless",32,1a,85,65)) ){
HXLINE( 173)				::Array< ::String > condition1 = ::Array_obj< ::String >::__new(0);
HXLINE( 174)				{
HXLINE( 174)					int _g2 = 0;
HXDLIN( 174)					::Array< ::String > _g11 = attrValue.split(HX_(",",2c,00,00,00));
HXDLIN( 174)					while((_g2 < _g11->length)){
HXLINE( 174)						::String t1 = _g11->__get(_g2);
HXDLIN( 174)						_g2 = (_g2 + 1);
HXLINE( 175)						condition1->push(((HX_("backend != \"",8a,fb,e2,74) + ::StringTools_obj::trim(t1)) + HX_("\"",22,00,00,00)));
            					}
            				}
HXLINE( 177)				component->_hx_set_condition(HX_CTX, condition1->join(HX_(" && ",c0,ca,43,15)));
HXLINE( 172)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE( 185)				if ((::haxe::ui::parsers::ui::ComponentParser_obj::isPercentage(attrValue) == true)) {
HXLINE( 186)					component->_hx_set_percentWidth(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
            				else {
HXLINE( 188)					component->_hx_set_width(HX_CTX, ::haxe::ui::parsers::ui::ComponentParser_obj::_hx_float(attrValue));
            				}
HXLINE( 185)				goto _hx_goto_11;
            			}
            			/* default */{
HXLINE( 221)				component->properties->set(attrName1,attrValue);
            			}
            			_hx_goto_11:;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(XMLParser_obj,parseAttributes,(void))


hx::ObjectPtr< XMLParser_obj > XMLParser_obj::__new() {
	hx::ObjectPtr< XMLParser_obj > __this = new XMLParser_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< XMLParser_obj > XMLParser_obj::__alloc(hx::Ctx *_hx_ctx) {
	XMLParser_obj *__this = (XMLParser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(XMLParser_obj), true, "haxe.ui.parsers.ui.XMLParser"));
	*(void **)__this = XMLParser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

XMLParser_obj::XMLParser_obj()
{
}

hx::Val XMLParser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool XMLParser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"parseDetails") ) { outValue = parseDetails_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseComponent") ) { outValue = parseComponent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseStyleNode") ) { outValue = parseStyleNode_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parseImportNode") ) { outValue = parseImportNode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseScriptNode") ) { outValue = parseScriptNode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseLayoutNode") ) { outValue = parseLayoutNode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseAttributes") ) { outValue = parseAttributes_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *XMLParser_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *XMLParser_obj_sStaticStorageInfo = 0;
#endif

static ::String XMLParser_obj_sMemberFields[] = {
	HX_("parse",33,90,55,bd),
	::String(null()) };

hx::Class XMLParser_obj::__mClass;

static ::String XMLParser_obj_sStaticFields[] = {
	HX_("parseComponent",0a,22,75,53),
	HX_("parseImportNode",1a,e0,2c,a9),
	HX_("parseScriptNode",c0,d7,d4,9a),
	HX_("parseStyleNode",20,f9,fa,22),
	HX_("parseLayoutNode",df,73,93,3c),
	HX_("parseDetails",cf,30,31,05),
	HX_("parseAttributes",ea,9a,5b,f0),
	::String(null())
};

void XMLParser_obj::__register()
{
	XMLParser_obj _hx_dummy;
	XMLParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.parsers.ui.XMLParser",68,0d,68,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &XMLParser_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(XMLParser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(XMLParser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< XMLParser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = XMLParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = XMLParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace parsers
} // end namespace ui
