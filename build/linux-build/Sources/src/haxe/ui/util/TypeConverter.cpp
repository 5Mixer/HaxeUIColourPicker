// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <hxinc/EReg.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <hxinc/ValueType.h>
#endif
#ifndef INCLUDED_haxe_ui_util_TypeConverter
#include <hxinc/haxe/ui/util/TypeConverter.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f09608b2cfec152c_4_convert,"haxe.ui.util.TypeConverter","convert",0x590d6c91,"haxe.ui.util.TypeConverter.convert","haxe/ui/util/TypeConverter.hx",4,0x71b8c893)
namespace haxe{
namespace ui{
namespace util{

void TypeConverter_obj::__construct() { }

Dynamic TypeConverter_obj::__CreateEmpty() { return new TypeConverter_obj; }

void *TypeConverter_obj::_hx_vtable = 0;

Dynamic TypeConverter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TypeConverter_obj > _hx_result = new TypeConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TypeConverter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f17107e;
}

 ::Dynamic TypeConverter_obj::convert( ::Dynamic input){
            	HX_GC_STACKFRAME(&_hx_pos_f09608b2cfec152c_4_convert)
HXLINE(   5)		 ::Dynamic output = input;
HXLINE(   8)		{
HXLINE(   8)			 ::ValueType _g = ::Type_obj::_hx_typeof(input);
HXDLIN(   8)			if ((_g->_hx_getIndex() == 6)) {
HXLINE(   9)				if (hx::IsEq( _g->_hx_getObject(0).StaticCast< hx::Class >(),hx::ClassOf< ::String >() )) {
HXLINE(  10)					::String s = ::Std_obj::string(input);
HXLINE(  11)					bool _hx_tmp;
HXDLIN(  11)					if ((s != HX_("true",4e,a7,03,4d))) {
HXLINE(  11)						_hx_tmp = (s == HX_("false",a3,35,4f,fb));
            					}
            					else {
HXLINE(  11)						_hx_tmp = true;
            					}
HXDLIN(  11)					if (_hx_tmp) {
HXLINE(  12)						output = (s == HX_("true",4e,a7,03,4d));
            					}
            					else {
HXLINE(  13)						 ::EReg _hx_tmp1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^-?[0-9]*$",86,11,70,cb),HX_("i",69,00,00,00));
HXDLIN(  13)						if (_hx_tmp1->match(::Std_obj::string(s))) {
HXLINE(  14)							output = ::Std_obj::parseInt(s);
            						}
            						else {
HXLINE(  15)							 ::EReg _hx_tmp2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^-?[0-9]*\\.[0-9]*$",26,04,e4,a1),HX_("i",69,00,00,00));
HXDLIN(  15)							if (_hx_tmp2->match(::Std_obj::string(s))) {
HXLINE(  16)								output = ::Std_obj::parseFloat(s);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  22)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TypeConverter_obj,convert,return )


TypeConverter_obj::TypeConverter_obj()
{
}

bool TypeConverter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *TypeConverter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TypeConverter_obj_sStaticStorageInfo = 0;
#endif

hx::Class TypeConverter_obj::__mClass;

static ::String TypeConverter_obj_sStaticFields[] = {
	HX_("convert",f3,fd,c9,1a),
	::String(null())
};

void TypeConverter_obj::__register()
{
	TypeConverter_obj _hx_dummy;
	TypeConverter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.util.TypeConverter",0c,01,79,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TypeConverter_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TypeConverter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TypeConverter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TypeConverter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TypeConverter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace util
