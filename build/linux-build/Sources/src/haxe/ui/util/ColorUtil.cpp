// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_haxe_ui_util_ColorUtil
#include <hxinc/haxe/ui/util/ColorUtil.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Color_Color_Impl_
#include <hxinc/haxe/ui/util/_Color/Color_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2b6d238d8209c151_4_buildColorArray,"haxe.ui.util.ColorUtil","buildColorArray",0xd3eefda1,"haxe.ui.util.ColorUtil.buildColorArray","haxe/ui/util/ColorUtil.hx",4,0x8c838474)
HX_LOCAL_STACK_FRAME(_hx_pos_2b6d238d8209c151_36_parseColor,"haxe.ui.util.ColorUtil","parseColor",0xecbfc9b3,"haxe.ui.util.ColorUtil.parseColor","haxe/ui/util/ColorUtil.hx",36,0x8c838474)
namespace haxe{
namespace ui{
namespace util{

void ColorUtil_obj::__construct() { }

Dynamic ColorUtil_obj::__CreateEmpty() { return new ColorUtil_obj; }

void *ColorUtil_obj::_hx_vtable = 0;

Dynamic ColorUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorUtil_obj > _hx_result = new ColorUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x46e4b729;
}

::Array< int > ColorUtil_obj::buildColorArray(int startColor,int endColor,Float size){
            	HX_STACKFRAME(&_hx_pos_2b6d238d8209c151_4_buildColorArray)
HXLINE(   5)		::Array< int > array = ::Array_obj< int >::__new(0);
HXLINE(   7)		int r1 = ((startColor >> 16) & 255);
HXLINE(   8)		int g1 = ((startColor >> 8) & 255);
HXLINE(   9)		int b1 = (startColor & 255);
HXLINE(  10)		int r2 = ((endColor >> 16) & 255);
HXLINE(  11)		int g2 = ((endColor >> 8) & 255);
HXLINE(  12)		int b2 = (endColor & 255);
HXLINE(  13)		int rd = (r2 - r1);
HXLINE(  14)		int gd = (g2 - g1);
HXLINE(  15)		int bd = (b2 - b1);
HXLINE(  16)		Float ri = (( (Float)(rd) ) / (size - ( (Float)(1) )));
HXLINE(  17)		Float gi = (( (Float)(gd) ) / (size - ( (Float)(1) )));
HXLINE(  18)		Float bi = (( (Float)(bd) ) / (size - ( (Float)(1) )));
HXLINE(  20)		Float r = ( (Float)(r1) );
HXLINE(  21)		Float g = ( (Float)(g1) );
HXLINE(  22)		Float b = ( (Float)(b1) );
HXLINE(  23)		int c;
HXLINE(  24)		{
HXLINE(  24)			int _g = 0;
HXDLIN(  24)			int _g1 = ( (int)(size) );
HXDLIN(  24)			while((_g < _g1)){
HXLINE(  24)				_g = (_g + 1);
HXDLIN(  24)				int n = (_g - 1);
HXLINE(  25)				c = (((0 | ((::Math_obj::round(r) & 255) << 16)) | ((::Math_obj::round(g) & 255) << 8)) | (::Math_obj::round(b) & 255));
HXLINE(  26)				array->push(::haxe::ui::util::_Color::Color_Impl__obj::toInt(c));
HXLINE(  28)				r = (r + ri);
HXLINE(  29)				g = (g + gi);
HXLINE(  30)				b = (b + bi);
            			}
            		}
HXLINE(  33)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorUtil_obj,buildColorArray,return )

int ColorUtil_obj::parseColor(::String s){
            	HX_STACKFRAME(&_hx_pos_2b6d238d8209c151_36_parseColor)
HXLINE(  37)		if (::StringTools_obj::startsWith(s,HX_("#",23,00,00,00))) {
HXLINE(  38)			s = s.substring(1,s.length);
            		}
            		else {
HXLINE(  39)			if (::StringTools_obj::startsWith(s,HX_("0x",48,2a,00,00))) {
HXLINE(  40)				s = s.substring(2,s.length);
            			}
            		}
HXLINE(  42)		return ( (int)(::Std_obj::parseInt((HX_("0x",48,2a,00,00) + s))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorUtil_obj,parseColor,return )


ColorUtil_obj::ColorUtil_obj()
{
}

bool ColorUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"parseColor") ) { outValue = parseColor_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buildColorArray") ) { outValue = buildColorArray_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ColorUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ColorUtil_obj_sStaticStorageInfo = 0;
#endif

hx::Class ColorUtil_obj::__mClass;

static ::String ColorUtil_obj_sStaticFields[] = {
	HX_("buildColorArray",04,6a,ce,f1),
	HX_("parseColor",30,b8,3d,74),
	::String(null())
};

void ColorUtil_obj::__register()
{
	ColorUtil_obj _hx_dummy;
	ColorUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.util.ColorUtil",0b,2a,8b,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColorUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ColorUtil_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace util
