// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <hxinc/haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_HBox
#include <hxinc/haxe/ui/containers/HBox.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties_Property
#include <hxinc/haxe/ui/containers/properties/Property.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties_PropertyBuilder
#include <hxinc/haxe/ui/containers/properties/PropertyBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties__Property_PropertyValueBehaviour
#include <hxinc/haxe/ui/containers/properties/_Property/PropertyValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValueBehaviour
#include <hxinc/haxe/ui/core/ComponentValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDataComponent
#include <hxinc/haxe/ui/core/IDataComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_da727ecdf671aa9d_75_new,"haxe.ui.containers.properties._Property.PropertyValueBehaviour","new",0xd349573e,"haxe.ui.containers.properties._Property.PropertyValueBehaviour.new","haxe/ui/containers/properties/Property.hx",75,0xa93e75b8)
HX_LOCAL_STACK_FRAME(_hx_pos_da727ecdf671aa9d_80_set,"haxe.ui.containers.properties._Property.PropertyValueBehaviour","set",0xd34d2280,"haxe.ui.containers.properties._Property.PropertyValueBehaviour.set","haxe/ui/containers/properties/Property.hx",80,0xa93e75b8)
namespace haxe{
namespace ui{
namespace containers{
namespace properties{
namespace _Property{

void PropertyValueBehaviour_obj::__construct( ::haxe::ui::containers::properties::Property property){
            	HX_GC_STACKFRAME(&_hx_pos_da727ecdf671aa9d_75_new)
HXLINE(  76)		super::__construct(property);
HXLINE(  77)		this->_hx_set__property(HX_CTX, property);
            	}

Dynamic PropertyValueBehaviour_obj::__CreateEmpty() { return new PropertyValueBehaviour_obj; }

void *PropertyValueBehaviour_obj::_hx_vtable = 0;

Dynamic PropertyValueBehaviour_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PropertyValueBehaviour_obj > _hx_result = new PropertyValueBehaviour_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PropertyValueBehaviour_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3a374360) {
		if (inClassId<=(int)0x2e6c9e6c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2e6c9e6c;
		} else {
			return inClassId==(int)0x3a374360;
		}
	} else {
		return inClassId==(int)0x44966472 || inClassId==(int)0x6c6873cd;
	}
}

void PropertyValueBehaviour_obj::set( ::haxe::ui::util::VariantType value){
            	HX_STACKFRAME(&_hx_pos_da727ecdf671aa9d_80_set)
HXLINE(  81)		this->super::set(value);
HXLINE(  82)		 ::haxe::ui::containers::properties::PropertyBuilder builder = hx::TCast<  ::haxe::ui::containers::properties::PropertyBuilder >::cast(this->_property->_compositeBuilder);
HXLINE(  83)		if (hx::IsNotNull( builder->editor )) {
HXLINE(  84)			 ::haxe::ui::core::Component builder1 = builder->editor;
HXDLIN(  84)			builder1->set_value(::haxe::ui::util::_Variant::Variant_Impl__obj::toDynamic(value));
            		}
            	}



hx::ObjectPtr< PropertyValueBehaviour_obj > PropertyValueBehaviour_obj::__new( ::haxe::ui::containers::properties::Property property) {
	hx::ObjectPtr< PropertyValueBehaviour_obj > __this = new PropertyValueBehaviour_obj();
	__this->__construct(property);
	return __this;
}

hx::ObjectPtr< PropertyValueBehaviour_obj > PropertyValueBehaviour_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::containers::properties::Property property) {
	PropertyValueBehaviour_obj *__this = (PropertyValueBehaviour_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PropertyValueBehaviour_obj), true, "haxe.ui.containers.properties._Property.PropertyValueBehaviour"));
	*(void **)__this = PropertyValueBehaviour_obj::_hx_vtable;
	__this->__construct(property);
	return __this;
}

PropertyValueBehaviour_obj::PropertyValueBehaviour_obj()
{
}

void PropertyValueBehaviour_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PropertyValueBehaviour);
	HX_MARK_MEMBER_NAME(_property,"_property");
	 ::haxe::ui::behaviours::ValueBehaviour_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PropertyValueBehaviour_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_property,"_property");
	 ::haxe::ui::behaviours::ValueBehaviour_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PropertyValueBehaviour_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_property") ) { return hx::Val( _property ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PropertyValueBehaviour_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_property") ) { _hx_set__property(HX_CTX_GET,inValue.Cast<  ::haxe::ui::containers::properties::Property >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PropertyValueBehaviour_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_property",b4,3f,ce,f3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PropertyValueBehaviour_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ui::containers::properties::Property */ ,(int)offsetof(PropertyValueBehaviour_obj,_property),HX_("_property",b4,3f,ce,f3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PropertyValueBehaviour_obj_sStaticStorageInfo = 0;
#endif

static ::String PropertyValueBehaviour_obj_sMemberFields[] = {
	HX_("_property",b4,3f,ce,f3),
	HX_("set",a2,9b,57,00),
	::String(null()) };

hx::Class PropertyValueBehaviour_obj::__mClass;

void PropertyValueBehaviour_obj::__register()
{
	PropertyValueBehaviour_obj _hx_dummy;
	PropertyValueBehaviour_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.properties._Property.PropertyValueBehaviour",4c,a0,c9,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PropertyValueBehaviour_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PropertyValueBehaviour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PropertyValueBehaviour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PropertyValueBehaviour_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace properties
} // end namespace _Property
