// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviours
#include <hxinc/haxe/ui/behaviours/Behaviours.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DefaultBehaviour
#include <hxinc/haxe/ui/behaviours/DefaultBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <hxinc/haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingManager
#include <hxinc/haxe/ui/binding/BindingManager.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_HBox
#include <hxinc/haxe/ui/containers/HBox.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties_Property
#include <hxinc/haxe/ui/containers/properties/Property.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties_PropertyBuilder
#include <hxinc/haxe/ui/containers/properties/PropertyBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties__Property_DataSourceBehaviour
#include <hxinc/haxe/ui/containers/properties/_Property/DataSourceBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties__Property_LabelBehaviour
#include <hxinc/haxe/ui/containers/properties/_Property/LabelBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_properties__Property_PropertyValueBehaviour
#include <hxinc/haxe/ui/containers/properties/_Property/PropertyValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValueBehaviour
#include <hxinc/haxe/ui/core/ComponentValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDataComponent
#include <hxinc/haxe/ui/core/IDataComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_data_DataSource
#include <hxinc/haxe/ui/data/DataSource.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a7b9618824305fe_15_new,"haxe.ui.containers.properties.Property","new",0x2c950c78,"haxe.ui.containers.properties.Property.new","haxe/ui/containers/properties/Property.hx",15,0xa93e75b8)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_72_registerComposite,"haxe.ui.containers.properties.Property","registerComposite",0xab891b3c,"haxe.ui.containers.properties.Property.registerComposite","haxe/ui/macros/Macros.hx",72,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_314_registerBehaviours,"haxe.ui.containers.properties.Property","registerBehaviours",0xef6dc6c1,"haxe.ui.containers.properties.Property.registerBehaviours","haxe/ui/macros/Macros.hx",314,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_331_get_label,"haxe.ui.containers.properties.Property","get_label",0xf431c863,"haxe.ui.containers.properties.Property.get_label","haxe/ui/macros/Macros.hx",331,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_357_set_label,"haxe.ui.containers.properties.Property","set_label",0xd782b46f,"haxe.ui.containers.properties.Property.set_label","haxe/ui/macros/Macros.hx",357,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_331_get_type,"haxe.ui.containers.properties.Property","get_type",0x97199b2b,"haxe.ui.containers.properties.Property.get_type","haxe/ui/macros/Macros.hx",331,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_357_set_type,"haxe.ui.containers.properties.Property","set_type",0x4576f49f,"haxe.ui.containers.properties.Property.set_type","haxe/ui/macros/Macros.hx",357,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_331_get_dataSource,"haxe.ui.containers.properties.Property","get_dataSource",0xc4cb89d6,"haxe.ui.containers.properties.Property.get_dataSource","haxe/ui/macros/Macros.hx",331,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_357_set_dataSource,"haxe.ui.containers.properties.Property","set_dataSource",0xe4eb724a,"haxe.ui.containers.properties.Property.set_dataSource","haxe/ui/macros/Macros.hx",357,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_966994d855d2f406_521_cloneComponent,"haxe.ui.containers.properties.Property","cloneComponent",0x57597488,"haxe.ui.containers.properties.Property.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",521,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_1684933054186aff_302_self,"haxe.ui.containers.properties.Property","self",0xd923e474,"haxe.ui.containers.properties.Property.self","haxe/ui/macros/Macros.hx",302,0x27866361)
namespace haxe{
namespace ui{
namespace containers{
namespace properties{

void Property_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0a7b9618824305fe_15_new)
HXDLIN(  15)		super::__construct();
            	}

Dynamic Property_obj::__CreateEmpty() { return new Property_obj; }

void *Property_obj::_hx_vtable = 0;

Dynamic Property_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Property_obj > _hx_result = new Property_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Property_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4a06d0bc) {
		if (inClassId<=(int)0x2a04b446) {
			if (inClassId<=(int)0x0fddceef) {
				if (inClassId<=(int)0x03f33018) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x03f33018;
				} else {
					return inClassId==(int)0x0fddceef;
				}
			} else {
				return inClassId==(int)0x23af8dfd || inClassId==(int)0x2a04b446;
			}
		} else {
			if (inClassId<=(int)0x41081cbb) {
				return inClassId==(int)0x324697fd || inClassId==(int)0x41081cbb;
			} else {
				return inClassId==(int)0x4a06d0bc;
			}
		}
	} else {
		if (inClassId<=(int)0x7eec346f) {
			if (inClassId<=(int)0x7ee2d869) {
				if (inClassId<=(int)0x7140e8dc) {
					return inClassId==(int)0x4eb0678b || inClassId==(int)0x7140e8dc;
				} else {
					return inClassId==(int)0x7ee2d869;
				}
			} else {
				return inClassId==(int)0x7eec346f;
			}
		} else {
			return inClassId==(int)0x7f63f3f1 || inClassId==(int)0x7ff0cb0e;
		}
	}
}

static ::haxe::ui::core::IDataComponent_obj _hx_haxe_ui_containers_properties_Property__hx_haxe_ui_core_IDataComponent= {
	(  ::haxe::ui::data::DataSource (hx::Object::*)())&::haxe::ui::containers::properties::Property_obj::get_dataSource,
	(  ::haxe::ui::data::DataSource (hx::Object::*)( ::haxe::ui::data::DataSource))&::haxe::ui::containers::properties::Property_obj::set_dataSource,
};

void *Property_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xfafb3fc3: return &_hx_haxe_ui_containers_properties_Property__hx_haxe_ui_core_IDataComponent;
	}
	return super::_hx_getInterface(inHash);
}

void Property_obj::registerComposite(){
            	HX_GC_STACKFRAME(&_hx_pos_1684933054186aff_72_registerComposite)
HXLINE(  73)		this->super::registerComposite();
HXLINE(  85)		this->_hx_set__compositeBuilderClass(HX_CTX, hx::ClassOf< ::haxe::ui::containers::properties::PropertyBuilder >());
            	}


void Property_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_314_registerBehaviours)
HXLINE( 315)		this->super::registerBehaviours();
HXLINE( 372)		this->behaviours->_hx_register(HX_("label",f4,0d,af,6f),hx::ClassOf< ::haxe::ui::containers::properties::_Property::LabelBehaviour >(),null());
HXLINE( 376)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 376)		_hx_tmp->_hx_register(HX_("type",ba,f2,08,4d),hx::ClassOf< ::haxe::ui::behaviours::DefaultBehaviour >(),::haxe::ui::util::_Variant::Variant_Impl__obj::fromString(HX_("text",ad,cc,f9,4c)));
HXLINE( 372)		this->behaviours->_hx_register(HX_("dataSource",a5,76,d3,1d),hx::ClassOf< ::haxe::ui::containers::properties::_Property::DataSourceBehaviour >(),null());
HXDLIN( 372)		this->behaviours->_hx_register(HX_("value",71,7f,b8,31),hx::ClassOf< ::haxe::ui::containers::properties::_Property::PropertyValueBehaviour >(),null());
            	}


::String Property_obj::get_label(){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_331_get_label)
HXDLIN( 331)		return ::haxe::ui::util::_Variant::Variant_Impl__obj::toString(this->behaviours->get(HX_("label",f4,0d,af,6f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Property_obj,get_label,return )

::String Property_obj::set_label(::String value){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_357_set_label)
HXLINE( 358)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 358)		_hx_tmp->set(HX_("label",f4,0d,af,6f),::haxe::ui::util::_Variant::Variant_Impl__obj::fromString(value));
HXLINE( 211)		::haxe::ui::binding::BindingManager_obj::get_instance()->componentPropChanged(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),HX_("label",f4,0d,af,6f));
HXLINE( 359)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Property_obj,set_label,return )

::String Property_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_331_get_type)
HXDLIN( 331)		return ::haxe::ui::util::_Variant::Variant_Impl__obj::toString(this->behaviours->get(HX_("type",ba,f2,08,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Property_obj,get_type,return )

::String Property_obj::set_type(::String value){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_357_set_type)
HXLINE( 358)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 358)		_hx_tmp->set(HX_("type",ba,f2,08,4d),::haxe::ui::util::_Variant::Variant_Impl__obj::fromString(value));
HXLINE( 211)		::haxe::ui::binding::BindingManager_obj::get_instance()->componentPropChanged(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),HX_("type",ba,f2,08,4d));
HXLINE( 359)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Property_obj,set_type,return )

 ::haxe::ui::data::DataSource Property_obj::get_dataSource(){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_331_get_dataSource)
HXDLIN( 331)		return ::haxe::ui::util::_Variant::Variant_Impl__obj::toDataSource(this->behaviours->get(HX_("dataSource",a5,76,d3,1d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Property_obj,get_dataSource,return )

 ::haxe::ui::data::DataSource Property_obj::set_dataSource( ::haxe::ui::data::DataSource value){
            	HX_STACKFRAME(&_hx_pos_1684933054186aff_357_set_dataSource)
HXLINE( 358)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 358)		_hx_tmp->set(HX_("dataSource",a5,76,d3,1d),::haxe::ui::util::_Variant::Variant_Impl__obj::fromDataSource(value));
HXLINE( 211)		::haxe::ui::binding::BindingManager_obj::get_instance()->componentPropChanged(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),HX_("dataSource",a5,76,d3,1d));
HXLINE( 359)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Property_obj,set_dataSource,return )

 ::haxe::ui::core::ComponentContainer Property_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_966994d855d2f406_521_cloneComponent)
HXLINE( 267)		 ::haxe::ui::containers::properties::Property c = ( ( ::haxe::ui::containers::properties::Property)(this->super::cloneComponent()) );
HXLINE( 277)		if (hx::IsNotNull( this->get_label() )) {
HXLINE( 277)			c->set_label(this->get_label());
            		}
HXDLIN( 277)		if (hx::IsNotNull( this->get_type() )) {
HXLINE( 277)			c->set_type(this->get_type());
            		}
HXLINE( 287)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 287)		if (hx::IsNull( this->_children )) {
HXLINE( 287)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp = this->_children;
            		}
HXDLIN( 287)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 287)		if (hx::IsNull( c->_children )) {
HXLINE( 287)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 287)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 288)			int _g = 0;
HXDLIN( 288)			::Array< ::Dynamic> _g1;
HXDLIN( 288)			if (hx::IsNull( this->_children )) {
HXLINE( 288)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 288)				_g1 = this->_children;
            			}
HXDLIN( 288)			while((_g < _g1->length)){
HXLINE( 288)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 288)				_g = (_g + 1);
HXLINE( 289)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 293)		return c;
            	}


 ::haxe::ui::core::ComponentContainer Property_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_1684933054186aff_302_self)
HXDLIN( 302)		return  ::haxe::ui::containers::properties::Property_obj::__alloc( HX_CTX );
            	}



hx::ObjectPtr< Property_obj > Property_obj::__new() {
	hx::ObjectPtr< Property_obj > __this = new Property_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Property_obj > Property_obj::__alloc(hx::Ctx *_hx_ctx) {
	Property_obj *__this = (Property_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Property_obj), true, "haxe.ui.containers.properties.Property"));
	*(void **)__this = Property_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Property_obj::Property_obj()
{
}

hx::Val Property_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		if (HX_FIELD_EQ(inName,"self") ) { return hx::Val( self_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_label() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_label") ) { return hx::Val( get_label_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_label") ) { return hx::Val( set_label_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dataSource() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_dataSource") ) { return hx::Val( get_dataSource_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_dataSource") ) { return hx::Val( set_dataSource_dyn() ); }
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return hx::Val( cloneComponent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerComposite") ) { return hx::Val( registerComposite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Property_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_label(inValue.Cast< ::String >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dataSource(inValue.Cast<  ::haxe::ui::data::DataSource >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Property_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("label",f4,0d,af,6f));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("dataSource",a5,76,d3,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Property_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Property_obj_sStaticStorageInfo = 0;
#endif

static ::String Property_obj_sMemberFields[] = {
	HX_("registerComposite",24,e5,7f,fe),
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("get_label",4b,6a,58,b3),
	HX_("set_label",57,56,a9,96),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_dataSource",ee,fe,c8,93),
	HX_("set_dataSource",62,e7,e8,b3),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

hx::Class Property_obj::__mClass;

void Property_obj::__register()
{
	Property_obj _hx_dummy;
	Property_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.properties.Property",86,b0,8f,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Property_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Property_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Property_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Property_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace properties
