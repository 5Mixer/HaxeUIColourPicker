// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <hxinc/haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <hxinc/haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_TabBar
#include <hxinc/haxe/ui/components/TabBar.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__TabView_Builder
#include <hxinc/haxe/ui/containers/_TabView/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__TabView_Closable
#include <hxinc/haxe/ui/containers/_TabView/Closable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0de278a857cb90a9_97_new,"haxe.ui.containers._TabView.Closable","new",0xda4a3e02,"haxe.ui.containers._TabView.Closable.new","haxe/ui/containers/TabView.hx",97,0xfd8842ef)
HX_LOCAL_STACK_FRAME(_hx_pos_0de278a857cb90a9_98_validateData,"haxe.ui.containers._TabView.Closable","validateData",0x31d723fe,"haxe.ui.containers._TabView.Closable.validateData","haxe/ui/containers/TabView.hx",98,0xfd8842ef)
namespace haxe{
namespace ui{
namespace containers{
namespace _TabView{

void Closable_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_0de278a857cb90a9_97_new)
HXDLIN(  97)		super::__construct(component);
            	}

Dynamic Closable_obj::__CreateEmpty() { return new Closable_obj; }

void *Closable_obj::_hx_vtable = 0;

Dynamic Closable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Closable_obj > _hx_result = new Closable_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Closable_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x207cf043) {
		if (inClassId<=(int)0x192d9316) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x192d9316;
		} else {
			return inClassId==(int)0x207cf043;
		}
	} else {
		return inClassId==(int)0x3a374360 || inClassId==(int)0x6c6873cd;
	}
}

void Closable_obj::validateData(){
            	HX_STACKFRAME(&_hx_pos_0de278a857cb90a9_98_validateData)
HXLINE(  99)		if (hx::IsEq( this->_component->get_native(),true )) {
HXLINE( 100)			return;
            		}
HXLINE( 103)		 ::haxe::ui::containers::_TabView::Builder builder = hx::TCast<  ::haxe::ui::containers::_TabView::Builder >::cast(this->_component->_compositeBuilder);
HXLINE( 104)		 ::haxe::ui::components::TabBar builder1 = builder->_tabs;
HXDLIN( 104)		builder1->set_closable(::haxe::ui::util::_Variant::Variant_Impl__obj::toBool(this->_value));
            	}



hx::ObjectPtr< Closable_obj > Closable_obj::__new( ::haxe::ui::core::Component component) {
	hx::ObjectPtr< Closable_obj > __this = new Closable_obj();
	__this->__construct(component);
	return __this;
}

hx::ObjectPtr< Closable_obj > Closable_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	Closable_obj *__this = (Closable_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Closable_obj), true, "haxe.ui.containers._TabView.Closable"));
	*(void **)__this = Closable_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

Closable_obj::Closable_obj()
{
}

hx::Val Closable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Closable_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Closable_obj_sStaticStorageInfo = 0;
#endif

static ::String Closable_obj_sMemberFields[] = {
	HX_("validateData",e0,55,63,96),
	::String(null()) };

hx::Class Closable_obj::__mClass;

void Closable_obj::__register()
{
	Closable_obj _hx_dummy;
	Closable_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._TabView.Closable",10,d5,96,28);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Closable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Closable_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Closable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Closable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _TabView
