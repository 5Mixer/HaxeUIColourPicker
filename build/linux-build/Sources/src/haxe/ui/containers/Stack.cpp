// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Stack
#include <hxinc/haxe/ui/containers/Stack.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad9617ddf2751f03_9_new,"haxe.ui.containers.Stack","new",0x47464cd0,"haxe.ui.containers.Stack.new","haxe/ui/containers/Stack.hx",9,0xd31c1301)
HX_LOCAL_STACK_FRAME(_hx_pos_66298a074e155217_315_registerBehaviours,"haxe.ui.containers.Stack","registerBehaviours",0x06b2a969,"haxe.ui.containers.Stack.registerBehaviours","haxe/ui/macros/Macros.hx",315,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_98007478d8f70c6e_521_cloneComponent,"haxe.ui.containers.Stack","cloneComponent",0xbd7de330,"haxe.ui.containers.Stack.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",521,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_66298a074e155217_302_self,"haxe.ui.containers.Stack","self",0x198af11c,"haxe.ui.containers.Stack.self","haxe/ui/macros/Macros.hx",302,0x27866361)
namespace haxe{
namespace ui{
namespace containers{

void Stack_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ad9617ddf2751f03_9_new)
HXDLIN(   9)		super::__construct();
            	}

Dynamic Stack_obj::__CreateEmpty() { return new Stack_obj; }

void *Stack_obj::_hx_vtable = 0;

Dynamic Stack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stack_obj > _hx_result = new Stack_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Stack_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x41081cbb) {
		if (inClassId<=(int)0x23af8dfd) {
			if (inClassId<=(int)0x0fddceef) {
				if (inClassId<=(int)0x062c07dc) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x062c07dc;
				} else {
					return inClassId==(int)0x0fddceef;
				}
			} else {
				return inClassId==(int)0x23af8dfd;
			}
		} else {
			if (inClassId<=(int)0x324697fd) {
				return inClassId==(int)0x2a04b446 || inClassId==(int)0x324697fd;
			} else {
				return inClassId==(int)0x41081cbb;
			}
		}
	} else {
		if (inClassId<=(int)0x7ee2d869) {
			if (inClassId<=(int)0x7140e8dc) {
				if (inClassId<=(int)0x4eb0678b) {
					return inClassId==(int)0x4a06d0bc || inClassId==(int)0x4eb0678b;
				} else {
					return inClassId==(int)0x7140e8dc;
				}
			} else {
				return inClassId==(int)0x7ee2d869;
			}
		} else {
			return inClassId==(int)0x7f63f3f1 || inClassId==(int)0x7ff0cb0e;
		}
	}
}

void Stack_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_66298a074e155217_315_registerBehaviours)
HXDLIN( 315)		this->super::registerBehaviours();
            	}


 ::haxe::ui::core::ComponentContainer Stack_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_98007478d8f70c6e_521_cloneComponent)
HXLINE( 267)		 ::haxe::ui::containers::Stack c = ( ( ::haxe::ui::containers::Stack)(this->super::cloneComponent()) );
HXLINE( 287)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 287)		if (hx::IsNull( this->_children )) {
HXLINE( 287)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp = this->_children;
            		}
HXDLIN( 287)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 287)		if (hx::IsNull( c->_children )) {
HXLINE( 287)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 287)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 288)			int _g = 0;
HXDLIN( 288)			::Array< ::Dynamic> _g1;
HXDLIN( 288)			if (hx::IsNull( this->_children )) {
HXLINE( 288)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 288)				_g1 = this->_children;
            			}
HXDLIN( 288)			while((_g < _g1->length)){
HXLINE( 288)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 288)				_g = (_g + 1);
HXLINE( 289)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 293)		return c;
            	}


 ::haxe::ui::core::ComponentContainer Stack_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_66298a074e155217_302_self)
HXDLIN( 302)		return  ::haxe::ui::containers::Stack_obj::__alloc( HX_CTX );
            	}



hx::ObjectPtr< Stack_obj > Stack_obj::__new() {
	hx::ObjectPtr< Stack_obj > __this = new Stack_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Stack_obj > Stack_obj::__alloc(hx::Ctx *_hx_ctx) {
	Stack_obj *__this = (Stack_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stack_obj), true, "haxe.ui.containers.Stack"));
	*(void **)__this = Stack_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Stack_obj::Stack_obj()
{
}

hx::Val Stack_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return hx::Val( self_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return hx::Val( cloneComponent_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Stack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Stack_obj_sStaticStorageInfo = 0;
#endif

static ::String Stack_obj_sMemberFields[] = {
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

hx::Class Stack_obj::__mClass;

void Stack_obj::__register()
{
	Stack_obj _hx_dummy;
	Stack_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.Stack",de,e4,d3,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stack_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stack_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
