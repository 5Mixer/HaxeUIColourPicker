// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DefaultBehaviour
#include <hxinc/haxe/ui/behaviours/DefaultBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <hxinc/haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Accordion_PageIndex
#include <hxinc/haxe/ui/containers/_Accordion/PageIndex.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d2118e31d677372b_26_new,"haxe.ui.containers._Accordion.PageIndex","new",0x1531339a,"haxe.ui.containers._Accordion.PageIndex.new","haxe/ui/containers/Accordion.hx",26,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_d2118e31d677372b_27_set,"haxe.ui.containers._Accordion.PageIndex","set",0x1534fedc,"haxe.ui.containers._Accordion.PageIndex.set","haxe/ui/containers/Accordion.hx",27,0xcdb43941)
namespace haxe{
namespace ui{
namespace containers{
namespace _Accordion{

void PageIndex_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_d2118e31d677372b_26_new)
HXDLIN(  26)		super::__construct(component);
            	}

Dynamic PageIndex_obj::__CreateEmpty() { return new PageIndex_obj; }

void *PageIndex_obj::_hx_vtable = 0;

Dynamic PageIndex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PageIndex_obj > _hx_result = new PageIndex_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PageIndex_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5d25288e) {
		if (inClassId<=(int)0x48ff1074) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x48ff1074;
		} else {
			return inClassId==(int)0x5d25288e;
		}
	} else {
		return inClassId==(int)0x6c6873cd;
	}
}

void PageIndex_obj::set( ::haxe::ui::util::VariantType value){
            	HX_GC_STACKFRAME(&_hx_pos_d2118e31d677372b_27_set)
HXLINE(  28)		if (::haxe::ui::util::_Variant::Variant_Impl__obj::eq(value,this->_value)) {
HXLINE(  29)			return;
            		}
HXLINE(  32)		this->_hx_set__value(HX_CTX, value);
HXLINE(  34)		 ::haxe::ui::util::VariantType _hx_tmp = this->_value;
HXDLIN(  34)		if (::haxe::ui::util::_Variant::Variant_Impl__obj::eq(_hx_tmp,::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(( (Float)(-1) )))) {
HXLINE(  35)			return;
            		}
HXLINE(  38)		::Array< ::Dynamic> buttons = this->_component->findComponents(null(),hx::ClassOf< ::haxe::ui::components::Button >(),1);
HXLINE(  39)		int selectedIndex = ( (int)(::haxe::ui::util::_Variant::Variant_Impl__obj::toInt(value)) );
HXLINE(  40)		 ::haxe::ui::components::Button button = buttons->__get(selectedIndex).StaticCast<  ::haxe::ui::components::Button >();
HXLINE(  41)		 ::haxe::ui::core::Component panel = this->_component;
HXDLIN(  41)		 ::haxe::ui::core::Component panel1 = panel->getComponentAt((this->_component->getComponentIndex(button) + 1));
HXLINE(  42)		panel1->swapClass(HX_(":expanded",73,db,80,c4),HX_(":collapsed",dd,16,f1,ce),null(),null());
HXLINE(  43)		panel1->set_hidden(false);
HXLINE(  44)		button->set_selected(true);
HXLINE(  45)		{
HXLINE(  45)			int _g = 0;
HXDLIN(  45)			while((_g < buttons->length)){
HXLINE(  45)				 ::haxe::ui::components::Button b = buttons->__get(_g).StaticCast<  ::haxe::ui::components::Button >();
HXDLIN(  45)				_g = (_g + 1);
HXLINE(  46)				if (hx::IsNotEq( b,button )) {
HXLINE(  47)					int tempIndex = this->_component->getComponentIndex(b);
HXLINE(  48)					 ::haxe::ui::core::Component tempPanel = this->_component->getComponentAt((tempIndex + 1));
HXLINE(  49)					b->set_selected(false);
HXLINE(  50)					tempPanel->swapClass(HX_(":collapsed",dd,16,f1,ce),HX_(":expanded",73,db,80,c4),null(),null());
            				}
            			}
            		}
            	}



hx::ObjectPtr< PageIndex_obj > PageIndex_obj::__new( ::haxe::ui::core::Component component) {
	hx::ObjectPtr< PageIndex_obj > __this = new PageIndex_obj();
	__this->__construct(component);
	return __this;
}

hx::ObjectPtr< PageIndex_obj > PageIndex_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	PageIndex_obj *__this = (PageIndex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PageIndex_obj), true, "haxe.ui.containers._Accordion.PageIndex"));
	*(void **)__this = PageIndex_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

PageIndex_obj::PageIndex_obj()
{
}

hx::Val PageIndex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *PageIndex_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PageIndex_obj_sStaticStorageInfo = 0;
#endif

static ::String PageIndex_obj_sMemberFields[] = {
	HX_("set",a2,9b,57,00),
	::String(null()) };

hx::Class PageIndex_obj::__mClass;

void PageIndex_obj::__register()
{
	PageIndex_obj _hx_dummy;
	PageIndex_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._Accordion.PageIndex",a8,1e,3d,53);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PageIndex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PageIndex_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PageIndex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PageIndex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _Accordion
