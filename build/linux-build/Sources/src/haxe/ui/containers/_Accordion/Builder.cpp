// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <hxinc/haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <hxinc/haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <hxinc/haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Accordion
#include <hxinc/haxe/ui/containers/Accordion.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_VBox
#include <hxinc/haxe/ui/containers/VBox.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Accordion_Builder
#include <hxinc/haxe/ui/containers/_Accordion/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_AnimationEvent
#include <hxinc/haxe/ui/events/AnimationEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <hxinc/haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8ed8573efe4b0a42_109_new,"haxe.ui.containers._Accordion.Builder","new",0x5872f532,"haxe.ui.containers._Accordion.Builder.new","haxe/ui/containers/Accordion.hx",109,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_8ed8573efe4b0a42_114_onReady,"haxe.ui.containers._Accordion.Builder","onReady",0x279f3496,"haxe.ui.containers._Accordion.Builder.onReady","haxe/ui/containers/Accordion.hx",114,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_8ed8573efe4b0a42_121_addComponent,"haxe.ui.containers._Accordion.Builder","addComponent",0x709ac34a,"haxe.ui.containers._Accordion.Builder.addComponent","haxe/ui/containers/Accordion.hx",121,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_8ed8573efe4b0a42_143_addComponent,"haxe.ui.containers._Accordion.Builder","addComponent",0x709ac34a,"haxe.ui.containers._Accordion.Builder.addComponent","haxe/ui/containers/Accordion.hx",143,0xcdb43941)
static const ::String _hx_array_data_75e83440_6[] = {
	HX_("first",30,78,9d,00),HX_("last",56,0a,ad,47),
};
static const ::String _hx_array_data_75e83440_7[] = {
	HX_("first",30,78,9d,00),HX_("last",56,0a,ad,47),
};
namespace haxe{
namespace ui{
namespace containers{
namespace _Accordion{

void Builder_obj::__construct( ::haxe::ui::containers::Accordion accordion){
            	HX_GC_STACKFRAME(&_hx_pos_8ed8573efe4b0a42_109_new)
HXLINE( 110)		super::__construct(accordion);
HXLINE( 111)		this->_hx_set__accordion(HX_CTX, accordion);
            	}

Dynamic Builder_obj::__CreateEmpty() { return new Builder_obj; }

void *Builder_obj::_hx_vtable = 0;

Dynamic Builder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Builder_obj > _hx_result = new Builder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Builder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x36d1d8a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x36d1d8a6;
	} else {
		return inClassId==(int)0x6fc7eb95;
	}
}

void Builder_obj::onReady(){
            	HX_STACKFRAME(&_hx_pos_8ed8573efe4b0a42_114_onReady)
HXLINE( 115)		this->super::onReady();
HXLINE( 116)		{
HXLINE( 116)			int _g = 0;
HXDLIN( 116)			 ::haxe::ui::containers::Accordion _this = this->_accordion;
HXDLIN( 116)			::Array< ::Dynamic> _g1;
HXDLIN( 116)			if (hx::IsNull( _this->_children )) {
HXLINE( 116)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 116)				_g1 = _this->_children;
            			}
HXDLIN( 116)			while((_g < _g1->length)){
HXLINE( 116)				 ::haxe::ui::core::Component c = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 116)				_g = (_g + 1);
HXLINE( 117)				c->set_animatable(true);
            			}
            		}
            	}


 ::haxe::ui::core::Component Builder_obj::addComponent( ::haxe::ui::core::Component child){
            	HX_GC_STACKFRAME(&_hx_pos_8ed8573efe4b0a42_121_addComponent)
HXLINE( 122)		bool _hx_tmp;
HXDLIN( 122)		if (!(child->hasClass(HX_("accordion-button",57,b8,37,4e)))) {
HXLINE( 122)			_hx_tmp = !(child->hasClass(HX_("accordion-page",74,5d,26,be)));
            		}
            		else {
HXLINE( 122)			_hx_tmp = false;
            		}
HXDLIN( 122)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::haxe::ui::events::AnimationEvent e){
            				HX_GC_STACKFRAME(&_hx_pos_8ed8573efe4b0a42_143_addComponent)
HXLINE( 143)				if (e->target->hasClass(HX_(":collapsed",dd,16,f1,ce))) {
HXLINE( 144)					e->target->set_hidden(true);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 123)			 ::haxe::ui::components::Button button =  ::haxe::ui::components::Button_obj::__alloc( HX_CTX );
HXLINE( 124)			button->set_text(child->get_text());
HXLINE( 125)			button->addClass(HX_("accordion-button",57,b8,37,4e),null(),null());
HXLINE( 126)			button->set_toggle(true);
HXLINE( 127)			button->scriptAccess = false;
HXLINE( 128)			this->_accordion->addComponent(button);
HXLINE( 130)			child->set_animatable(false);
HXLINE( 131)			child->set_percentWidth(100);
HXLINE( 132)			child->addClass(HX_("accordion-page",74,5d,26,be),null(),null());
HXLINE( 133)			 ::haxe::ui::core::Component c = this->_accordion->addComponent(child);
HXLINE( 135)			if ((this->_accordion->get_pageIndex() == -1)) {
HXLINE( 136)				child->set_percentHeight(100);
HXLINE( 137)				this->_accordion->set_pageIndex(0);
            			}
            			else {
HXLINE( 139)				child->set_hidden(true);
            			}
HXLINE( 142)			child->set_onAnimationEnd( ::Dynamic(new _hx_Closure_0()));
HXLINE( 148)			this->_component->registerInternalEvents(null(),true);
HXLINE( 150)			int buttonCount = 0;
HXLINE( 151)			int pageCount = 0;
HXLINE( 152)			{
HXLINE( 152)				int _g = 0;
HXDLIN( 152)				 ::haxe::ui::containers::Accordion _this = this->_accordion;
HXDLIN( 152)				::Array< ::Dynamic> _g1;
HXDLIN( 152)				if (hx::IsNull( _this->_children )) {
HXLINE( 152)					_g1 = ::Array_obj< ::Dynamic>::__new(0);
            				}
            				else {
HXLINE( 152)					_g1 = _this->_children;
            				}
HXDLIN( 152)				while((_g < _g1->length)){
HXLINE( 152)					 ::haxe::ui::core::Component child1 = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 152)					_g = (_g + 1);
HXLINE( 153)					if (child1->hasClass(HX_("accordion-button",57,b8,37,4e))) {
HXLINE( 154)						if ((buttonCount == 0)) {
HXLINE( 155)							child1->swapClass(HX_("first",30,78,9d,00),HX_("last",56,0a,ad,47),false,null());
            						}
            						else {
HXLINE( 156)							bool _hx_tmp1;
HXDLIN( 156)							 ::haxe::ui::core::Component _this1 = this->_component;
HXDLIN( 156)							::Array< ::Dynamic> _hx_tmp2;
HXDLIN( 156)							if (hx::IsNull( _this1->_children )) {
HXLINE( 156)								_hx_tmp2 = ::Array_obj< ::Dynamic>::__new(0);
            							}
            							else {
HXLINE( 156)								_hx_tmp2 = _this1->_children;
            							}
HXDLIN( 156)							if (((( (Float)(_hx_tmp2->length) ) / ( (Float)(2) )) > 1)) {
HXLINE( 156)								 ::haxe::ui::core::Component _this2 = this->_component;
HXDLIN( 156)								::Array< ::Dynamic> _hx_tmp3;
HXDLIN( 156)								if (hx::IsNull( _this2->_children )) {
HXLINE( 156)									_hx_tmp3 = ::Array_obj< ::Dynamic>::__new(0);
            								}
            								else {
HXLINE( 156)									_hx_tmp3 = _this2->_children;
            								}
HXDLIN( 156)								_hx_tmp1 = (buttonCount == ((( (Float)(_hx_tmp3->length) ) / ( (Float)(2) )) - ( (Float)(1) )));
            							}
            							else {
HXLINE( 156)								_hx_tmp1 = false;
            							}
HXDLIN( 156)							if (_hx_tmp1) {
HXLINE( 157)								child1->swapClass(HX_("last",56,0a,ad,47),HX_("first",30,78,9d,00),false,null());
            							}
            							else {
HXLINE( 159)								child1->removeClasses(::Array_obj< ::String >::fromData( _hx_array_data_75e83440_6,2),false,null());
            							}
            						}
HXLINE( 162)						buttonCount = (buttonCount + 1);
            					}
            					else {
HXLINE( 163)						if (child1->hasClass(HX_("accordion-page",74,5d,26,be))) {
HXLINE( 164)							if ((pageCount == 0)) {
HXLINE( 165)								child1->swapClass(HX_("first",30,78,9d,00),HX_("last",56,0a,ad,47),false,null());
            							}
            							else {
HXLINE( 166)								bool _hx_tmp4;
HXDLIN( 166)								 ::haxe::ui::core::Component _this3 = this->_component;
HXDLIN( 166)								::Array< ::Dynamic> _hx_tmp5;
HXDLIN( 166)								if (hx::IsNull( _this3->_children )) {
HXLINE( 166)									_hx_tmp5 = ::Array_obj< ::Dynamic>::__new(0);
            								}
            								else {
HXLINE( 166)									_hx_tmp5 = _this3->_children;
            								}
HXDLIN( 166)								if (((( (Float)(_hx_tmp5->length) ) / ( (Float)(2) )) > 1)) {
HXLINE( 166)									 ::haxe::ui::core::Component _this4 = this->_component;
HXDLIN( 166)									::Array< ::Dynamic> _hx_tmp6;
HXDLIN( 166)									if (hx::IsNull( _this4->_children )) {
HXLINE( 166)										_hx_tmp6 = ::Array_obj< ::Dynamic>::__new(0);
            									}
            									else {
HXLINE( 166)										_hx_tmp6 = _this4->_children;
            									}
HXDLIN( 166)									_hx_tmp4 = (pageCount == ((( (Float)(_hx_tmp6->length) ) / ( (Float)(2) )) - ( (Float)(1) )));
            								}
            								else {
HXLINE( 166)									_hx_tmp4 = false;
            								}
HXDLIN( 166)								if (_hx_tmp4) {
HXLINE( 167)									child1->swapClass(HX_("last",56,0a,ad,47),HX_("first",30,78,9d,00),false,null());
            								}
            								else {
HXLINE( 169)									child1->removeClasses(::Array_obj< ::String >::fromData( _hx_array_data_75e83440_7,2),false,null());
            								}
            							}
HXLINE( 172)							pageCount = (pageCount + 1);
            						}
            					}
            				}
            			}
HXLINE( 176)			return c;
            		}
HXLINE( 179)		return null();
            	}



hx::ObjectPtr< Builder_obj > Builder_obj::__new( ::haxe::ui::containers::Accordion accordion) {
	hx::ObjectPtr< Builder_obj > __this = new Builder_obj();
	__this->__construct(accordion);
	return __this;
}

hx::ObjectPtr< Builder_obj > Builder_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::containers::Accordion accordion) {
	Builder_obj *__this = (Builder_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Builder_obj), true, "haxe.ui.containers._Accordion.Builder"));
	*(void **)__this = Builder_obj::_hx_vtable;
	__this->__construct(accordion);
	return __this;
}

Builder_obj::Builder_obj()
{
}

void Builder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Builder);
	HX_MARK_MEMBER_NAME(_accordion,"_accordion");
	 ::haxe::ui::core::CompositeBuilder_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Builder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_accordion,"_accordion");
	 ::haxe::ui::core::CompositeBuilder_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Builder_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onReady") ) { return hx::Val( onReady_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_accordion") ) { return hx::Val( _accordion ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addComponent") ) { return hx::Val( addComponent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Builder_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_accordion") ) { _hx_set__accordion(HX_CTX_GET,inValue.Cast<  ::haxe::ui::containers::Accordion >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Builder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_accordion",49,e6,1e,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Builder_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ui::containers::Accordion */ ,(int)offsetof(Builder_obj,_accordion),HX_("_accordion",49,e6,1e,c4)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Builder_obj_sStaticStorageInfo = 0;
#endif

static ::String Builder_obj_sMemberFields[] = {
	HX_("_accordion",49,e6,1e,c4),
	HX_("onReady",c4,3e,f8,7c),
	HX_("addComponent",5c,12,a8,0e),
	::String(null()) };

hx::Class Builder_obj::__mClass;

void Builder_obj::__register()
{
	Builder_obj _hx_dummy;
	Builder_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._Accordion.Builder",40,34,e8,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Builder_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Builder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Builder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Builder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _Accordion
