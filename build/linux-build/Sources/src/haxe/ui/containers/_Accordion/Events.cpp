// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <hxinc/haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <hxinc/haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <hxinc/haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Accordion
#include <hxinc/haxe/ui/containers/Accordion.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_VBox
#include <hxinc/haxe/ui/containers/VBox.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Accordion_Events
#include <hxinc/haxe/ui/containers/_Accordion/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_Events
#include <hxinc/haxe/ui/events/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <hxinc/haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e98300b8774bbe4c_65_new,"haxe.ui.containers._Accordion.Events","new",0x7f631c86,"haxe.ui.containers._Accordion.Events.new","haxe/ui/containers/Accordion.hx",65,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_e98300b8774bbe4c_70_register,"haxe.ui.containers._Accordion.Events","register",0xac2c907d,"haxe.ui.containers._Accordion.Events.register","haxe/ui/containers/Accordion.hx",70,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_e98300b8774bbe4c_79_unregister,"haxe.ui.containers._Accordion.Events","unregister",0xde92b256,"haxe.ui.containers._Accordion.Events.unregister","haxe/ui/containers/Accordion.hx",79,0xcdb43941)
HX_LOCAL_STACK_FRAME(_hx_pos_e98300b8774bbe4c_86_onButtonChanged,"haxe.ui.containers._Accordion.Events","onButtonChanged",0x4c13cda9,"haxe.ui.containers._Accordion.Events.onButtonChanged","haxe/ui/containers/Accordion.hx",86,0xcdb43941)
namespace haxe{
namespace ui{
namespace containers{
namespace _Accordion{

void Events_obj::__construct( ::haxe::ui::containers::Accordion accordion){
            	HX_GC_STACKFRAME(&_hx_pos_e98300b8774bbe4c_65_new)
HXLINE(  66)		super::__construct(accordion);
HXLINE(  67)		this->_hx_set__accordion(HX_CTX, accordion);
            	}

Dynamic Events_obj::__CreateEmpty() { return new Events_obj; }

void *Events_obj::_hx_vtable = 0;

Dynamic Events_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Events_obj > _hx_result = new Events_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Events_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x259ab4b6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x259ab4b6;
	} else {
		return inClassId==(int)0x5d294170;
	}
}

void Events_obj::_hx_register(){
            	HX_STACKFRAME(&_hx_pos_e98300b8774bbe4c_70_register)
HXLINE(  71)		::Array< ::Dynamic> buttons = this->_target->findComponents(null(),hx::ClassOf< ::haxe::ui::components::Button >(),1);
HXLINE(  72)		{
HXLINE(  72)			int _g = 0;
HXDLIN(  72)			while((_g < buttons->length)){
HXLINE(  72)				 ::haxe::ui::components::Button button = buttons->__get(_g).StaticCast<  ::haxe::ui::components::Button >();
HXDLIN(  72)				_g = (_g + 1);
HXLINE(  73)				if ((button->hasEvent(HX_("change",70,91,72,b7),this->onButtonChanged_dyn()) == false)) {
HXLINE(  74)					button->registerEvent(HX_("change",70,91,72,b7),this->onButtonChanged_dyn(),null());
            				}
            			}
            		}
            	}


void Events_obj::unregister(){
            	HX_STACKFRAME(&_hx_pos_e98300b8774bbe4c_79_unregister)
HXLINE(  80)		::Array< ::Dynamic> buttons = this->_target->findComponents(null(),hx::ClassOf< ::haxe::ui::components::Button >(),1);
HXLINE(  81)		{
HXLINE(  81)			int _g = 0;
HXDLIN(  81)			while((_g < buttons->length)){
HXLINE(  81)				 ::haxe::ui::components::Button button = buttons->__get(_g).StaticCast<  ::haxe::ui::components::Button >();
HXDLIN(  81)				_g = (_g + 1);
HXLINE(  82)				button->unregisterEvent(HX_("change",70,91,72,b7),this->onButtonChanged_dyn());
            			}
            		}
            	}


void Events_obj::onButtonChanged( ::haxe::ui::events::UIEvent event){
            	HX_STACKFRAME(&_hx_pos_e98300b8774bbe4c_86_onButtonChanged)
HXLINE(  87)		::Array< ::Dynamic> buttons = this->_target->findComponents(null(),hx::ClassOf< ::haxe::ui::components::Button >(),1);
HXLINE(  88)		 ::haxe::ui::components::Button button = ( ( ::haxe::ui::components::Button)(event->target) );
HXLINE(  89)		int index = buttons->indexOf(button,null());
HXLINE(  90)		if ((button->get_selected() == true)) {
HXLINE(  91)			if ((index == this->_accordion->get_pageIndex())) {
HXLINE(  92)				return;
            			}
HXLINE(  94)			this->_accordion->set_pageIndex(index);
            		}
            		else {
HXLINE(  95)			if ((index == this->_accordion->get_pageIndex())) {
HXLINE(  96)				button->set_selected(true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onButtonChanged,(void))


hx::ObjectPtr< Events_obj > Events_obj::__new( ::haxe::ui::containers::Accordion accordion) {
	hx::ObjectPtr< Events_obj > __this = new Events_obj();
	__this->__construct(accordion);
	return __this;
}

hx::ObjectPtr< Events_obj > Events_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::containers::Accordion accordion) {
	Events_obj *__this = (Events_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Events_obj), true, "haxe.ui.containers._Accordion.Events"));
	*(void **)__this = Events_obj::_hx_vtable;
	__this->__construct(accordion);
	return __this;
}

Events_obj::Events_obj()
{
}

void Events_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Events);
	HX_MARK_MEMBER_NAME(_accordion,"_accordion");
	 ::haxe::ui::events::Events_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Events_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_accordion,"_accordion");
	 ::haxe::ui::events::Events_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Events_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"register") ) { return hx::Val( _hx_register_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_accordion") ) { return hx::Val( _accordion ); }
		if (HX_FIELD_EQ(inName,"unregister") ) { return hx::Val( unregister_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onButtonChanged") ) { return hx::Val( onButtonChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Events_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_accordion") ) { _hx_set__accordion(HX_CTX_GET,inValue.Cast<  ::haxe::ui::containers::Accordion >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Events_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_accordion",49,e6,1e,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Events_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ui::containers::Accordion */ ,(int)offsetof(Events_obj,_accordion),HX_("_accordion",49,e6,1e,c4)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Events_obj_sStaticStorageInfo = 0;
#endif

static ::String Events_obj_sMemberFields[] = {
	HX_("_accordion",49,e6,1e,c4),
	HX_("register",63,a6,9f,d0),
	HX_("unregister",bc,8d,63,56),
	HX_("onButtonChanged",83,e0,af,72),
	::String(null()) };

hx::Class Events_obj::__mClass;

void Events_obj::__register()
{
	Events_obj _hx_dummy;
	Events_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._Accordion.Events",94,21,b5,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Events_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Events_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Events_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Events_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _Accordion
