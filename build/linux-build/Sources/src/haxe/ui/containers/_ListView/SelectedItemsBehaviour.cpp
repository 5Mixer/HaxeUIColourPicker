// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_IVirtualContainer
#include <hxinc/haxe/ui/containers/IVirtualContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_ListView
#include <hxinc/haxe/ui/containers/ListView.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_ScrollView
#include <hxinc/haxe/ui/containers/ScrollView.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__ListView_SelectedItemsBehaviour
#include <hxinc/haxe/ui/containers/_ListView/SelectedItemsBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDataComponent
#include <hxinc/haxe/ui/core/IDataComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_data_DataSource
#include <hxinc/haxe/ui/data/DataSource.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3b43f169593eea1e_463_new,"haxe.ui.containers._ListView.SelectedItemsBehaviour","new",0xdf94e180,"haxe.ui.containers._ListView.SelectedItemsBehaviour.new","haxe/ui/containers/ListView.hx",463,0xe137bf10)
HX_LOCAL_STACK_FRAME(_hx_pos_3b43f169593eea1e_464_get,"haxe.ui.containers._ListView.SelectedItemsBehaviour","get",0xdf8f91b6,"haxe.ui.containers._ListView.SelectedItemsBehaviour.get","haxe/ui/containers/ListView.hx",464,0xe137bf10)
HX_LOCAL_STACK_FRAME(_hx_pos_3b43f169593eea1e_483_set,"haxe.ui.containers._ListView.SelectedItemsBehaviour","set",0xdf98acc2,"haxe.ui.containers._ListView.SelectedItemsBehaviour.set","haxe/ui/containers/ListView.hx",483,0xe137bf10)
namespace haxe{
namespace ui{
namespace containers{
namespace _ListView{

void SelectedItemsBehaviour_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_3b43f169593eea1e_463_new)
HXDLIN( 463)		super::__construct(component);
            	}

Dynamic SelectedItemsBehaviour_obj::__CreateEmpty() { return new SelectedItemsBehaviour_obj; }

void *SelectedItemsBehaviour_obj::_hx_vtable = 0;

Dynamic SelectedItemsBehaviour_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SelectedItemsBehaviour_obj > _hx_result = new SelectedItemsBehaviour_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SelectedItemsBehaviour_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6c3006ce) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6c3006ce;
	} else {
		return inClassId==(int)0x6c6873cd;
	}
}

 ::haxe::ui::util::VariantType SelectedItemsBehaviour_obj::get(){
            	HX_STACKFRAME(&_hx_pos_3b43f169593eea1e_464_get)
HXLINE( 465)		 ::haxe::ui::containers::ListView listView = hx::TCast<  ::haxe::ui::containers::ListView >::cast(this->_component);
HXLINE( 466)		::Array< int > selectedIndices = listView->get_selectedIndices();
HXLINE( 467)		bool _hx_tmp;
HXDLIN( 467)		if (hx::IsNotNull( selectedIndices )) {
HXLINE( 467)			_hx_tmp = (selectedIndices->length > 0);
            		}
            		else {
HXLINE( 467)			_hx_tmp = false;
            		}
HXDLIN( 467)		if (_hx_tmp) {
HXLINE( 468)			::cpp::VirtualArray selectedItems = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 469)			{
HXLINE( 469)				int _g = 0;
HXDLIN( 469)				while((_g < selectedIndices->length)){
HXLINE( 469)					int i = selectedIndices->__get(_g);
HXDLIN( 469)					_g = (_g + 1);
HXLINE( 470)					bool _hx_tmp1;
HXDLIN( 470)					if ((i >= 0)) {
HXLINE( 470)						_hx_tmp1 = (i >= listView->get_dataSource()->get_size());
            					}
            					else {
HXLINE( 470)						_hx_tmp1 = true;
            					}
HXDLIN( 470)					if (_hx_tmp1) {
HXLINE( 471)						continue;
            					}
HXLINE( 473)					 ::Dynamic data = listView->get_dataSource()->get(i);
HXLINE( 474)					selectedItems->push(data);
            				}
            			}
HXLINE( 477)			return ::haxe::ui::util::_Variant::Variant_Impl__obj::fromArray(selectedItems);
            		}
            		else {
HXLINE( 479)			return ::haxe::ui::util::_Variant::Variant_Impl__obj::fromArray(::cpp::VirtualArray_obj::__new(0));
            		}
HXLINE( 467)		return null();
            	}


void SelectedItemsBehaviour_obj::set( ::haxe::ui::util::VariantType value){
            	HX_STACKFRAME(&_hx_pos_3b43f169593eea1e_483_set)
HXLINE( 484)		 ::haxe::ui::containers::ListView listView = hx::TCast<  ::haxe::ui::containers::ListView >::cast(this->_component);
HXLINE( 485)		::cpp::VirtualArray selectedItems = ::haxe::ui::util::_Variant::Variant_Impl__obj::toArray(value);
HXLINE( 486)		bool _hx_tmp;
HXDLIN( 486)		if (hx::IsNotNull( selectedItems )) {
HXLINE( 486)			_hx_tmp = (selectedItems->get_length() > 0);
            		}
            		else {
HXLINE( 486)			_hx_tmp = false;
            		}
HXDLIN( 486)		if (_hx_tmp) {
HXLINE( 487)			::Array< int > selectedIndices = ::Array_obj< int >::__new(0);
HXLINE( 488)			int index;
HXLINE( 489)			{
HXLINE( 489)				int _g = 0;
HXDLIN( 489)				while((_g < selectedItems->get_length())){
HXLINE( 489)					 ::Dynamic item = selectedItems->__get(_g);
HXDLIN( 489)					_g = (_g + 1);
HXLINE( 490)					index = listView->get_dataSource()->indexOf(item);
HXDLIN( 490)					if ((index != -1)) {
HXLINE( 491)						selectedIndices->push(index);
            					}
            				}
            			}
HXLINE( 495)			listView->set_selectedIndices(selectedIndices);
            		}
            		else {
HXLINE( 497)			listView->set_selectedIndices(::Array_obj< int >::__new(0));
            		}
            	}



hx::ObjectPtr< SelectedItemsBehaviour_obj > SelectedItemsBehaviour_obj::__new( ::haxe::ui::core::Component component) {
	hx::ObjectPtr< SelectedItemsBehaviour_obj > __this = new SelectedItemsBehaviour_obj();
	__this->__construct(component);
	return __this;
}

hx::ObjectPtr< SelectedItemsBehaviour_obj > SelectedItemsBehaviour_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	SelectedItemsBehaviour_obj *__this = (SelectedItemsBehaviour_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SelectedItemsBehaviour_obj), true, "haxe.ui.containers._ListView.SelectedItemsBehaviour"));
	*(void **)__this = SelectedItemsBehaviour_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

SelectedItemsBehaviour_obj::SelectedItemsBehaviour_obj()
{
}

hx::Val SelectedItemsBehaviour_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *SelectedItemsBehaviour_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SelectedItemsBehaviour_obj_sStaticStorageInfo = 0;
#endif

static ::String SelectedItemsBehaviour_obj_sMemberFields[] = {
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	::String(null()) };

hx::Class SelectedItemsBehaviour_obj::__mClass;

void SelectedItemsBehaviour_obj::__register()
{
	SelectedItemsBehaviour_obj _hx_dummy;
	SelectedItemsBehaviour_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._ListView.SelectedItemsBehaviour",8e,61,ae,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SelectedItemsBehaviour_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SelectedItemsBehaviour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SelectedItemsBehaviour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SelectedItemsBehaviour_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _ListView
