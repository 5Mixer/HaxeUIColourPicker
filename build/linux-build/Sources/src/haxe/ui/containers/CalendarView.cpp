// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <hxinc/Date.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviours
#include <hxinc/haxe/ui/behaviours/Behaviours.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DefaultBehaviour
#include <hxinc/haxe/ui/behaviours/DefaultBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingManager
#include <hxinc/haxe/ui/binding/BindingManager.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_CalendarView
#include <hxinc/haxe/ui/containers/CalendarView.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_VBox
#include <hxinc/haxe/ui/containers/VBox.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__CalendarView_Builder
#include <hxinc/haxe/ui/containers/_CalendarView/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__CalendarView_Events
#include <hxinc/haxe/ui/containers/_CalendarView/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__CalendarView_SelectedDateBehaviour
#include <hxinc/haxe/ui/containers/_CalendarView/SelectedDateBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_events_Events
#include <hxinc/haxe/ui/events/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c969e78c5d09d9f_15_new,"haxe.ui.containers.CalendarView","new",0x428250df,"haxe.ui.containers.CalendarView.new","haxe/ui/containers/CalendarView.hx",15,0x20b6d730)
HX_LOCAL_STACK_FRAME(_hx_pos_38114a4bcde44c07_72_registerComposite,"haxe.ui.containers.CalendarView","registerComposite",0x2de2a5e3,"haxe.ui.containers.CalendarView.registerComposite","haxe/ui/macros/Macros.hx",72,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_38114a4bcde44c07_314_registerBehaviours,"haxe.ui.containers.CalendarView","registerBehaviours",0x7b6d8e3a,"haxe.ui.containers.CalendarView.registerBehaviours","haxe/ui/macros/Macros.hx",314,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_38114a4bcde44c07_331_get_selectedDate,"haxe.ui.containers.CalendarView","get_selectedDate",0x8e5a3ed3,"haxe.ui.containers.CalendarView.get_selectedDate","haxe/ui/macros/Macros.hx",331,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_38114a4bcde44c07_357_set_selectedDate,"haxe.ui.containers.CalendarView","set_selectedDate",0xe49c2c47,"haxe.ui.containers.CalendarView.set_selectedDate","haxe/ui/macros/Macros.hx",357,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_a802d8e4d93101c0_521_cloneComponent,"haxe.ui.containers.CalendarView","cloneComponent",0x2bafcb81,"haxe.ui.containers.CalendarView.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",521,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_38114a4bcde44c07_302_self,"haxe.ui.containers.CalendarView","self",0xf2d27a2d,"haxe.ui.containers.CalendarView.self","haxe/ui/macros/Macros.hx",302,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_1c969e78c5d09d9f_16_boot,"haxe.ui.containers.CalendarView","boot",0xe79d72d3,"haxe.ui.containers.CalendarView.boot","haxe/ui/containers/CalendarView.hx",16,0x20b6d730)
static const ::String _hx_array_data_affaf56d_9[] = {
	HX_("January",4a,18,86,71),HX_("Febuary",b6,b8,ce,7b),HX_("March",a3,34,4f,96),HX_("April",26,77,6a,b7),HX_("May",85,c2,3a,00),HX_("June",e2,f1,42,31),HX_("July",38,f0,42,31),HX_("August",63,79,82,9f),HX_("September",f1,6e,c5,f7),HX_("October",00,0d,99,7e),HX_("November",d2,64,19,13),HX_("December",05,71,82,9e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1c969e78c5d09d9f_18_boot,"haxe.ui.containers.CalendarView","boot",0xe79d72d3,"haxe.ui.containers.CalendarView.boot","haxe/ui/containers/CalendarView.hx",18,0x20b6d730)
namespace haxe{
namespace ui{
namespace containers{

void CalendarView_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1c969e78c5d09d9f_15_new)
HXDLIN(  15)		super::__construct();
            	}

Dynamic CalendarView_obj::__CreateEmpty() { return new CalendarView_obj; }

void *CalendarView_obj::_hx_vtable = 0;

Dynamic CalendarView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CalendarView_obj > _hx_result = new CalendarView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CalendarView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x41081cbb) {
		if (inClassId<=(int)0x23af8dfd) {
			if (inClassId<=(int)0x0cd030f7) {
				if (inClassId<=(int)0x091af94d) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x091af94d;
				} else {
					return inClassId==(int)0x0cd030f7;
				}
			} else {
				return inClassId==(int)0x0fddceef || inClassId==(int)0x23af8dfd;
			}
		} else {
			if (inClassId<=(int)0x324697fd) {
				return inClassId==(int)0x2a04b446 || inClassId==(int)0x324697fd;
			} else {
				return inClassId==(int)0x41081cbb;
			}
		}
	} else {
		if (inClassId<=(int)0x7ee2d869) {
			if (inClassId<=(int)0x7140e8dc) {
				if (inClassId<=(int)0x4eb0678b) {
					return inClassId==(int)0x4a06d0bc || inClassId==(int)0x4eb0678b;
				} else {
					return inClassId==(int)0x7140e8dc;
				}
			} else {
				return inClassId==(int)0x7ee2d869;
			}
		} else {
			return inClassId==(int)0x7f63f3f1 || inClassId==(int)0x7ff0cb0e;
		}
	}
}

void CalendarView_obj::registerComposite(){
            	HX_GC_STACKFRAME(&_hx_pos_38114a4bcde44c07_72_registerComposite)
HXLINE(  73)		this->super::registerComposite();
HXLINE(  81)		this->_hx_set__internalEventsClass(HX_CTX, hx::ClassOf< ::haxe::ui::containers::_CalendarView::Events >());
HXLINE(  85)		this->_hx_set__compositeBuilderClass(HX_CTX, hx::ClassOf< ::haxe::ui::containers::_CalendarView::Builder >());
            	}


void CalendarView_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_38114a4bcde44c07_314_registerBehaviours)
HXLINE( 315)		this->super::registerBehaviours();
HXLINE( 372)		this->behaviours->_hx_register(HX_("selectedDate",29,76,fd,d2),hx::ClassOf< ::haxe::ui::containers::_CalendarView::SelectedDateBehaviour >(),null());
            	}


 ::Date CalendarView_obj::get_selectedDate(){
            	HX_STACKFRAME(&_hx_pos_38114a4bcde44c07_331_get_selectedDate)
HXDLIN( 331)		return ::haxe::ui::util::_Variant::Variant_Impl__obj::toDate(this->behaviours->get(HX_("selectedDate",29,76,fd,d2)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CalendarView_obj,get_selectedDate,return )

 ::Date CalendarView_obj::set_selectedDate( ::Date value){
            	HX_STACKFRAME(&_hx_pos_38114a4bcde44c07_357_set_selectedDate)
HXLINE( 358)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 358)		_hx_tmp->set(HX_("selectedDate",29,76,fd,d2),::haxe::ui::util::_Variant::Variant_Impl__obj::fromDate(value));
HXLINE( 211)		::haxe::ui::binding::BindingManager_obj::get_instance()->componentPropChanged(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),HX_("selectedDate",29,76,fd,d2));
HXLINE( 359)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CalendarView_obj,set_selectedDate,return )

 ::haxe::ui::core::ComponentContainer CalendarView_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_a802d8e4d93101c0_521_cloneComponent)
HXLINE( 267)		 ::haxe::ui::containers::CalendarView c = ( ( ::haxe::ui::containers::CalendarView)(this->super::cloneComponent()) );
HXLINE( 287)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 287)		if (hx::IsNull( this->_children )) {
HXLINE( 287)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp = this->_children;
            		}
HXDLIN( 287)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 287)		if (hx::IsNull( c->_children )) {
HXLINE( 287)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 287)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 288)			int _g = 0;
HXDLIN( 288)			::Array< ::Dynamic> _g1;
HXDLIN( 288)			if (hx::IsNull( this->_children )) {
HXLINE( 288)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 288)				_g1 = this->_children;
            			}
HXDLIN( 288)			while((_g < _g1->length)){
HXLINE( 288)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 288)				_g = (_g + 1);
HXLINE( 289)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 293)		return c;
            	}


 ::haxe::ui::core::ComponentContainer CalendarView_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_38114a4bcde44c07_302_self)
HXDLIN( 302)		return  ::haxe::ui::containers::CalendarView_obj::__alloc( HX_CTX );
            	}


::Array< ::String > CalendarView_obj::MONTH_NAMES;

::String CalendarView_obj::DATE_FORMAT;


hx::ObjectPtr< CalendarView_obj > CalendarView_obj::__new() {
	hx::ObjectPtr< CalendarView_obj > __this = new CalendarView_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< CalendarView_obj > CalendarView_obj::__alloc(hx::Ctx *_hx_ctx) {
	CalendarView_obj *__this = (CalendarView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CalendarView_obj), true, "haxe.ui.containers.CalendarView"));
	*(void **)__this = CalendarView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CalendarView_obj::CalendarView_obj()
{
}

hx::Val CalendarView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return hx::Val( self_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedDate") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectedDate() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return hx::Val( cloneComponent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_selectedDate") ) { return hx::Val( get_selectedDate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedDate") ) { return hx::Val( set_selectedDate_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerComposite") ) { return hx::Val( registerComposite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CalendarView_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"MONTH_NAMES") ) { outValue = ( MONTH_NAMES ); return true; }
		if (HX_FIELD_EQ(inName,"DATE_FORMAT") ) { outValue = ( DATE_FORMAT ); return true; }
	}
	return false;
}

hx::Val CalendarView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"selectedDate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectedDate(inValue.Cast<  ::Date >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CalendarView_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"MONTH_NAMES") ) { MONTH_NAMES=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"DATE_FORMAT") ) { DATE_FORMAT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void CalendarView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selectedDate",29,76,fd,d2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *CalendarView_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CalendarView_obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Array< ::String > */ ,(void *) &CalendarView_obj::MONTH_NAMES,HX_("MONTH_NAMES",09,26,60,e6)},
	{hx::fsString,(void *) &CalendarView_obj::DATE_FORMAT,HX_("DATE_FORMAT",68,70,54,ce)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CalendarView_obj_sMemberFields[] = {
	HX_("registerComposite",24,e5,7f,fe),
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("get_selectedDate",b2,62,9c,d7),
	HX_("set_selectedDate",26,50,de,2d),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

static void CalendarView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CalendarView_obj::MONTH_NAMES,"MONTH_NAMES");
	HX_MARK_MEMBER_NAME(CalendarView_obj::DATE_FORMAT,"DATE_FORMAT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CalendarView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CalendarView_obj::MONTH_NAMES,"MONTH_NAMES");
	HX_VISIT_MEMBER_NAME(CalendarView_obj::DATE_FORMAT,"DATE_FORMAT");
};

#endif

hx::Class CalendarView_obj::__mClass;

static ::String CalendarView_obj_sStaticFields[] = {
	HX_("MONTH_NAMES",09,26,60,e6),
	HX_("DATE_FORMAT",68,70,54,ce),
	::String(null())
};

void CalendarView_obj::__register()
{
	CalendarView_obj _hx_dummy;
	CalendarView_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.CalendarView",6d,f5,fa,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CalendarView_obj::__GetStatic;
	__mClass->mSetStaticField = &CalendarView_obj::__SetStatic;
	__mClass->mMarkFunc = CalendarView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CalendarView_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CalendarView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CalendarView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CalendarView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CalendarView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CalendarView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CalendarView_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1c969e78c5d09d9f_16_boot)
HXDLIN(  16)		MONTH_NAMES = ::Array_obj< ::String >::fromData( _hx_array_data_affaf56d_9,12);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1c969e78c5d09d9f_18_boot)
HXDLIN(  18)		DATE_FORMAT = HX_("%Y-%m-%d",ab,02,52,4d);
            	}
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
