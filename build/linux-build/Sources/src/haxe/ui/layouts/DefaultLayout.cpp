// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Size
#include <hxinc/haxe/ui/geom/Size.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_DefaultLayout
#include <hxinc/haxe/ui/layouts/DefaultLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <hxinc/haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <hxinc/haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6c73e1b2de27701d_7_new,"haxe.ui.layouts.DefaultLayout","new",0xcb1d6426,"haxe.ui.layouts.DefaultLayout.new","haxe/ui/layouts/DefaultLayout.hx",7,0x7dc0caab)
HX_LOCAL_STACK_FRAME(_hx_pos_6c73e1b2de27701d_10_resizeChildren,"haxe.ui.layouts.DefaultLayout","resizeChildren",0x0f08594d,"haxe.ui.layouts.DefaultLayout.resizeChildren","haxe/ui/layouts/DefaultLayout.hx",10,0x7dc0caab)
HX_LOCAL_STACK_FRAME(_hx_pos_6c73e1b2de27701d_41_repositionChildren,"haxe.ui.layouts.DefaultLayout","repositionChildren",0x12fa9bb5,"haxe.ui.layouts.DefaultLayout.repositionChildren","haxe/ui/layouts/DefaultLayout.hx",41,0x7dc0caab)
namespace haxe{
namespace ui{
namespace layouts{

void DefaultLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6c73e1b2de27701d_7_new)
HXDLIN(   7)		super::__construct();
            	}

Dynamic DefaultLayout_obj::__CreateEmpty() { return new DefaultLayout_obj; }

void *DefaultLayout_obj::_hx_vtable = 0;

Dynamic DefaultLayout_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultLayout_obj > _hx_result = new DefaultLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DefaultLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x548a03f5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x548a03f5;
	} else {
		return inClassId==(int)0x652c3c60;
	}
}

void DefaultLayout_obj::resizeChildren(){
            	HX_STACKFRAME(&_hx_pos_6c73e1b2de27701d_10_resizeChildren)
HXLINE(  11)		 ::haxe::ui::geom::Size usableSize = this->get_usableSize();
HXLINE(  12)		Float percentWidth = ( (Float)(100) );
HXLINE(  13)		Float percentHeight = ( (Float)(100) );
HXLINE(  14)		{
HXLINE(  14)			int _g = 0;
HXDLIN(  14)			 ::haxe::ui::core::Component _this = this->get_component();
HXDLIN(  14)			::Array< ::Dynamic> _g1;
HXDLIN(  14)			if (hx::IsNull( _this->_children )) {
HXLINE(  14)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE(  14)				_g1 = _this->_children;
            			}
HXDLIN(  14)			while((_g < _g1->length)){
HXLINE(  14)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  14)				_g = (_g + 1);
HXLINE(  15)				if ((child->get_includeInLayout() == false)) {
HXLINE(  16)					continue;
            				}
HXLINE(  19)				 ::Dynamic cx = null();
HXLINE(  20)				 ::Dynamic cy = null();
HXLINE(  22)				if (hx::IsNotNull( child->get_percentWidth() )) {
HXLINE(  23)					Float usableSize1 = usableSize->width;
HXDLIN(  23)					Float cx1 = ((usableSize1 * ( (Float)(child->get_percentWidth()) )) / percentWidth);
HXDLIN(  23)					Float cx2 = (cx1 - this->marginLeft(child));
HXDLIN(  23)					cx = (cx2 - this->marginRight(child));
            				}
HXLINE(  25)				if (hx::IsNotNull( child->get_percentHeight() )) {
HXLINE(  26)					Float usableSize2 = usableSize->height;
HXDLIN(  26)					Float cy1 = ((usableSize2 * ( (Float)(child->get_percentHeight()) )) / percentHeight);
HXDLIN(  26)					Float cy2 = (cy1 - this->marginTop(child));
HXDLIN(  26)					cy = (cy2 - this->marginBottom(child));
            				}
HXLINE(  29)				bool _hx_tmp;
HXDLIN(  29)				if (this->fixedMinWidth(child)) {
HXLINE(  29)					_hx_tmp = hx::IsNotNull( child->get_percentWidth() );
            				}
            				else {
HXLINE(  29)					_hx_tmp = false;
            				}
HXDLIN(  29)				if (_hx_tmp) {
HXLINE(  30)					percentWidth = (percentWidth - ( (Float)(child->get_percentWidth()) ));
            				}
HXLINE(  32)				bool _hx_tmp1;
HXDLIN(  32)				if (this->fixedMinHeight(child)) {
HXLINE(  32)					_hx_tmp1 = hx::IsNotNull( child->get_percentHeight() );
            				}
            				else {
HXLINE(  32)					_hx_tmp1 = false;
            				}
HXDLIN(  32)				if (_hx_tmp1) {
HXLINE(  33)					percentHeight = (percentHeight - ( (Float)(child->get_percentHeight()) ));
            				}
HXLINE(  36)				child->resizeComponent(cx,cy);
            			}
            		}
            	}


void DefaultLayout_obj::repositionChildren(){
            	HX_STACKFRAME(&_hx_pos_6c73e1b2de27701d_41_repositionChildren)
HXDLIN(  41)		int _g = 0;
HXDLIN(  41)		 ::haxe::ui::core::Component _this = this->get_component();
HXDLIN(  41)		::Array< ::Dynamic> _g1;
HXDLIN(  41)		if (hx::IsNull( _this->_children )) {
HXDLIN(  41)			_g1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXDLIN(  41)			_g1 = _this->_children;
            		}
HXDLIN(  41)		while((_g < _g1->length)){
HXDLIN(  41)			 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  41)			_g = (_g + 1);
HXLINE(  42)			if ((child->get_includeInLayout() == false)) {
HXLINE(  43)				continue;
            			}
HXLINE(  46)			Float xpos = ( (Float)(0) );
HXLINE(  47)			Float ypos = ( (Float)(0) );
HXLINE(  49)			::String _hx_switch_0 = this->horizontalAlign(child);
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(  51)				 ::Dynamic xpos1 = this->get_component()->get_componentWidth();
HXDLIN(  51)				Float xpos2 = ((( (Float)(xpos1) ) - ( (Float)(child->get_componentWidth()) )) / ( (Float)(2) ));
HXDLIN(  51)				Float xpos3 = (xpos2 + this->marginLeft(child));
HXDLIN(  51)				xpos = (xpos3 - this->marginRight(child));
HXDLIN(  51)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(  53)				 ::Dynamic xpos4 = this->get_component()->get_componentWidth();
HXDLIN(  53)				 ::Dynamic xpos5 = child->get_componentWidth();
HXDLIN(  53)				Float xpos6 = (xpos5 + this->get_paddingRight());
HXDLIN(  53)				xpos = (( (Float)(xpos4) ) - (xpos6 + this->marginRight(child)));
HXDLIN(  53)				goto _hx_goto_4;
            			}
            			/* default */{
HXLINE(  55)				Float xpos7 = this->get_paddingLeft();
HXDLIN(  55)				xpos = (xpos7 + this->marginLeft(child));
            			}
            			_hx_goto_4:;
HXLINE(  58)			::String _hx_switch_1 = this->verticalAlign(child);
            			if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ){
HXLINE(  62)				 ::Dynamic ypos1 = this->get_component()->get_componentHeight();
HXDLIN(  62)				 ::Dynamic ypos2 = child->get_componentHeight();
HXDLIN(  62)				Float ypos3 = (ypos2 + this->get_paddingBottom());
HXDLIN(  62)				ypos = (( (Float)(ypos1) ) - (ypos3 + this->marginBottom(child)));
HXDLIN(  62)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(  60)				 ::Dynamic ypos4 = this->get_component()->get_componentHeight();
HXDLIN(  60)				Float ypos5 = ((( (Float)(ypos4) ) - ( (Float)(child->get_componentHeight()) )) / ( (Float)(2) ));
HXDLIN(  60)				Float ypos6 = (ypos5 + this->marginTop(child));
HXDLIN(  60)				ypos = (ypos6 - this->marginBottom(child));
HXDLIN(  60)				goto _hx_goto_5;
            			}
            			/* default */{
HXLINE(  64)				Float ypos7 = this->get_paddingTop();
HXDLIN(  64)				ypos = (ypos7 + this->marginTop(child));
            			}
            			_hx_goto_5:;
HXLINE(  67)			child->moveComponent(xpos,ypos);
            		}
            	}



hx::ObjectPtr< DefaultLayout_obj > DefaultLayout_obj::__new() {
	hx::ObjectPtr< DefaultLayout_obj > __this = new DefaultLayout_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DefaultLayout_obj > DefaultLayout_obj::__alloc(hx::Ctx *_hx_ctx) {
	DefaultLayout_obj *__this = (DefaultLayout_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DefaultLayout_obj), true, "haxe.ui.layouts.DefaultLayout"));
	*(void **)__this = DefaultLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DefaultLayout_obj::DefaultLayout_obj()
{
}

hx::Val DefaultLayout_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"resizeChildren") ) { return hx::Val( resizeChildren_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"repositionChildren") ) { return hx::Val( repositionChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *DefaultLayout_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DefaultLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String DefaultLayout_obj_sMemberFields[] = {
	HX_("resizeChildren",53,43,30,c1),
	HX_("repositionChildren",bb,00,c7,9c),
	::String(null()) };

hx::Class DefaultLayout_obj::__mClass;

void DefaultLayout_obj::__register()
{
	DefaultLayout_obj _hx_dummy;
	DefaultLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.layouts.DefaultLayout",34,19,8b,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultLayout_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultLayout_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace layouts
