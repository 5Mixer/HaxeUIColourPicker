// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ImageBase
#include <hxinc/haxe/ui/backend/ImageBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageDisplayImpl
#include <hxinc/haxe/ui/backend/ImageDisplayImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageSurface
#include <hxinc/haxe/ui/backend/ImageSurface.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8bb1718fb44eece3_9_new,"haxe.ui.backend.ImageDisplayImpl","new",0x737223e5,"haxe.ui.backend.ImageDisplayImpl.new","haxe/ui/backend/ImageDisplayImpl.hx",9,0xdab6112a)
HX_LOCAL_STACK_FRAME(_hx_pos_8bb1718fb44eece3_17_validateData,"haxe.ui.backend.ImageDisplayImpl","validateData",0xdb12e9bb,"haxe.ui.backend.ImageDisplayImpl.validateData","haxe/ui/backend/ImageDisplayImpl.hx",17,0xdab6112a)
HX_LOCAL_STACK_FRAME(_hx_pos_8bb1718fb44eece3_35_get_scaled,"haxe.ui.backend.ImageDisplayImpl","get_scaled",0x8b84b17e,"haxe.ui.backend.ImageDisplayImpl.get_scaled","haxe/ui/backend/ImageDisplayImpl.hx",35,0xdab6112a)
namespace haxe{
namespace ui{
namespace backend{

void ImageDisplayImpl_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8bb1718fb44eece3_9_new)
HXLINE(  10)		this->_hx_set__buffer(HX_CTX, null());
HXLINE(   9)		super::__construct();
            	}

Dynamic ImageDisplayImpl_obj::__CreateEmpty() { return new ImageDisplayImpl_obj; }

void *ImageDisplayImpl_obj::_hx_vtable = 0;

Dynamic ImageDisplayImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDisplayImpl_obj > _hx_result = new ImageDisplayImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDisplayImpl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f4158f6) {
		if (inClassId<=(int)0x0dc1ca4c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0dc1ca4c;
		} else {
			return inClassId==(int)0x2f4158f6;
		}
	} else {
		return inClassId==(int)0x65937de1;
	}
}

void ImageDisplayImpl_obj::validateData(){
            	HX_GC_STACKFRAME(&_hx_pos_8bb1718fb44eece3_17_validateData)
HXDLIN(  17)		if (hx::IsNotNull( this->_imageInfo )) {
HXLINE(  18)			this->dispose();
HXLINE(  19)			this->_hx_set__buffer(HX_CTX, ( ( ::kha::Image)(this->_imageInfo->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) ));
HXLINE(  20)			if ((this->_imageWidth <= 0)) {
HXLINE(  21)				this->_imageWidth = ( (Float)(this->_imageInfo->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
            			}
HXLINE(  23)			if ((this->_imageHeight <= 0)) {
HXLINE(  24)				this->_imageHeight = ( (Float)(this->_imageInfo->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
            			}
HXLINE(  26)			this->aspectRatio = (( (Float)(this->_imageInfo->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ) / ( (Float)(this->_imageInfo->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ));
            		}
            		else {
HXLINE(  28)			this->dispose();
HXLINE(  29)			this->_imageWidth = ( (Float)(0) );
HXLINE(  30)			this->_imageHeight = ( (Float)(0) );
            		}
            	}


bool ImageDisplayImpl_obj::get_scaled(){
            	HX_STACKFRAME(&_hx_pos_8bb1718fb44eece3_35_get_scaled)
HXLINE(  36)		if (hx::IsNull( this->_imageInfo )) {
HXLINE(  37)			return false;
            		}
HXLINE(  39)		if (hx::IsEq( this->_imageWidth,this->_imageInfo->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE(  39)			return hx::IsNotEq( this->_imageHeight,this->_imageInfo->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic) );
            		}
            		else {
HXLINE(  39)			return true;
            		}
HXDLIN(  39)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageDisplayImpl_obj,get_scaled,return )


hx::ObjectPtr< ImageDisplayImpl_obj > ImageDisplayImpl_obj::__new() {
	hx::ObjectPtr< ImageDisplayImpl_obj > __this = new ImageDisplayImpl_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ImageDisplayImpl_obj > ImageDisplayImpl_obj::__alloc(hx::Ctx *_hx_ctx) {
	ImageDisplayImpl_obj *__this = (ImageDisplayImpl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImageDisplayImpl_obj), true, "haxe.ui.backend.ImageDisplayImpl"));
	*(void **)__this = ImageDisplayImpl_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ImageDisplayImpl_obj::ImageDisplayImpl_obj()
{
}

void ImageDisplayImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageDisplayImpl);
	HX_MARK_MEMBER_NAME(_buffer,"_buffer");
	HX_MARK_MEMBER_NAME(scaled,"scaled");
	 ::haxe::ui::backend::ImageBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ImageDisplayImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_buffer,"_buffer");
	HX_VISIT_MEMBER_NAME(scaled,"scaled");
	 ::haxe::ui::backend::ImageBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ImageDisplayImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scaled") ) { return hx::Val( inCallProp == hx::paccAlways ? get_scaled() : scaled ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_buffer") ) { return hx::Val( _buffer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_scaled") ) { return hx::Val( get_scaled_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ImageDisplayImpl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scaled") ) { scaled=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_buffer") ) { _hx_set__buffer(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageDisplayImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_buffer",9f,ce,0b,3f));
	outFields->push(HX_("scaled",9a,ea,25,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ImageDisplayImpl_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::Image */ ,(int)offsetof(ImageDisplayImpl_obj,_buffer),HX_("_buffer",9f,ce,0b,3f)},
	{hx::fsBool,(int)offsetof(ImageDisplayImpl_obj,scaled),HX_("scaled",9a,ea,25,3c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ImageDisplayImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageDisplayImpl_obj_sMemberFields[] = {
	HX_("_buffer",9f,ce,0b,3f),
	HX_("validateData",e0,55,63,96),
	HX_("scaled",9a,ea,25,3c),
	HX_("get_scaled",63,5a,ad,2c),
	::String(null()) };

hx::Class ImageDisplayImpl_obj::__mClass;

void ImageDisplayImpl_obj::__register()
{
	ImageDisplayImpl_obj _hx_dummy;
	ImageDisplayImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.ImageDisplayImpl",73,4d,77,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageDisplayImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageDisplayImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDisplayImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDisplayImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
