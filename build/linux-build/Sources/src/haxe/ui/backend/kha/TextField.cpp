// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_kha_TextField
#include <hxinc/haxe/ui/backend/kha/TextField.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_StringExtensions
#include <hxinc/kha/StringExtensions.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_900e02585355f002_30_new,"haxe.ui.backend.kha.TextField","new",0x28a8d229,"haxe.ui.backend.kha.TextField.new","haxe/ui/backend/kha/TextField.hx",30,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_67_notify,"haxe.ui.backend.kha.TextField","notify",0x5a965ca0,"haxe.ui.backend.kha.TextField.notify","haxe/ui/backend/kha/TextField.hx",67,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_77_notifyTextChanged,"haxe.ui.backend.kha.TextField","notifyTextChanged",0x90b2eb07,"haxe.ui.backend.kha.TextField.notifyTextChanged","haxe/ui/backend/kha/TextField.hx",77,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_83_notifyCaretMoved,"haxe.ui.backend.kha.TextField","notifyCaretMoved",0x4e025070,"haxe.ui.backend.kha.TextField.notifyCaretMoved","haxe/ui/backend/kha/TextField.hx",83,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_92_get_text,"haxe.ui.backend.kha.TextField","get_text",0x09576dcd,"haxe.ui.backend.kha.TextField.get_text","haxe/ui/backend/kha/TextField.hx",92,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_94_set_text,"haxe.ui.backend.kha.TextField","set_text",0xb7b4c741,"haxe.ui.backend.kha.TextField.set_text","haxe/ui/backend/kha/TextField.hx",94,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_119_get_width,"haxe.ui.backend.kha.TextField","get_width",0xdff210e6,"haxe.ui.backend.kha.TextField.get_width","haxe/ui/backend/kha/TextField.hx",119,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_121_set_width,"haxe.ui.backend.kha.TextField","set_width",0xc342fcf2,"haxe.ui.backend.kha.TextField.set_width","haxe/ui/backend/kha/TextField.hx",121,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_134_get_height,"haxe.ui.backend.kha.TextField","get_height",0xca2c3107,"haxe.ui.backend.kha.TextField.get_height","haxe/ui/backend/kha/TextField.hx",134,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_136_set_height,"haxe.ui.backend.kha.TextField","set_height",0xcda9cf7b,"haxe.ui.backend.kha.TextField.set_height","haxe/ui/backend/kha/TextField.hx",136,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_149_get_password,"haxe.ui.backend.kha.TextField","get_password",0xe7e4d43b,"haxe.ui.backend.kha.TextField.get_password","haxe/ui/backend/kha/TextField.hx",149,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_151_set_password,"haxe.ui.backend.kha.TextField","set_password",0xfcddf7af,"haxe.ui.backend.kha.TextField.set_password","haxe/ui/backend/kha/TextField.hx",151,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_164_get_font,"haxe.ui.backend.kha.TextField","get_font",0x001dfeef,"haxe.ui.backend.kha.TextField.get_font","haxe/ui/backend/kha/TextField.hx",164,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_166_set_font,"haxe.ui.backend.kha.TextField","set_font",0xae7b5863,"haxe.ui.backend.kha.TextField.set_font","haxe/ui/backend/kha/TextField.hx",166,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_179_get_fontSize,"haxe.ui.backend.kha.TextField","get_fontSize",0x6de66f50,"haxe.ui.backend.kha.TextField.get_fontSize","haxe/ui/backend/kha/TextField.hx",179,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_181_set_fontSize,"haxe.ui.backend.kha.TextField","set_fontSize",0x82df92c4,"haxe.ui.backend.kha.TextField.set_fontSize","haxe/ui/backend/kha/TextField.hx",181,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_194_get_multiline,"haxe.ui.backend.kha.TextField","get_multiline",0x31181dcd,"haxe.ui.backend.kha.TextField.get_multiline","haxe/ui/backend/kha/TextField.hx",194,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_196_set_multiline,"haxe.ui.backend.kha.TextField","set_multiline",0x761dffd9,"haxe.ui.backend.kha.TextField.set_multiline","haxe/ui/backend/kha/TextField.hx",196,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_209_get_wordWrap,"haxe.ui.backend.kha.TextField","get_wordWrap",0x9fefc5d4,"haxe.ui.backend.kha.TextField.get_wordWrap","haxe/ui/backend/kha/TextField.hx",209,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_211_set_wordWrap,"haxe.ui.backend.kha.TextField","set_wordWrap",0xb4e8e948,"haxe.ui.backend.kha.TextField.set_wordWrap","haxe/ui/backend/kha/TextField.hx",211,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_224_get_autoHeight,"haxe.ui.backend.kha.TextField","get_autoHeight",0x809251d6,"haxe.ui.backend.kha.TextField.get_autoHeight","haxe/ui/backend/kha/TextField.hx",224,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_226_set_autoHeight,"haxe.ui.backend.kha.TextField","set_autoHeight",0xa0b23a4a,"haxe.ui.backend.kha.TextField.set_autoHeight","haxe/ui/backend/kha/TextField.hx",226,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_238_get_maxVisibleLines,"haxe.ui.backend.kha.TextField","get_maxVisibleLines",0xca4567d1,"haxe.ui.backend.kha.TextField.get_maxVisibleLines","haxe/ui/backend/kha/TextField.hx",238,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_243_get_numLines,"haxe.ui.backend.kha.TextField","get_numLines",0xd126a2f9,"haxe.ui.backend.kha.TextField.get_numLines","haxe/ui/backend/kha/TextField.hx",243,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_246_resetSelection,"haxe.ui.backend.kha.TextField","resetSelection",0x85110d54,"haxe.ui.backend.kha.TextField.resetSelection","haxe/ui/backend/kha/TextField.hx",246,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_255_get_hasSelection,"haxe.ui.backend.kha.TextField","get_hasSelection",0x2e009eb2,"haxe.ui.backend.kha.TextField.get_hasSelection","haxe/ui/backend/kha/TextField.hx",255,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_261_get_selectionStart,"haxe.ui.backend.kha.TextField","get_selectionStart",0xbf58a196,"haxe.ui.backend.kha.TextField.get_selectionStart","haxe/ui/backend/kha/TextField.hx",261,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_266_get_selectionEnd,"haxe.ui.backend.kha.TextField","get_selectionEnd",0xf014bc0f,"haxe.ui.backend.kha.TextField.get_selectionEnd","haxe/ui/backend/kha/TextField.hx",266,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_271_get_caretPosition,"haxe.ui.backend.kha.TextField","get_caretPosition",0x8c2b4c2c,"haxe.ui.backend.kha.TextField.get_caretPosition","haxe/ui/backend/kha/TextField.hx",271,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_273_set_caretPosition,"haxe.ui.backend.kha.TextField","set_caretPosition",0xaf992438,"haxe.ui.backend.kha.TextField.set_caretPosition","haxe/ui/backend/kha/TextField.hx",273,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_287_get_isActive,"haxe.ui.backend.kha.TextField","get_isActive",0x0dc48e70,"haxe.ui.backend.kha.TextField.get_isActive","haxe/ui/backend/kha/TextField.hx",287,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_290_recalc,"haxe.ui.backend.kha.TextField","recalc",0x26bf539f,"haxe.ui.backend.kha.TextField.recalc","haxe/ui/backend/kha/TextField.hx",290,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_297_inBounds,"haxe.ui.backend.kha.TextField","inBounds",0x2b3eb5d1,"haxe.ui.backend.kha.TextField.inBounds","haxe/ui/backend/kha/TextField.hx",297,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_305_get_requiredWidth,"haxe.ui.backend.kha.TextField","get_requiredWidth",0xb1dc7707,"haxe.ui.backend.kha.TextField.get_requiredWidth","haxe/ui/backend/kha/TextField.hx",305,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_318_get_requiredHeight,"haxe.ui.backend.kha.TextField","get_requiredHeight",0xa55b27c6,"haxe.ui.backend.kha.TextField.get_requiredHeight","haxe/ui/backend/kha/TextField.hx",318,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_321_moveCaretRight,"haxe.ui.backend.kha.TextField","moveCaretRight",0xe4219ea1,"haxe.ui.backend.kha.TextField.moveCaretRight","haxe/ui/backend/kha/TextField.hx",321,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_334_moveCaretLeft,"haxe.ui.backend.kha.TextField","moveCaretLeft",0x0f69b4e2,"haxe.ui.backend.kha.TextField.moveCaretLeft","haxe/ui/backend/kha/TextField.hx",334,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_343_handleNegativeSelection,"haxe.ui.backend.kha.TextField","handleNegativeSelection",0xc3c85698,"haxe.ui.backend.kha.TextField.handleNegativeSelection","haxe/ui/backend/kha/TextField.hx",343,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_353_handlePositiveSelection,"haxe.ui.backend.kha.TextField","handlePositiveSelection",0xa2c7add4,"haxe.ui.backend.kha.TextField.handlePositiveSelection","haxe/ui/backend/kha/TextField.hx",353,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_362_performKeyOperation,"haxe.ui.backend.kha.TextField","performKeyOperation",0x09db3492,"haxe.ui.backend.kha.TextField.performKeyOperation","haxe/ui/backend/kha/TextField.hx",362,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_549_insertText,"haxe.ui.backend.kha.TextField","insertText",0x0a3d85dd,"haxe.ui.backend.kha.TextField.insertText","haxe/ui/backend/kha/TextField.hx",549,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_525_insertText,"haxe.ui.backend.kha.TextField","insertText",0x0a3d85dd,"haxe.ui.backend.kha.TextField.insertText","haxe/ui/backend/kha/TextField.hx",525,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_562_get_caretLeft,"haxe.ui.backend.kha.TextField","get_caretLeft",0xb61df60a,"haxe.ui.backend.kha.TextField.get_caretLeft","haxe/ui/backend/kha/TextField.hx",562,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_572_get_caretTop,"haxe.ui.backend.kha.TextField","get_caretTop",0x884d69f2,"haxe.ui.backend.kha.TextField.get_caretTop","haxe/ui/backend/kha/TextField.hx",572,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_579_get_caretWidth,"haxe.ui.backend.kha.TextField","get_caretWidth",0xfc250aa3,"haxe.ui.backend.kha.TextField.get_caretWidth","haxe/ui/backend/kha/TextField.hx",579,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_584_get_caretHeight,"haxe.ui.backend.kha.TextField","get_caretHeight",0x5a93bcaa,"haxe.ui.backend.kha.TextField.get_caretHeight","haxe/ui/backend/kha/TextField.hx",584,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_596_onCut,"haxe.ui.backend.kha.TextField","onCut",0xdb52dfac,"haxe.ui.backend.kha.TextField.onCut","haxe/ui/backend/kha/TextField.hx",596,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_606_onCopy,"haxe.ui.backend.kha.TextField","onCopy",0x0d2c464b,"haxe.ui.backend.kha.TextField.onCopy","haxe/ui/backend/kha/TextField.hx",606,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_615_onPaste,"haxe.ui.backend.kha.TextField","onPaste",0xec880bfd,"haxe.ui.backend.kha.TextField.onPaste","haxe/ui/backend/kha/TextField.hx",615,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_649_onKeyDown,"haxe.ui.backend.kha.TextField","onKeyDown",0x45d820cb,"haxe.ui.backend.kha.TextField.onKeyDown","haxe/ui/backend/kha/TextField.hx",649,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_618_onKeyDown,"haxe.ui.backend.kha.TextField","onKeyDown",0x45d820cb,"haxe.ui.backend.kha.TextField.onKeyDown","haxe/ui/backend/kha/TextField.hx",618,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_656_onKeyRepeat,"haxe.ui.backend.kha.TextField","onKeyRepeat",0x57106c04,"haxe.ui.backend.kha.TextField.onKeyRepeat","haxe/ui/backend/kha/TextField.hx",656,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_661_onKeyPress,"haxe.ui.backend.kha.TextField","onKeyPress",0xc20186fa,"haxe.ui.backend.kha.TextField.onKeyPress","haxe/ui/backend/kha/TextField.hx",661,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_678_onKeyUp,"haxe.ui.backend.kha.TextField","onKeyUp",0x0e307284,"haxe.ui.backend.kha.TextField.onKeyUp","haxe/ui/backend/kha/TextField.hx",678,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_698_onMouseDown,"haxe.ui.backend.kha.TextField","onMouseDown",0xa74f06d1,"haxe.ui.backend.kha.TextField.onMouseDown","haxe/ui/backend/kha/TextField.hx",698,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_749_focus,"haxe.ui.backend.kha.TextField","focus",0xad7925e1,"haxe.ui.backend.kha.TextField.focus","haxe/ui/backend/kha/TextField.hx",749,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_752_onFocus,"haxe.ui.backend.kha.TextField","onFocus",0x33bb1882,"haxe.ui.backend.kha.TextField.onFocus","haxe/ui/backend/kha/TextField.hx",752,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_757_onFocus,"haxe.ui.backend.kha.TextField","onFocus",0x33bb1882,"haxe.ui.backend.kha.TextField.onFocus","haxe/ui/backend/kha/TextField.hx",757,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_763_blur,"haxe.ui.backend.kha.TextField","blur",0x6325d0be,"haxe.ui.backend.kha.TextField.blur","haxe/ui/backend/kha/TextField.hx",763,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_766_onBlur,"haxe.ui.backend.kha.TextField","onBlur",0x0c80cd3d,"haxe.ui.backend.kha.TextField.onBlur","haxe/ui/backend/kha/TextField.hx",766,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_777_splitLines,"haxe.ui.backend.kha.TextField","splitLines",0x1b95861c,"haxe.ui.backend.kha.TextField.splitLines","haxe/ui/backend/kha/TextField.hx",777,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_833_deleteCharsFromCaret,"haxe.ui.backend.kha.TextField","deleteCharsFromCaret",0xfe70b8be,"haxe.ui.backend.kha.TextField.deleteCharsFromCaret","haxe/ui/backend/kha/TextField.hx",833,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_836_deleteChars,"haxe.ui.backend.kha.TextField","deleteChars",0x6bf2437b,"haxe.ui.backend.kha.TextField.deleteChars","haxe/ui/backend/kha/TextField.hx",836,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_859_posToIndex,"haxe.ui.backend.kha.TextField","posToIndex",0x782d05ba,"haxe.ui.backend.kha.TextField.posToIndex","haxe/ui/backend/kha/TextField.hx",859,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_879_indexToPos,"haxe.ui.backend.kha.TextField","indexToPos",0xbb633bbe,"haxe.ui.backend.kha.TextField.indexToPos","haxe/ui/backend/kha/TextField.hx",879,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_896_scrollToCaret,"haxe.ui.backend.kha.TextField","scrollToCaret",0x518dd884,"haxe.ui.backend.kha.TextField.scrollToCaret","haxe/ui/backend/kha/TextField.hx",896,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_922_ensureRowVisible,"haxe.ui.backend.kha.TextField","ensureRowVisible",0x31583d6d,"haxe.ui.backend.kha.TextField.ensureRowVisible","haxe/ui/backend/kha/TextField.hx",922,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_934_findClosestColumn,"haxe.ui.backend.kha.TextField","findClosestColumn",0x15c7a59f,"haxe.ui.backend.kha.TextField.findClosestColumn","haxe/ui/backend/kha/TextField.hx",934,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_946_render,"haxe.ui.backend.kha.TextField","render",0x2e06ed2d,"haxe.ui.backend.kha.TextField.render","haxe/ui/backend/kha/TextField.hx",946,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_31_boot,"haxe.ui.backend.kha.TextField","boot",0x63281249,"haxe.ui.backend.kha.TextField.boot","haxe/ui/backend/kha/TextField.hx",31,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_32_boot,"haxe.ui.backend.kha.TextField","boot",0x63281249,"haxe.ui.backend.kha.TextField.boot","haxe/ui/backend/kha/TextField.hx",32,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_33_boot,"haxe.ui.backend.kha.TextField","boot",0x63281249,"haxe.ui.backend.kha.TextField.boot","haxe/ui/backend/kha/TextField.hx",33,0x4c88cb89)
HX_LOCAL_STACK_FRAME(_hx_pos_900e02585355f002_590_boot,"haxe.ui.backend.kha.TextField","boot",0x63281249,"haxe.ui.backend.kha.TextField.boot","haxe/ui/backend/kha/TextField.hx",590,0x4c88cb89)
namespace haxe{
namespace ui{
namespace backend{
namespace kha{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_900e02585355f002_30_new)
HXLINE( 594)		this->_ctrl = false;
HXLINE( 593)		this->_shift = false;
HXLINE( 592)		this->_downKey = 0;
HXLINE( 591)		this->_repeatTimerId = -1;
HXLINE( 206)		this->_wordWrap = true;
HXLINE( 191)		this->_multiline = true;
HXLINE( 176)		this->_fontSize = 14;
HXLINE( 146)		this->_password = false;
HXLINE( 131)		this->_height = ((Float)100);
HXLINE( 116)		this->_width = ((Float)200);
HXLINE(  89)		this->_hx_set__text(HX_CTX, HX_("",00,00,00,00));
HXLINE(  88)		this->_hx_set__lines(HX_CTX, null());
HXLINE(  66)		this->_hx_set__caretMoved(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(  65)		this->_hx_set__textChanged(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(  63)		this->scrollLeft = ((Float)0);
HXLINE(  62)		this->scrollTop = 0;
HXLINE(  60)		this->selectedBackgroundColor = -13397761;
HXLINE(  59)		this->selectedTextColor = -1;
HXLINE(  57)		this->backgroundColor = -1;
HXLINE(  56)		this->textColor = -16777216;
HXLINE(  54)		this->editable = true;
HXLINE(  52)		this->top = ((Float)0);
HXLINE(  51)		this->left = ((Float)0);
HXLINE(  36)		this->_hx_set__caretInfo(HX_CTX,  ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("column",d6,4e,8b,c6),-1)
            			->setFixed(2,HX_("timerId",00,3b,f9,d8),-1)
            			->setFixed(3,HX_("row",1a,e2,56,00),-1)
            			->setFixed(4,HX_("force",eb,b1,94,04),false)));
HXLINE(  35)		this->_hx_set__selectionInfo(HX_CTX,  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("start",62,74,0b,84), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("column",d6,4e,8b,c6),-1)
            				->setFixed(1,HX_("row",1a,e2,56,00),-1)))
            			->setFixed(1,HX_("end",db,03,4d,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("column",d6,4e,8b,c6),-1)
            				->setFixed(1,HX_("row",1a,e2,56,00),-1)))));
HXLINE(  39)		::kha::input::Mouse_obj::get(null())->notify(this->onMouseDown_dyn(),null(),null(),null(),null());
HXLINE(  40)		::kha::input::Keyboard_obj::get(null())->notify(this->onKeyDown_dyn(),this->onKeyUp_dyn(),this->onKeyPress_dyn());
HXLINE(  44)		::kha::System_obj::notifyOnCutCopyPaste(this->onCut_dyn(),this->onCopy_dyn(),this->onPaste_dyn());
HXLINE(  45)		this->recalc();
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e99b0e3;
}

void TextField_obj::notify( ::Dynamic textChanged, ::Dynamic caretMoved){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_67_notify)
HXLINE(  68)		if (hx::IsNotNull( textChanged )) {
HXLINE(  69)			this->_textChanged->push(textChanged);
            		}
HXLINE(  71)		if (hx::IsNotNull( caretMoved )) {
HXLINE(  72)			this->_caretMoved->push(caretMoved);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,notify,(void))

void TextField_obj::notifyTextChanged(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_77_notifyTextChanged)
HXDLIN(  77)		int _g = 0;
HXDLIN(  77)		::Array< ::Dynamic> _g1 = this->_textChanged;
HXDLIN(  77)		while((_g < _g1->length)){
HXDLIN(  77)			 ::Dynamic l = _g1->__get(_g);
HXDLIN(  77)			_g = (_g + 1);
HXLINE(  78)			l(this->_text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,notifyTextChanged,(void))

void TextField_obj::notifyCaretMoved(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_83_notifyCaretMoved)
HXDLIN(  83)		int _g = 0;
HXDLIN(  83)		::Array< ::Dynamic> _g1 = this->_caretMoved;
HXDLIN(  83)		while((_g < _g1->length)){
HXDLIN(  83)			 ::Dynamic l = _g1->__get(_g);
HXDLIN(  83)			_g = (_g + 1);
HXLINE(  84)			l(this->_caretInfo);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,notifyCaretMoved,(void))

::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_92_get_text)
HXDLIN(  92)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_900e02585355f002_94_set_text)
HXLINE(  95)		if ((value == this->_text)) {
HXLINE(  96)			return value;
            		}
HXLINE(  99)		bool _hx_tmp;
HXDLIN(  99)		if (hx::IsNotNull( value )) {
HXLINE(  99)			_hx_tmp = (value.length == 0);
            		}
            		else {
HXLINE(  99)			_hx_tmp = true;
            		}
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 100)			if ((this->get_isActive() == true)) {
HXLINE( 101)				this->_caretInfo->__SetField(HX_("row",1a,e2,56,00),0,hx::paccDynamic);
HXLINE( 102)				this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),0,hx::paccDynamic);
            			}
            			else {
HXLINE( 104)				this->_caretInfo->__SetField(HX_("row",1a,e2,56,00),-1,hx::paccDynamic);
HXLINE( 105)				this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),-1,hx::paccDynamic);
            			}
HXLINE( 107)			this->resetSelection();
            		}
HXLINE( 110)		this->_hx_set__text(HX_CTX, value);
HXLINE( 111)		this->recalc();
HXLINE( 112)		this->notifyTextChanged();
HXLINE( 113)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_119_get_width)
HXDLIN( 119)		return this->_width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_width,return )

Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_121_set_width)
HXLINE( 122)		if ((value == this->_width)) {
HXLINE( 123)			return value;
            		}
HXLINE( 126)		this->_width = value;
HXLINE( 127)		this->recalc();
HXLINE( 128)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_width,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_134_get_height)
HXDLIN( 134)		return this->_height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_height,return )

Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_136_set_height)
HXLINE( 137)		if ((value == this->_height)) {
HXLINE( 138)			return value;
            		}
HXLINE( 141)		this->_height = value;
HXLINE( 142)		this->recalc();
HXLINE( 143)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_height,return )

bool TextField_obj::get_password(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_149_get_password)
HXDLIN( 149)		return this->_password;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_password,return )

bool TextField_obj::set_password(bool value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_151_set_password)
HXLINE( 152)		if ((value == this->_password)) {
HXLINE( 153)			return value;
            		}
HXLINE( 156)		this->_password = value;
HXLINE( 157)		this->recalc();
HXLINE( 158)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_password,return )

 ::kha::Kravur TextField_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_164_get_font)
HXDLIN( 164)		return this->_font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_font,return )

 ::kha::Kravur TextField_obj::set_font( ::kha::Kravur value){
            	HX_GC_STACKFRAME(&_hx_pos_900e02585355f002_166_set_font)
HXLINE( 167)		if (hx::IsEq( value,this->_font )) {
HXLINE( 168)			return value;
            		}
HXLINE( 171)		this->_hx_set__font(HX_CTX, value);
HXLINE( 172)		this->recalc();
HXLINE( 173)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_font,return )

int TextField_obj::get_fontSize(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_179_get_fontSize)
HXDLIN( 179)		return this->_fontSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_fontSize,return )

int TextField_obj::set_fontSize(int value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_181_set_fontSize)
HXLINE( 182)		if ((value == this->_fontSize)) {
HXLINE( 183)			return value;
            		}
HXLINE( 186)		this->_fontSize = value;
HXLINE( 187)		this->recalc();
HXLINE( 188)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_fontSize,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_194_get_multiline)
HXDLIN( 194)		return this->_multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_196_set_multiline)
HXLINE( 197)		if ((value == this->_multiline)) {
HXLINE( 198)			return value;
            		}
HXLINE( 201)		this->_multiline = value;
HXLINE( 202)		this->recalc();
HXLINE( 203)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_209_get_wordWrap)
HXDLIN( 209)		return this->_wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_211_set_wordWrap)
HXLINE( 212)		if ((value == this->_wordWrap)) {
HXLINE( 213)			return value;
            		}
HXLINE( 216)		this->_wordWrap = value;
HXLINE( 217)		this->recalc();
HXLINE( 218)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

bool TextField_obj::get_autoHeight(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_224_get_autoHeight)
HXDLIN( 224)		return this->_autoHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoHeight,return )

bool TextField_obj::set_autoHeight(bool value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_226_set_autoHeight)
HXLINE( 227)		if ((value == this->_autoHeight)) {
HXLINE( 228)			return value;
            		}
HXLINE( 231)		this->_autoHeight = value;
HXLINE( 232)		this->recalc();
HXLINE( 233)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoHeight,return )

int TextField_obj::get_maxVisibleLines(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_238_get_maxVisibleLines)
HXDLIN( 238)		Float _hx_tmp = this->get_height();
HXDLIN( 238)		 ::kha::Kravur _hx_tmp1 = this->get_font();
HXDLIN( 238)		return ::Math_obj::round((_hx_tmp / _hx_tmp1->height(this->get_fontSize())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxVisibleLines,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_243_get_numLines)
HXDLIN( 243)		return this->_lines->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

void TextField_obj::resetSelection(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_246_resetSelection)
HXLINE( 247)		 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),-1,hx::paccDynamic);
HXLINE( 248)		 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),-1,hx::paccDynamic);
HXLINE( 249)		 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),-1,hx::paccDynamic);
HXLINE( 250)		 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),-1,hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,resetSelection,(void))

bool TextField_obj::get_hasSelection(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_255_get_hasSelection)
HXDLIN( 255)		bool _hx_tmp;
HXDLIN( 255)		bool _hx_tmp1;
HXDLIN( 255)		if (hx::IsGreater(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),-1 )) {
HXDLIN( 255)			_hx_tmp1 = hx::IsGreater(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),-1 );
            		}
            		else {
HXDLIN( 255)			_hx_tmp1 = false;
            		}
HXDLIN( 255)		if (_hx_tmp1) {
HXDLIN( 255)			_hx_tmp = hx::IsGreater(  ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),-1 );
            		}
            		else {
HXDLIN( 255)			_hx_tmp = false;
            		}
HXDLIN( 255)		if (_hx_tmp) {
HXLINE( 256)			return hx::IsGreater(  ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),-1 );
            		}
            		else {
HXDLIN( 255)			return false;
            		}
HXDLIN( 255)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_hasSelection,return )

int TextField_obj::get_selectionStart(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_261_get_selectionStart)
HXDLIN( 261)		return this->posToIndex(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionStart,return )

int TextField_obj::get_selectionEnd(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_266_get_selectionEnd)
HXDLIN( 266)		return this->posToIndex(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEnd,return )

int TextField_obj::get_caretPosition(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_271_get_caretPosition)
HXDLIN( 271)		return this->posToIndex(this->_caretInfo);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretPosition,return )

int TextField_obj::set_caretPosition(int value){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_273_set_caretPosition)
HXLINE( 274)		 ::Dynamic pos = this->indexToPos(value);
HXLINE( 275)		this->_caretInfo->__SetField(HX_("row",1a,e2,56,00),pos->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 276)		this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),pos->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
HXLINE( 277)		this->scrollToCaret();
HXLINE( 278)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_caretPosition,return )

bool TextField_obj::get_isActive(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_287_get_isActive)
HXDLIN( 287)		return hx::IsEq( ::haxe::ui::backend::kha::TextField_obj::_currentFocus,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_isActive,return )

void TextField_obj::recalc(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_290_recalc)
HXLINE( 291)		this->splitLines();
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		if ((this->get_autoHeight() == true)) {
HXLINE( 292)			_hx_tmp = hx::IsNotNull( this->_font );
            		}
            		else {
HXLINE( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 293)			this->set_height(this->get_requiredHeight());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,recalc,(void))

bool TextField_obj::inBounds(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_297_inBounds)
HXLINE( 298)		bool _hx_tmp;
HXDLIN( 298)		bool _hx_tmp1;
HXDLIN( 298)		bool _hx_tmp2;
HXDLIN( 298)		if ((x >= this->left)) {
HXLINE( 298)			_hx_tmp2 = (y >= this->top);
            		}
            		else {
HXLINE( 298)			_hx_tmp2 = false;
            		}
HXDLIN( 298)		if (_hx_tmp2) {
HXLINE( 298)			Float _hx_tmp3 = this->left;
HXDLIN( 298)			_hx_tmp1 = (x <= (_hx_tmp3 + this->get_width()));
            		}
            		else {
HXLINE( 298)			_hx_tmp1 = false;
            		}
HXDLIN( 298)		if (_hx_tmp1) {
HXLINE( 298)			Float _hx_tmp4 = this->top;
HXDLIN( 298)			_hx_tmp = (y <= (_hx_tmp4 + this->get_height()));
            		}
            		else {
HXLINE( 298)			_hx_tmp = false;
            		}
HXDLIN( 298)		if (_hx_tmp) {
HXLINE( 299)			return true;
            		}
HXLINE( 301)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,inBounds,return )

Float TextField_obj::get_requiredWidth(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_305_get_requiredWidth)
HXLINE( 306)		Float rw = ( (Float)(0) );
HXLINE( 307)		{
HXLINE( 307)			int _g = 0;
HXDLIN( 307)			::Array< ::Dynamic> _g1 = this->_lines;
HXDLIN( 307)			while((_g < _g1->length)){
HXLINE( 307)				::Array< int > line = _g1->__get(_g).StaticCast< ::Array< int > >();
HXDLIN( 307)				_g = (_g + 1);
HXLINE( 308)				 ::kha::Kravur lineWidth = this->get_font();
HXDLIN( 308)				int lineWidth1 = this->get_fontSize();
HXDLIN( 308)				Float lineWidth2 = lineWidth->widthOfCharacters(lineWidth1,line,0,line->length);
HXLINE( 309)				if ((lineWidth2 > rw)) {
HXLINE( 310)					rw = lineWidth2;
            				}
            			}
            		}
HXLINE( 313)		return rw;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_requiredWidth,return )

Float TextField_obj::get_requiredHeight(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_318_get_requiredHeight)
HXDLIN( 318)		int _hx_tmp = this->_lines->length;
HXDLIN( 318)		 ::kha::Kravur _hx_tmp1 = this->get_font();
HXDLIN( 318)		return (( (Float)(_hx_tmp) ) * _hx_tmp1->height(this->get_fontSize()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_requiredHeight,return )

void TextField_obj::moveCaretRight(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_321_moveCaretRight)
HXLINE( 322)		if (hx::IsGreaterEq( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),this->_lines->length )) {
HXLINE( 323)			return;
            		}
HXLINE( 325)		if (hx::IsLess( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >()->length )) {
HXLINE( 326)			hx::FieldRef((this->_caretInfo).mPtr,HX_("column",d6,4e,8b,c6))++;
            		}
            		else {
HXLINE( 327)			if (hx::IsLess( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),(this->_lines->length - 1) )) {
HXLINE( 328)				this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),0,hx::paccDynamic);
HXLINE( 329)				hx::FieldRef((this->_caretInfo).mPtr,HX_("row",1a,e2,56,00))++;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,moveCaretRight,(void))

void TextField_obj::moveCaretLeft(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_334_moveCaretLeft)
HXDLIN( 334)		if (hx::IsGreater( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),0 )) {
HXLINE( 335)			hx::FieldRef((this->_caretInfo).mPtr,HX_("column",d6,4e,8b,c6))--;
            		}
            		else {
HXLINE( 336)			if (hx::IsGreater( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),0 )) {
HXLINE( 337)				hx::FieldRef((this->_caretInfo).mPtr,HX_("row",1a,e2,56,00))--;
HXLINE( 338)				this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >()->length,hx::paccDynamic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,moveCaretLeft,(void))

void TextField_obj::handleNegativeSelection(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_343_handleNegativeSelection)
HXDLIN( 343)		int _hx_tmp = this->get_caretPosition();
HXDLIN( 343)		if ((_hx_tmp <= this->get_selectionStart())) {
HXLINE( 344)			 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 345)			 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
            		}
            		else {
HXLINE( 347)			 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 348)			 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,handleNegativeSelection,(void))

void TextField_obj::handlePositiveSelection(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_353_handlePositiveSelection)
HXDLIN( 353)		int _hx_tmp = this->get_caretPosition();
HXDLIN( 353)		if ((_hx_tmp >= this->get_selectionEnd())) {
HXLINE( 354)			 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 355)			 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
            		}
            		else {
HXLINE( 357)			 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 358)			 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,handlePositiveSelection,(void))

void TextField_obj::performKeyOperation(int code){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_362_performKeyOperation)
HXLINE( 363)		int orginalCaretPos_row = ( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) );
HXDLIN( 363)		int orginalCaretPos_column = ( (int)(this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) );
HXLINE( 365)		switch((int)(code)){
            			case (int)8: {
HXLINE( 438)				if (this->get_hasSelection()) {
HXLINE( 439)					this->insertText(HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 441)					if (this->_ctrl) {
HXLINE( 442)						int caretIndex = this->posToIndex(this->_caretInfo);
HXLINE( 443)						int caretDisplacement = 0;
HXLINE( 444)						while(true){
HXLINE( 444)							bool _hx_tmp;
HXDLIN( 444)							if (((caretIndex + caretDisplacement) > 0)) {
HXLINE( 444)								_hx_tmp = hx::IsEq( this->_text.charCodeAt(((caretIndex + caretDisplacement) - 1)),32 );
            							}
            							else {
HXLINE( 444)								_hx_tmp = false;
            							}
HXDLIN( 444)							if (!(_hx_tmp)) {
HXLINE( 444)								goto _hx_goto_42;
            							}
HXLINE( 445)							caretDisplacement = (caretDisplacement - 1);
            						}
            						_hx_goto_42:;
HXLINE( 446)						while(true){
HXLINE( 446)							bool _hx_tmp1;
HXDLIN( 446)							if (((caretIndex + caretDisplacement) > 0)) {
HXLINE( 446)								_hx_tmp1 = hx::IsNotEq( this->_text.charCodeAt(((caretIndex + caretDisplacement) - 1)),32 );
            							}
            							else {
HXLINE( 446)								_hx_tmp1 = false;
            							}
HXDLIN( 446)							if (!(_hx_tmp1)) {
HXLINE( 446)								goto _hx_goto_43;
            							}
HXLINE( 447)							caretDisplacement = (caretDisplacement - 1);
            						}
            						_hx_goto_43:;
HXLINE( 449)						this->deleteCharsFromCaret(caretDisplacement,null());
HXLINE( 450)						this->scrollToCaret();
            					}
            					else {
HXLINE( 452)						this->deleteCharsFromCaret(-1,null());
            					}
            				}
            			}
            			break;
            			case (int)13: {
HXLINE( 367)				if (this->get_multiline()) {
HXLINE( 368)					this->insertText(HX_("\n",0a,00,00,00));
            				}
            			}
            			break;
            			case (int)35: {
HXLINE( 490)				::Array< int > line = this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >();
HXLINE( 491)				 ::kha::Kravur _hx_tmp2 = this->get_font();
HXDLIN( 491)				int _hx_tmp3 = this->get_fontSize();
HXDLIN( 491)				Float _hx_tmp4 = _hx_tmp2->widthOfCharacters(_hx_tmp3,line,0,line->length);
HXDLIN( 491)				Float _hx_tmp5 = (_hx_tmp4 - this->get_width());
HXDLIN( 491)				this->scrollLeft = (_hx_tmp5 + this->get_caretWidth());
HXLINE( 492)				if ((this->scrollLeft < 0)) {
HXLINE( 493)					this->scrollLeft = ( (Float)(0) );
            				}
HXLINE( 495)				this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),line->length,hx::paccDynamic);
HXLINE( 496)				this->scrollToCaret();
HXLINE( 498)				if ((this->_shift == true)) {
HXLINE( 499)					this->handlePositiveSelection();
            				}
            				else {
HXLINE( 501)					this->resetSelection();
            				}
            			}
            			break;
            			case (int)36: {
HXLINE( 479)				this->scrollLeft = ( (Float)(0) );
HXLINE( 480)				this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),0,hx::paccDynamic);
HXLINE( 481)				this->scrollToCaret();
HXLINE( 483)				if ((this->_shift == true)) {
HXLINE( 484)					this->handleNegativeSelection();
            				}
            				else {
HXLINE( 486)					this->resetSelection();
            				}
            			}
            			break;
            			case (int)37: {
HXLINE( 372)				this->moveCaretLeft();
HXLINE( 374)				if (this->_ctrl) {
HXLINE( 375)					while(true){
HXLINE( 375)						bool _hx_tmp6;
HXDLIN( 375)						bool _hx_tmp7;
HXDLIN( 375)						if (hx::IsLessEq( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),0 )) {
HXLINE( 375)							_hx_tmp7 = hx::IsGreater( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),0 );
            						}
            						else {
HXLINE( 375)							_hx_tmp7 = true;
            						}
HXDLIN( 375)						if (_hx_tmp7) {
HXLINE( 375)							::String _hx_tmp8 = this->_text;
HXDLIN( 375)							_hx_tmp6 = hx::IsEq( _hx_tmp8.charCodeAt((this->posToIndex(this->_caretInfo) - 1)),32 );
            						}
            						else {
HXLINE( 375)							_hx_tmp6 = false;
            						}
HXDLIN( 375)						if (!(_hx_tmp6)) {
HXLINE( 375)							goto _hx_goto_44;
            						}
HXLINE( 376)						this->moveCaretLeft();
            					}
            					_hx_goto_44:;
HXLINE( 378)					while(true){
HXLINE( 378)						bool _hx_tmp9;
HXDLIN( 378)						bool _hx_tmp10;
HXDLIN( 378)						if (hx::IsLessEq( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),0 )) {
HXLINE( 378)							_hx_tmp10 = hx::IsGreater( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),0 );
            						}
            						else {
HXLINE( 378)							_hx_tmp10 = true;
            						}
HXDLIN( 378)						if (_hx_tmp10) {
HXLINE( 378)							::String _hx_tmp11 = this->_text;
HXDLIN( 378)							_hx_tmp9 = hx::IsNotEq( _hx_tmp11.charCodeAt((this->posToIndex(this->_caretInfo) - 1)),32 );
            						}
            						else {
HXLINE( 378)							_hx_tmp9 = false;
            						}
HXDLIN( 378)						if (!(_hx_tmp9)) {
HXLINE( 378)							goto _hx_goto_45;
            						}
HXLINE( 379)						this->moveCaretLeft();
            					}
            					_hx_goto_45:;
            				}
HXLINE( 383)				this->scrollToCaret();
HXLINE( 385)				if ((this->_shift == true)) {
HXLINE( 386)					this->handleNegativeSelection();
            				}
            				else {
HXLINE( 388)					this->resetSelection();
            				}
            			}
            			break;
            			case (int)38: {
HXLINE( 412)				if (hx::IsGreater( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),0 )) {
HXLINE( 413)					this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),this->findClosestColumn(this->_caretInfo,-1),hx::paccDynamic);
HXLINE( 414)					hx::FieldRef((this->_caretInfo).mPtr,HX_("row",1a,e2,56,00))--;
            				}
HXLINE( 416)				this->scrollToCaret();
HXLINE( 418)				if ((this->_shift == true)) {
HXLINE( 419)					this->handleNegativeSelection();
            				}
            				else {
HXLINE( 421)					this->resetSelection();
            				}
            			}
            			break;
            			case (int)39: {
HXLINE( 392)				this->moveCaretRight();
HXLINE( 394)				if (this->_ctrl) {
HXLINE( 395)					while(true){
HXLINE( 395)						bool _hx_tmp12;
HXDLIN( 395)						bool _hx_tmp13;
HXDLIN( 395)						if (hx::IsLess( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >()->length )) {
HXLINE( 395)							_hx_tmp13 = hx::IsLess( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),this->_lines->length );
            						}
            						else {
HXLINE( 395)							_hx_tmp13 = false;
            						}
HXDLIN( 395)						if (_hx_tmp13) {
HXLINE( 395)							::String _hx_tmp14 = this->_text;
HXDLIN( 395)							_hx_tmp12 = hx::IsNotEq( _hx_tmp14.charCodeAt(this->posToIndex(this->_caretInfo)),32 );
            						}
            						else {
HXLINE( 395)							_hx_tmp12 = false;
            						}
HXDLIN( 395)						if (!(_hx_tmp12)) {
HXLINE( 395)							goto _hx_goto_46;
            						}
HXLINE( 396)						this->moveCaretRight();
            					}
            					_hx_goto_46:;
HXLINE( 398)					while(true){
HXLINE( 398)						bool _hx_tmp15;
HXDLIN( 398)						bool _hx_tmp16;
HXDLIN( 398)						if (hx::IsLess( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >()->length )) {
HXLINE( 398)							_hx_tmp16 = hx::IsLess( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),this->_lines->length );
            						}
            						else {
HXLINE( 398)							_hx_tmp16 = false;
            						}
HXDLIN( 398)						if (_hx_tmp16) {
HXLINE( 398)							::String _hx_tmp17 = this->_text;
HXDLIN( 398)							_hx_tmp15 = hx::IsEq( _hx_tmp17.charCodeAt(this->posToIndex(this->_caretInfo)),32 );
            						}
            						else {
HXLINE( 398)							_hx_tmp15 = false;
            						}
HXDLIN( 398)						if (!(_hx_tmp15)) {
HXLINE( 398)							goto _hx_goto_47;
            						}
HXLINE( 399)						this->moveCaretRight();
            					}
            					_hx_goto_47:;
            				}
HXLINE( 403)				this->scrollToCaret();
HXLINE( 405)				if ((this->_shift == true)) {
HXLINE( 406)					this->handlePositiveSelection();
            				}
            				else {
HXLINE( 408)					this->resetSelection();
            				}
            			}
            			break;
            			case (int)40: {
HXLINE( 425)				if (hx::IsLess( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),(this->_lines->length - 1) )) {
HXLINE( 426)					this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),this->findClosestColumn(this->_caretInfo,1),hx::paccDynamic);
HXLINE( 427)					hx::FieldRef((this->_caretInfo).mPtr,HX_("row",1a,e2,56,00))++;
            				}
HXLINE( 429)				this->scrollToCaret();
HXLINE( 431)				if ((this->_shift == true)) {
HXLINE( 432)					this->handlePositiveSelection();
            				}
            				else {
HXLINE( 434)					this->resetSelection();
            				}
            			}
            			break;
            			case (int)46: {
HXLINE( 457)				if (this->get_hasSelection()) {
HXLINE( 458)					this->insertText(HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 460)					if (this->_ctrl) {
HXLINE( 462)						int caretIndex1 = this->posToIndex(this->_caretInfo);
HXLINE( 463)						int caretDisplacement1 = 0;
HXLINE( 464)						while(true){
HXLINE( 464)							bool _hx_tmp18;
HXDLIN( 464)							if (hx::IsNotEq( this->_text.charCodeAt((caretIndex1 + caretDisplacement1)),32 )) {
HXLINE( 464)								_hx_tmp18 = ((caretIndex1 + caretDisplacement1) < this->_text.length);
            							}
            							else {
HXLINE( 464)								_hx_tmp18 = false;
            							}
HXDLIN( 464)							if (!(_hx_tmp18)) {
HXLINE( 464)								goto _hx_goto_48;
            							}
HXLINE( 465)							caretDisplacement1 = (caretDisplacement1 + 1);
            						}
            						_hx_goto_48:;
HXLINE( 466)						while(true){
HXLINE( 466)							bool _hx_tmp19;
HXDLIN( 466)							if (hx::IsEq( this->_text.charCodeAt((caretIndex1 + caretDisplacement1)),32 )) {
HXLINE( 466)								_hx_tmp19 = ((caretIndex1 + caretDisplacement1) < this->_text.length);
            							}
            							else {
HXLINE( 466)								_hx_tmp19 = false;
            							}
HXDLIN( 466)							if (!(_hx_tmp19)) {
HXLINE( 466)								goto _hx_goto_49;
            							}
HXLINE( 467)							caretDisplacement1 = (caretDisplacement1 + 1);
            						}
            						_hx_goto_49:;
HXLINE( 469)						this->deleteCharsFromCaret(caretDisplacement1,false);
HXLINE( 470)						this->set_caretPosition(caretIndex1);
HXLINE( 471)						this->scrollToCaret();
            					}
            					else {
HXLINE( 474)						this->deleteCharsFromCaret(1,false);
            					}
            				}
            			}
            			break;
            			case (int)65: {
HXLINE( 504)				if (this->_ctrl) {
HXLINE( 505)					 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),0,hx::paccDynamic);
HXLINE( 506)					 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),0,hx::paccDynamic);
HXLINE( 508)					::Array< int > line1 = this->_lines->__get((this->_lines->length - 1)).StaticCast< ::Array< int > >();
HXLINE( 510)					this->_caretInfo->__SetField(HX_("row",1a,e2,56,00),(this->_lines->length - 1),hx::paccDynamic);
HXLINE( 511)					this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),line1->length,hx::paccDynamic);
HXLINE( 512)					 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),(this->_lines->length - 1),hx::paccDynamic);
HXLINE( 513)					 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),line1->length,hx::paccDynamic);
HXLINE( 514)					this->scrollToCaret();
            				}
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 520)		bool _hx_tmp20;
HXDLIN( 520)		if (hx::IsEq( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),orginalCaretPos_row )) {
HXLINE( 520)			_hx_tmp20 = hx::IsNotEq( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),orginalCaretPos_column );
            		}
            		else {
HXLINE( 520)			_hx_tmp20 = true;
            		}
HXDLIN( 520)		if (_hx_tmp20) {
HXLINE( 521)			this->notifyCaretMoved();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,performKeyOperation,(void))

void TextField_obj::insertText(::String s){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::backend::kha::TextField,_gthis,int,endIndex,int,delta) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_900e02585355f002_549_insertText)
HXLINE( 550)			_gthis->set_caretPosition((endIndex + delta));
HXLINE( 551)			_gthis->notifyCaretMoved();
HXLINE( 552)			_gthis->scrollToCaret();
HXLINE( 554)			return false;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_900e02585355f002_525_insertText)
HXDLIN( 525)		 ::haxe::ui::backend::kha::TextField _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 526)		 ::Dynamic start = this->_caretInfo;
HXLINE( 527)		 ::Dynamic end = this->_caretInfo;
HXLINE( 528)		bool _hx_tmp;
HXDLIN( 528)		if (hx::IsNotEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),-1 )) {
HXLINE( 528)			_hx_tmp = hx::IsNotEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),-1 );
            		}
            		else {
HXLINE( 528)			_hx_tmp = false;
            		}
HXDLIN( 528)		if (_hx_tmp) {
HXLINE( 529)			start = this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic);
            		}
HXLINE( 531)		bool _hx_tmp1;
HXDLIN( 531)		if (hx::IsNotEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),-1 )) {
HXLINE( 531)			_hx_tmp1 = hx::IsNotEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),-1 );
            		}
            		else {
HXLINE( 531)			_hx_tmp1 = false;
            		}
HXDLIN( 531)		if (_hx_tmp1) {
HXLINE( 532)			end = this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic);
            		}
HXLINE( 536)		int startIndex = this->posToIndex(start);
HXLINE( 537)		int endIndex = this->posToIndex(end);
HXLINE( 539)		::String before = this->get_text().substring(0,startIndex);
HXLINE( 540)		::String after = this->get_text();
HXDLIN( 540)		::String after1 = after.substring(endIndex,this->get_text().length);
HXLINE( 542)		this->set_text(((before + s) + after1));
HXLINE( 543)		int delta = (s.length - (endIndex - startIndex));
HXLINE( 545)		this->set_caretPosition((endIndex + delta));
HXLINE( 546)		this->notifyCaretMoved();
HXLINE( 547)		this->scrollToCaret();
HXLINE( 549)		::kha::Scheduler_obj::addBreakableTimeTask( ::Dynamic(new _hx_Closure_0(_gthis,endIndex,delta)),((Float).001),null(),null());
HXLINE( 558)		this->resetSelection();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,insertText,(void))

Float TextField_obj::get_caretLeft(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_562_get_caretLeft)
HXLINE( 563)		::Array< int > line = this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >();
HXLINE( 564)		Float xpos = (this->left - this->scrollLeft);
HXLINE( 565)		if (hx::IsNull( line )) {
HXLINE( 566)			return xpos;
            		}
HXLINE( 568)		 ::kha::Kravur _hx_tmp = this->get_font();
HXDLIN( 568)		int _hx_tmp1 = this->get_fontSize();
HXDLIN( 568)		return (xpos + _hx_tmp->widthOfCharacters(_hx_tmp1,line,0,( (int)(this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretLeft,return )

Float TextField_obj::get_caretTop(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_572_get_caretTop)
HXLINE( 573)		Float ypos = this->top;
HXLINE( 574)		int _hx_tmp = (( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) ) - this->scrollTop);
HXDLIN( 574)		 ::kha::Kravur _hx_tmp1 = this->get_font();
HXDLIN( 574)		return (ypos + (( (Float)(_hx_tmp) ) * _hx_tmp1->height(this->get_fontSize())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretTop,return )

Float TextField_obj::get_caretWidth(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_579_get_caretWidth)
HXDLIN( 579)		return ( (Float)(2) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretWidth,return )

Float TextField_obj::get_caretHeight(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_584_get_caretHeight)
HXDLIN( 584)		 ::kha::Kravur _hx_tmp = this->get_font();
HXDLIN( 584)		return _hx_tmp->height(this->get_fontSize());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretHeight,return )

::String TextField_obj::onCut(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_596_onCut)
HXLINE( 597)		if (this->get_hasSelection()) {
HXLINE( 598)			::String cutText = this->_text;
HXDLIN( 598)			int cutText1 = this->posToIndex(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic));
HXDLIN( 598)			::String cutText2 = cutText.substring(cutText1,this->posToIndex(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)));
HXLINE( 599)			this->insertText(HX_("",00,00,00,00));
HXLINE( 600)			return cutText2;
            		}
HXLINE( 603)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,onCut,return )

::String TextField_obj::onCopy(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_606_onCopy)
HXLINE( 607)		if (this->get_hasSelection()) {
HXLINE( 608)			::String _hx_tmp = this->_text;
HXDLIN( 608)			int _hx_tmp1 = this->posToIndex(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic));
HXDLIN( 608)			return _hx_tmp.substring(_hx_tmp1,this->posToIndex(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)));
            		}
HXLINE( 611)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,onCopy,return )

void TextField_obj::onPaste(::String text){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_615_onPaste)
HXDLIN( 615)		this->insertText(text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,onPaste,(void))

void TextField_obj::onKeyDown(int code){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::backend::kha::TextField,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_900e02585355f002_649_onKeyDown)
HXLINE( 649)			if ((_gthis->_downKey != 0)) {
HXLINE( 650)				::kha::Scheduler_obj::addTimeTaskToGroup(1234,_gthis->onKeyRepeat_dyn(),( (Float)(0) ),((Float)0.0333333333333333329),null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_900e02585355f002_618_onKeyDown)
HXDLIN( 618)		 ::haxe::ui::backend::kha::TextField _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 619)		if ((this->get_isActive() == false)) {
HXLINE( 620)			return;
            		}
HXLINE( 623)		bool _hx_tmp;
HXDLIN( 623)		bool _hx_tmp1;
HXDLIN( 623)		if ((code != 10)) {
HXLINE( 623)			_hx_tmp1 = (code == 13);
            		}
            		else {
HXLINE( 623)			_hx_tmp1 = true;
            		}
HXDLIN( 623)		if (_hx_tmp1) {
HXLINE( 623)			_hx_tmp = (this->get_multiline() == false);
            		}
            		else {
HXLINE( 623)			_hx_tmp = false;
            		}
HXDLIN( 623)		if (_hx_tmp) {
HXLINE( 624)			return;
            		}
HXLINE( 627)		switch((int)(code)){
            			case (int)16: {
HXLINE( 629)				if (!(this->get_hasSelection())) {
HXLINE( 630)					 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 631)					 ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
HXLINE( 632)					 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("row",1a,e2,56,00),this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 633)					 ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__SetField(HX_("column",d6,4e,8b,c6),this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),hx::paccDynamic);
            				}
HXLINE( 635)				this->_shift = true;
            			}
            			break;
            			case (int)17: {
HXLINE( 637)				this->_ctrl = true;
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 641)		this->_downKey = code;
HXLINE( 642)		this->_caretInfo->__SetField(HX_("force",eb,b1,94,04),true,hx::paccDynamic);
HXLINE( 643)		this->_caretInfo->__SetField(HX_("visible",72,78,24,a3),true,hx::paccDynamic);
HXLINE( 645)		this->performKeyOperation(code);
HXLINE( 647)		::kha::Scheduler_obj::removeTimeTasks(1234);
HXLINE( 648)		::kha::Scheduler_obj::addTimeTaskToGroup(1234, ::Dynamic(new _hx_Closure_0(_gthis)),((Float).6),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,onKeyDown,(void))

void TextField_obj::onKeyRepeat(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_656_onKeyRepeat)
HXDLIN( 656)		if ((this->_downKey != 0)) {
HXLINE( 657)			this->performKeyOperation(this->_downKey);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,onKeyRepeat,(void))

void TextField_obj::onKeyPress(::String character){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_661_onKeyPress)
HXLINE( 662)		if ((this->get_isActive() == false)) {
HXLINE( 663)			return;
            		}
HXLINE( 666)		bool _hx_tmp;
HXDLIN( 666)		bool _hx_tmp1;
HXDLIN( 666)		if (hx::IsNotEq( character.charCodeAt(0),10 )) {
HXLINE( 666)			_hx_tmp1 = hx::IsEq( character.charCodeAt(0),13 );
            		}
            		else {
HXLINE( 666)			_hx_tmp1 = true;
            		}
HXDLIN( 666)		if (_hx_tmp1) {
HXLINE( 666)			_hx_tmp = (this->get_multiline() == false);
            		}
            		else {
HXLINE( 666)			_hx_tmp = false;
            		}
HXDLIN( 666)		if (_hx_tmp) {
HXLINE( 667)			return;
            		}
HXLINE( 670)		this->insertText(character);
HXLINE( 672)		this->_caretInfo->__SetField(HX_("force",eb,b1,94,04),false,hx::paccDynamic);
HXLINE( 673)		this->_caretInfo->__SetField(HX_("visible",72,78,24,a3),true,hx::paccDynamic);
HXLINE( 674)		this->_downKey = 0;
HXLINE( 675)		::kha::Scheduler_obj::removeTimeTasks(1234);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,onKeyPress,(void))

void TextField_obj::onKeyUp(int code){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_678_onKeyUp)
HXLINE( 679)		if ((this->get_isActive() == false)) {
HXLINE( 680)			return;
            		}
HXLINE( 683)		switch((int)(code)){
            			case (int)16: {
HXLINE( 685)				this->_shift = false;
            			}
            			break;
            			case (int)17: {
HXLINE( 687)				this->_ctrl = false;
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 691)		this->_caretInfo->__SetField(HX_("force",eb,b1,94,04),false,hx::paccDynamic);
HXLINE( 692)		this->_caretInfo->__SetField(HX_("visible",72,78,24,a3),true,hx::paccDynamic);
HXLINE( 693)		this->_downKey = 0;
HXLINE( 694)		::kha::Scheduler_obj::removeTimeTask(this->_repeatTimerId);
HXLINE( 695)		::kha::Scheduler_obj::removeTimeTasks(1234);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,onKeyUp,(void))

void TextField_obj::onMouseDown(int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_698_onMouseDown)
HXLINE( 699)		bool _hx_tmp;
HXDLIN( 699)		if (hx::IsNotNull( this->_font )) {
HXLINE( 699)			_hx_tmp = (this->inBounds(( (Float)(x) ),( (Float)(y) )) == false);
            		}
            		else {
HXLINE( 699)			_hx_tmp = true;
            		}
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 700)			return;
            		}
HXLINE( 703)		bool _hx_tmp1;
HXDLIN( 703)		if (hx::IsNotNull( ::haxe::ui::backend::kha::TextField_obj::_currentFocus )) {
HXLINE( 703)			_hx_tmp1 = hx::IsNotEq( ::haxe::ui::backend::kha::TextField_obj::_currentFocus,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 703)			_hx_tmp1 = false;
            		}
HXDLIN( 703)		if (_hx_tmp1) {
HXLINE( 704)			::haxe::ui::backend::kha::TextField_obj::_currentFocus->onBlur();
            		}
HXLINE( 706)		::haxe::ui::backend::kha::TextField_obj::_currentFocus = hx::ObjectPtr<OBJ_>(this);
HXLINE( 708)		Float localX = ((( (Float)(x) ) - this->left) + this->scrollLeft);
HXLINE( 709)		Float localY = (( (Float)(y) ) - this->top);
HXLINE( 711)		this->resetSelection();
HXLINE( 713)		int _hx_tmp2 = this->scrollTop;
HXDLIN( 713)		 ::kha::Kravur _hx_tmp3 = this->get_font();
HXDLIN( 713)		int _hx_tmp4 = ::Std_obj::_hx_int((localY / _hx_tmp3->height(this->get_fontSize())));
HXDLIN( 713)		this->_caretInfo->__SetField(HX_("row",1a,e2,56,00),(_hx_tmp2 + _hx_tmp4),hx::paccDynamic);
HXLINE( 714)		if (hx::IsGreater( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),(this->_lines->length - 1) )) {
HXLINE( 715)			this->_caretInfo->__SetField(HX_("row",1a,e2,56,00),(this->_lines->length - 1),hx::paccDynamic);
            		}
HXLINE( 717)		::Array< int > line = this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >();
HXLINE( 718)		if (hx::IsNull( line )) {
HXLINE( 719)			return;
            		}
HXLINE( 721)		Float totalWidth = ( (Float)(0) );
HXLINE( 722)		int i = 0;
HXLINE( 723)		bool inText = false;
HXLINE( 724)		{
HXLINE( 724)			int _g = 0;
HXDLIN( 724)			while((_g < line->length)){
HXLINE( 724)				int ch = line->__get(_g);
HXDLIN( 724)				_g = (_g + 1);
HXLINE( 725)				 ::kha::Kravur charWidth = this->get_font();
HXDLIN( 725)				Float charWidth1 = charWidth->widthOfCharacters(this->get_fontSize(),::Array_obj< int >::__new(1)->init(0,ch),0,1);
HXLINE( 726)				if (((totalWidth + charWidth1) > localX)) {
HXLINE( 727)					this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),i,hx::paccDynamic);
HXLINE( 728)					Float delta = (localX - totalWidth);
HXLINE( 729)					if ((delta > (charWidth1 * ((Float)0.6)))) {
HXLINE( 730)						hx::FieldRef((this->_caretInfo).mPtr,HX_("column",d6,4e,8b,c6))++;
            					}
HXLINE( 732)					inText = true;
HXLINE( 733)					goto _hx_goto_65;
            				}
            				else {
HXLINE( 735)					totalWidth = (totalWidth + charWidth1);
            				}
HXLINE( 737)				i = (i + 1);
            			}
            			_hx_goto_65:;
            		}
HXLINE( 740)		if ((inText == false)) {
HXLINE( 741)			this->_caretInfo->__SetField(HX_("column",d6,4e,8b,c6),line->length,hx::paccDynamic);
            		}
HXLINE( 744)		this->scrollToCaret();
HXLINE( 745)		::haxe::ui::backend::kha::TextField_obj::_currentFocus->onFocus();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,onMouseDown,(void))

void TextField_obj::focus(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_749_focus)
HXDLIN( 749)		this->onFocus();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,focus,(void))

void TextField_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_752_onFocus)
HXDLIN( 752)		 ::haxe::ui::backend::kha::TextField _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 753)		::kha::System_obj::notifyOnCutCopyPaste(this->onCut_dyn(),this->onCopy_dyn(),this->onPaste_dyn());
HXLINE( 755)		if (hx::IsEq( this->_caretInfo->__Field(HX_("timerId",00,3b,f9,d8),hx::paccDynamic),-1 )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::backend::kha::TextField,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_900e02585355f002_757_onFocus)
HXLINE( 757)				_gthis->_caretInfo->__SetField(HX_("visible",72,78,24,a3),!(( (bool)(_gthis->_caretInfo->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )),hx::paccDynamic);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 756)			this->_caretInfo->__SetField(HX_("timerId",00,3b,f9,d8),::kha::Scheduler_obj::addTimeTask( ::Dynamic(new _hx_Closure_0(_gthis)),( (Float)(0) ),((Float).4),null()),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,onFocus,(void))

void TextField_obj::blur(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_763_blur)
HXDLIN( 763)		this->onBlur();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,blur,(void))

void TextField_obj::onBlur(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_766_onBlur)
HXLINE( 767)		::kha::System_obj::notifyOnCutCopyPaste(this->onCut_dyn(),this->onCopy_dyn(),this->onPaste_dyn());
HXLINE( 769)		::kha::Scheduler_obj::removeTimeTask(( (int)(this->_caretInfo->__Field(HX_("timerId",00,3b,f9,d8),hx::paccDynamic)) ));
HXLINE( 770)		this->_caretInfo->__SetField(HX_("timerId",00,3b,f9,d8),-1,hx::paccDynamic);
HXLINE( 771)		this->_caretInfo->__SetField(HX_("visible",72,78,24,a3),false,hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,onBlur,(void))

void TextField_obj::splitLines(){
            	HX_GC_STACKFRAME(&_hx_pos_900e02585355f002_777_splitLines)
HXLINE( 778)		this->_hx_set__lines(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE( 780)		bool _hx_tmp;
HXDLIN( 780)		if (hx::IsNotNull( this->get_text() )) {
HXLINE( 780)			_hx_tmp = hx::IsNull( this->_font );
            		}
            		else {
HXLINE( 780)			_hx_tmp = true;
            		}
HXDLIN( 780)		if (_hx_tmp) {
HXLINE( 781)			return;
            		}
HXLINE( 784)		if ((this->get_multiline() == false)) {
HXLINE( 785)			::String text = this->get_text().split(HX_("\n",0a,00,00,00))->join(HX_("",00,00,00,00)).split(HX_("\r",0d,00,00,00))->join(HX_("",00,00,00,00));
HXLINE( 786)			if ((this->get_password() == true)) {
HXLINE( 787)				::String passwordText = HX_("",00,00,00,00);
HXLINE( 788)				{
HXLINE( 788)					int _g = 0;
HXDLIN( 788)					int _g1 = text.length;
HXDLIN( 788)					while((_g < _g1)){
HXLINE( 788)						_g = (_g + 1);
HXDLIN( 788)						int i = (_g - 1);
HXLINE( 789)						passwordText = (passwordText + HX_("*",2a,00,00,00));
            					}
            				}
HXLINE( 791)				text = passwordText;
            			}
HXLINE( 793)			::Array< ::Dynamic> _hx_tmp1 = this->_lines;
HXDLIN( 793)			_hx_tmp1->push(::kha::StringExtensions_obj::toCharArray(text));
            		}
            		else {
HXLINE( 794)			if ((this->get_wordWrap() == false)) {
HXLINE( 795)				::Array< ::String > arr = ::StringTools_obj::replace(::StringTools_obj::replace(this->get_text(),HX_("\r\n",5d,0b,00,00),HX_("\n",0a,00,00,00)),HX_("\r",0d,00,00,00),HX_("\n",0a,00,00,00)).split(HX_("\n",0a,00,00,00));
HXLINE( 796)				{
HXLINE( 796)					int _g2 = 0;
HXDLIN( 796)					while((_g2 < arr->length)){
HXLINE( 796)						::String a = arr->__get(_g2);
HXDLIN( 796)						_g2 = (_g2 + 1);
HXLINE( 797)						::Array< ::Dynamic> _hx_tmp2 = this->_lines;
HXDLIN( 797)						_hx_tmp2->push(::kha::StringExtensions_obj::toCharArray(a));
            					}
            				}
            			}
            			else {
HXLINE( 799)				if ((this->get_wordWrap() == true)) {
HXLINE( 800)					Float totalWidth = ( (Float)(0) );
HXLINE( 801)					int spaceIndex = -1;
HXLINE( 802)					int start = 0;
HXLINE( 803)					{
HXLINE( 803)						int _g3 = 0;
HXDLIN( 803)						int _g11 = this->get_text().length;
HXDLIN( 803)						while((_g3 < _g11)){
HXLINE( 803)							_g3 = (_g3 + 1);
HXDLIN( 803)							int i1 = (_g3 - 1);
HXLINE( 804)							 ::Dynamic charCode = this->get_text().charCodeAt(i1);
HXLINE( 805)							if (hx::IsEq( charCode,32 )) {
HXLINE( 806)								spaceIndex = i1;
            							}
            							else {
HXLINE( 807)								bool _hx_tmp3;
HXDLIN( 807)								if (hx::IsNotEq( charCode,10 )) {
HXLINE( 807)									_hx_tmp3 = hx::IsEq( charCode,13 );
            								}
            								else {
HXLINE( 807)									_hx_tmp3 = true;
            								}
HXDLIN( 807)								if (_hx_tmp3) {
HXLINE( 808)									::Array< ::Dynamic> _hx_tmp4 = this->_lines;
HXDLIN( 808)									_hx_tmp4->push(::kha::StringExtensions_obj::toCharArray(this->get_text().substring(start,i1)));
HXLINE( 809)									start = (i1 + 1);
HXLINE( 810)									totalWidth = ( (Float)(0) );
HXLINE( 811)									spaceIndex = -1;
HXLINE( 812)									continue;
            								}
            							}
HXLINE( 815)							 ::kha::Kravur charWidth = this->get_font();
HXDLIN( 815)							Float charWidth1 = charWidth->widthOfCharacters(this->get_fontSize(),::Array_obj< int >::__new(1)->init(0,charCode),0,1);
HXLINE( 816)							if (((totalWidth + charWidth1) > this->get_width())) {
HXLINE( 817)								::Array< ::Dynamic> _hx_tmp5 = this->_lines;
HXDLIN( 817)								_hx_tmp5->push(::kha::StringExtensions_obj::toCharArray(this->get_text().substring(start,spaceIndex)));
HXLINE( 818)								start = (spaceIndex + 1);
HXLINE( 819)								::Array< int > remain = ::kha::StringExtensions_obj::toCharArray(this->get_text().substring((spaceIndex + 1),(i1 + 1)));
HXLINE( 820)								 ::kha::Kravur totalWidth1 = this->get_font();
HXDLIN( 820)								int totalWidth2 = this->get_fontSize();
HXDLIN( 820)								totalWidth = totalWidth1->widthOfCharacters(totalWidth2,remain,0,remain->length);
            							}
            							else {
HXLINE( 822)								totalWidth = (totalWidth + charWidth1);
            							}
            						}
            					}
HXLINE( 826)					if ((start < this->get_text().length)) {
HXLINE( 827)						::Array< ::Dynamic> _hx_tmp6 = this->_lines;
HXDLIN( 827)						::String _hx_tmp7 = this->get_text();
HXDLIN( 827)						_hx_tmp6->push(::kha::StringExtensions_obj::toCharArray(_hx_tmp7.substring(start,this->get_text().length)));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,splitLines,(void))

void TextField_obj::deleteCharsFromCaret(hx::Null< int >  __o_count,hx::Null< bool >  __o_moveCaret){
            		int count = __o_count.Default(1);
            		bool moveCaret = __o_moveCaret.Default(true);
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_833_deleteCharsFromCaret)
HXDLIN( 833)		this->deleteChars(count,this->_caretInfo,moveCaret);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,deleteCharsFromCaret,(void))

void TextField_obj::deleteChars(int count, ::Dynamic from,hx::Null< bool >  __o_moveCaret){
            		bool moveCaret = __o_moveCaret.Default(true);
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_836_deleteChars)
HXLINE( 837)		int fromIndex = this->posToIndex(from);
HXLINE( 838)		int toIndex = (fromIndex + count);
HXLINE( 840)		int startIndex = fromIndex;
HXLINE( 841)		int endIndex = toIndex;
HXLINE( 842)		if ((startIndex > endIndex)) {
HXLINE( 843)			startIndex = toIndex;
HXLINE( 844)			endIndex = fromIndex;
            		}
HXLINE( 847)		if ((endIndex > this->get_text().length)) {
HXLINE( 848)			endIndex = this->get_text().length;
            		}
HXLINE( 850)		::String before = this->get_text().substring(0,startIndex);
HXLINE( 851)		::String after = this->get_text();
HXDLIN( 851)		::String after1 = after.substring(endIndex,this->get_text().length);
HXLINE( 853)		this->set_text((before + after1));
HXLINE( 854)		if ((moveCaret == true)) {
HXLINE( 855)			this->set_caretPosition((endIndex + count));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,deleteChars,(void))

int TextField_obj::posToIndex( ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_859_posToIndex)
HXLINE( 860)		int index = 0;
HXLINE( 861)		int i = 0;
HXLINE( 862)		{
HXLINE( 862)			int _g = 0;
HXDLIN( 862)			::Array< ::Dynamic> _g1 = this->_lines;
HXDLIN( 862)			while((_g < _g1->length)){
HXLINE( 862)				::Array< int > line = _g1->__get(_g).StaticCast< ::Array< int > >();
HXDLIN( 862)				_g = (_g + 1);
HXLINE( 863)				if (hx::IsEq( i,pos->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) )) {
HXLINE( 864)					int column = ( (int)(pos->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) );
HXLINE( 865)					if (hx::IsLess( line->length,pos->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic) )) {
HXLINE( 866)						column = (line->length - 1);
            					}
HXLINE( 868)					index = (index + column);
HXLINE( 869)					goto _hx_goto_78;
            				}
            				else {
HXLINE( 871)					index = (index + (line->length + 1));
            				}
HXLINE( 873)				i = (i + 1);
            			}
            			_hx_goto_78:;
            		}
HXLINE( 876)		return index;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,posToIndex,return )

 ::Dynamic TextField_obj::indexToPos(int index){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_879_indexToPos)
HXLINE( 880)		 ::Dynamic pos =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("column",d6,4e,8b,c6),0)
            			->setFixed(1,HX_("row",1a,e2,56,00),0));
HXLINE( 882)		int count = 0;
HXLINE( 883)		{
HXLINE( 883)			int _g = 0;
HXDLIN( 883)			::Array< ::Dynamic> _g1 = this->_lines;
HXDLIN( 883)			while((_g < _g1->length)){
HXLINE( 883)				::Array< int > line = _g1->__get(_g).StaticCast< ::Array< int > >();
HXDLIN( 883)				_g = (_g + 1);
HXLINE( 884)				if ((index <= line->length)) {
HXLINE( 885)					pos->__SetField(HX_("column",d6,4e,8b,c6),index,hx::paccDynamic);
HXLINE( 886)					goto _hx_goto_80;
            				}
            				else {
HXLINE( 888)					index = (index - (line->length + 1));
HXLINE( 889)					hx::FieldRef((pos).mPtr,HX_("row",1a,e2,56,00))++;
            				}
            			}
            			_hx_goto_80:;
            		}
HXLINE( 893)		return pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,indexToPos,return )

void TextField_obj::scrollToCaret(){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_896_scrollToCaret)
HXLINE( 897)		this->ensureRowVisible(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) ));
HXLINE( 899)		int _hx_tmp = this->_lines->length;
HXDLIN( 899)		Float _hx_tmp1 = this->get_height();
HXDLIN( 899)		 ::kha::Kravur _hx_tmp2 = this->get_font();
HXDLIN( 899)		if ((_hx_tmp < ::Math_obj::round((_hx_tmp1 / _hx_tmp2->height(this->get_fontSize()))))) {
HXLINE( 900)			this->scrollTop = 0;
            		}
HXLINE( 903)		::Array< int > line = this->_lines->__get(( (int)(this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic)) )).StaticCast< ::Array< int > >();
HXLINE( 904)		Float _hx_tmp3 = this->get_caretLeft();
HXDLIN( 904)		Float _hx_tmp4 = (_hx_tmp3 - this->left);
HXDLIN( 904)		if ((_hx_tmp4 > this->get_width())) {
HXLINE( 905)			 ::haxe::ui::backend::kha::TextField _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 905)			Float _hx_tmp6 = _hx_tmp5->scrollLeft;
HXDLIN( 905)			Float _hx_tmp7 = this->get_caretLeft();
HXDLIN( 905)			Float _hx_tmp8 = (_hx_tmp7 - this->left);
HXDLIN( 905)			_hx_tmp5->scrollLeft = (_hx_tmp6 + ((_hx_tmp8 - this->get_width()) + 50));
HXLINE( 907)			Float _hx_tmp9 = this->scrollLeft;
HXDLIN( 907)			Float _hx_tmp10 = (_hx_tmp9 + this->get_width());
HXDLIN( 907)			 ::kha::Kravur _hx_tmp11 = this->get_font();
HXDLIN( 907)			int _hx_tmp12 = this->get_fontSize();
HXDLIN( 907)			if ((_hx_tmp10 > _hx_tmp11->widthOfCharacters(_hx_tmp12,line,0,line->length))) {
HXLINE( 908)				 ::kha::Kravur _hx_tmp13 = this->get_font();
HXDLIN( 908)				int _hx_tmp14 = this->get_fontSize();
HXDLIN( 908)				Float _hx_tmp15 = _hx_tmp13->widthOfCharacters(_hx_tmp14,line,0,line->length);
HXDLIN( 908)				Float _hx_tmp16 = (_hx_tmp15 - this->get_width());
HXDLIN( 908)				this->scrollLeft = (_hx_tmp16 + this->get_caretWidth());
HXLINE( 909)				if ((this->scrollLeft < 0)) {
HXLINE( 910)					this->scrollLeft = ( (Float)(0) );
            				}
            			}
            		}
            		else {
HXLINE( 913)			Float _hx_tmp17 = this->get_caretLeft();
HXDLIN( 913)			if (((_hx_tmp17 - this->left) < 0)) {
HXLINE( 914)				 ::haxe::ui::backend::kha::TextField _hx_tmp18 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 914)				Float _hx_tmp19 = _hx_tmp18->scrollLeft;
HXDLIN( 914)				Float _hx_tmp20 = this->get_caretLeft();
HXDLIN( 914)				_hx_tmp18->scrollLeft = (_hx_tmp19 + ((_hx_tmp20 - this->left) - ( (Float)(50) )));
HXLINE( 916)				bool _hx_tmp21;
HXDLIN( 916)				if (!((this->scrollLeft < 0))) {
HXLINE( 916)					 ::kha::Kravur _hx_tmp22 = this->get_font();
HXDLIN( 916)					int _hx_tmp23 = this->get_fontSize();
HXDLIN( 916)					Float _hx_tmp24 = _hx_tmp22->widthOfCharacters(_hx_tmp23,line,0,line->length);
HXDLIN( 916)					_hx_tmp21 = (_hx_tmp24 <= this->get_width());
            				}
            				else {
HXLINE( 916)					_hx_tmp21 = true;
            				}
HXDLIN( 916)				if (_hx_tmp21) {
HXLINE( 917)					this->scrollLeft = ( (Float)(0) );
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,scrollToCaret,(void))

void TextField_obj::ensureRowVisible(int row){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_922_ensureRowVisible)
HXLINE( 923)		bool _hx_tmp;
HXDLIN( 923)		if ((row >= this->scrollTop)) {
HXLINE( 923)			int _hx_tmp1 = this->scrollTop;
HXDLIN( 923)			Float _hx_tmp2 = this->get_height();
HXDLIN( 923)			 ::kha::Kravur _hx_tmp3 = this->get_font();
HXDLIN( 923)			_hx_tmp = (row <= ((_hx_tmp1 + ::Math_obj::round((_hx_tmp2 / _hx_tmp3->height(this->get_fontSize())))) - 1));
            		}
            		else {
HXLINE( 923)			_hx_tmp = false;
            		}
HXDLIN( 923)		if (_hx_tmp) {
HXLINE( 924)			return;
            		}
HXLINE( 927)		int _hx_tmp4 = this->scrollTop;
HXDLIN( 927)		Float _hx_tmp5 = this->get_height();
HXDLIN( 927)		 ::kha::Kravur _hx_tmp6 = this->get_font();
HXDLIN( 927)		if ((row < (_hx_tmp4 + ::Math_obj::round((_hx_tmp5 / _hx_tmp6->height(this->get_fontSize())))))) {
HXLINE( 928)			this->scrollTop = row;
            		}
            		else {
HXLINE( 930)			Float _hx_tmp7 = this->get_height();
HXDLIN( 930)			 ::kha::Kravur _hx_tmp8 = this->get_font();
HXDLIN( 930)			this->scrollTop = ((row - ::Math_obj::round((_hx_tmp7 / _hx_tmp8->height(this->get_fontSize())))) + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,ensureRowVisible,(void))

int TextField_obj::findClosestColumn( ::Dynamic origin,int offset){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_934_findClosestColumn)
HXLINE( 935)		int closestColumn = ( (int)(origin->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) );
HXLINE( 936)		::Array< int > offsetLine = this->_lines->__get(( (int)((origin->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) + offset)) )).StaticCast< ::Array< int > >();
HXLINE( 937)		if ((closestColumn > offsetLine->length)) {
HXLINE( 938)			closestColumn = offsetLine->length;
            		}
HXLINE( 940)		return closestColumn;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,findClosestColumn,return )

void TextField_obj::render( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_946_render)
HXLINE( 947)		if (hx::IsNull( this->_font )) {
HXLINE( 948)			return;
            		}
HXLINE( 951)		g->set_color(this->backgroundColor);
HXLINE( 952)		Float _hx_tmp = this->left;
HXDLIN( 952)		Float _hx_tmp1 = this->top;
HXDLIN( 952)		Float _hx_tmp2 = this->get_width();
HXDLIN( 952)		g->fillRect(_hx_tmp,_hx_tmp1,_hx_tmp2,this->get_height());
HXLINE( 954)		int _hx_tmp3 = ::Math_obj::round(this->left);
HXDLIN( 954)		int _hx_tmp4 = ::Math_obj::round(this->top);
HXDLIN( 954)		int _hx_tmp5 = ::Math_obj::round(this->get_width());
HXDLIN( 954)		g->scissor(_hx_tmp3,_hx_tmp4,_hx_tmp5,::Math_obj::round(this->get_height()));
HXLINE( 956)		g->set_font(this->get_font());
HXLINE( 957)		g->set_fontSize(this->get_fontSize());
HXLINE( 959)		Float xpos = (this->left - this->scrollLeft);
HXLINE( 960)		Float ypos = this->top;
HXLINE( 962)		int start = this->scrollTop;
HXLINE( 963)		Float end = this->get_height();
HXDLIN( 963)		 ::kha::Kravur end1 = this->get_font();
HXDLIN( 963)		int end2 = (start + ::Math_obj::round((end / end1->height(this->get_fontSize()))));
HXLINE( 965)		if ((start > 0)) {
HXLINE( 966)			start = (start - 1);
HXLINE( 967)			 ::kha::Kravur ypos1 = this->get_font();
HXDLIN( 967)			ypos = (ypos - ypos1->height(this->get_fontSize()));
            		}
HXLINE( 969)		if ((end2 > this->_lines->length)) {
HXLINE( 970)			end2 = this->_lines->length;
            		}
HXLINE( 972)		if ((end2 < this->_lines->length)) {
HXLINE( 973)			end2 = (end2 + 1);
            		}
HXLINE( 976)		{
HXLINE( 976)			int _g = start;
HXDLIN( 976)			int _g1 = end2;
HXDLIN( 976)			while((_g < _g1)){
HXLINE( 976)				_g = (_g + 1);
HXDLIN( 976)				int i = (_g - 1);
HXLINE( 977)				xpos = (this->left - this->scrollLeft);
HXLINE( 978)				::Array< int > line = this->_lines->__get(i).StaticCast< ::Array< int > >();
HXLINE( 980)				bool _hx_tmp6;
HXDLIN( 980)				if (hx::IsGreaterEq( i, ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) )) {
HXLINE( 980)					_hx_tmp6 = hx::IsLessEq( i, ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) );
            				}
            				else {
HXLINE( 980)					_hx_tmp6 = false;
            				}
HXDLIN( 980)				if (_hx_tmp6) {
HXLINE( 981)					bool _hx_tmp7;
HXDLIN( 981)					if (hx::IsEq( i, ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) )) {
HXLINE( 981)						_hx_tmp7 = hx::IsEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic), ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) );
            					}
            					else {
HXLINE( 981)						_hx_tmp7 = false;
            					}
HXDLIN( 981)					if (_hx_tmp7) {
HXLINE( 982)						g->set_color(this->textColor);
HXLINE( 983)						g->drawCharacters(line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),xpos,ypos);
HXLINE( 984)						 ::kha::Kravur xpos1 = this->get_font();
HXDLIN( 984)						int xpos2 = this->get_fontSize();
HXDLIN( 984)						xpos = (xpos + xpos1->widthOfCharacters(xpos2,line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )));
HXLINE( 986)						g->set_color(this->selectedBackgroundColor);
HXLINE( 987)						 ::kha::Kravur _hx_tmp8 = this->get_font();
HXDLIN( 987)						int _hx_tmp9 = this->get_fontSize();
HXDLIN( 987)						Float _hx_tmp10 = _hx_tmp8->widthOfCharacters(_hx_tmp9,line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),(( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ) - ( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )));
HXDLIN( 987)						 ::kha::Kravur _hx_tmp11 = this->get_font();
HXDLIN( 987)						g->fillRect(xpos,ypos,_hx_tmp10,_hx_tmp11->height(this->get_fontSize()));
HXLINE( 989)						g->set_color(this->selectedTextColor);
HXLINE( 990)						g->drawCharacters(line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),(( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ) - ( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )),xpos,ypos);
HXLINE( 991)						 ::kha::Kravur xpos3 = this->get_font();
HXDLIN( 991)						int xpos4 = this->get_fontSize();
HXDLIN( 991)						xpos = (xpos + xpos3->widthOfCharacters(xpos4,line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),(( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ) - ( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ))));
HXLINE( 993)						g->set_color(this->textColor);
HXLINE( 994)						g->drawCharacters(line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),line->length,xpos,ypos);
            					}
            					else {
HXLINE( 995)						bool _hx_tmp12;
HXDLIN( 995)						if (hx::IsEq( i, ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) )) {
HXLINE( 995)							_hx_tmp12 = hx::IsNotEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic), ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) );
            						}
            						else {
HXLINE( 995)							_hx_tmp12 = false;
            						}
HXDLIN( 995)						if (_hx_tmp12) {
HXLINE( 996)							g->set_color(this->textColor);
HXLINE( 997)							g->drawCharacters(line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),xpos,ypos);
HXLINE( 998)							 ::kha::Kravur xpos5 = this->get_font();
HXDLIN( 998)							int xpos6 = this->get_fontSize();
HXDLIN( 998)							xpos = (xpos + xpos5->widthOfCharacters(xpos6,line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )));
HXLINE(1000)							g->set_color(this->selectedBackgroundColor);
HXLINE(1001)							 ::kha::Kravur _hx_tmp13 = this->get_font();
HXDLIN(1001)							int _hx_tmp14 = this->get_fontSize();
HXDLIN(1001)							Float _hx_tmp15 = _hx_tmp13->widthOfCharacters(_hx_tmp14,line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),(line->length - ( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )));
HXDLIN(1001)							 ::kha::Kravur _hx_tmp16 = this->get_font();
HXDLIN(1001)							g->fillRect(xpos,ypos,_hx_tmp15,_hx_tmp16->height(this->get_fontSize()));
HXLINE(1003)							g->set_color(this->selectedTextColor);
HXLINE(1004)							g->drawCharacters(line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),(line->length - ( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )),xpos,ypos);
            						}
            						else {
HXLINE(1005)							bool _hx_tmp17;
HXDLIN(1005)							if (hx::IsEq( i, ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) )) {
HXLINE(1005)								_hx_tmp17 = hx::IsNotEq(  ::Dynamic(this->_selectionInfo->__Field(HX_("start",62,74,0b,84),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic), ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic) );
            							}
            							else {
HXLINE(1005)								_hx_tmp17 = false;
            							}
HXDLIN(1005)							if (_hx_tmp17) {
HXLINE(1006)								g->set_color(this->selectedBackgroundColor);
HXLINE(1007)								 ::kha::Kravur _hx_tmp18 = this->get_font();
HXDLIN(1007)								int _hx_tmp19 = this->get_fontSize();
HXDLIN(1007)								Float _hx_tmp20 = _hx_tmp18->widthOfCharacters(_hx_tmp19,line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ));
HXDLIN(1007)								 ::kha::Kravur _hx_tmp21 = this->get_font();
HXDLIN(1007)								g->fillRect(xpos,ypos,_hx_tmp20,_hx_tmp21->height(this->get_fontSize()));
HXLINE(1009)								g->set_color(this->selectedTextColor);
HXLINE(1010)								g->drawCharacters(line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),xpos,ypos);
HXLINE(1011)								 ::kha::Kravur xpos7 = this->get_font();
HXDLIN(1011)								int xpos8 = this->get_fontSize();
HXDLIN(1011)								xpos = (xpos + xpos7->widthOfCharacters(xpos8,line,0,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )));
HXLINE(1013)								g->set_color(this->textColor);
HXLINE(1014)								g->drawCharacters(line,( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) ),(line->length - ( (int)( ::Dynamic(this->_selectionInfo->__Field(HX_("end",db,03,4d,00),hx::paccDynamic))->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic)) )),xpos,ypos);
            							}
            							else {
HXLINE(1016)								g->set_color(this->selectedBackgroundColor);
HXLINE(1017)								 ::kha::Kravur _hx_tmp22 = this->get_font();
HXDLIN(1017)								int _hx_tmp23 = this->get_fontSize();
HXDLIN(1017)								Float _hx_tmp24 = _hx_tmp22->widthOfCharacters(_hx_tmp23,line,0,line->length);
HXDLIN(1017)								 ::kha::Kravur _hx_tmp25 = this->get_font();
HXDLIN(1017)								g->fillRect(xpos,ypos,_hx_tmp24,_hx_tmp25->height(this->get_fontSize()));
HXLINE(1019)								g->set_color(this->selectedTextColor);
HXLINE(1020)								g->drawCharacters(line,0,line->length,xpos,ypos);
            							}
            						}
            					}
            				}
            				else {
HXLINE(1024)					g->set_color(this->textColor);
HXLINE(1025)					g->drawCharacters(line,0,line->length,xpos,ypos);
            				}
HXLINE(1028)				 ::kha::Kravur ypos2 = this->get_font();
HXDLIN(1028)				ypos = (ypos + ypos2->height(this->get_fontSize()));
            			}
            		}
HXLINE(1031)		bool _hx_tmp26;
HXDLIN(1031)		bool _hx_tmp27;
HXDLIN(1031)		if (hx::IsGreater( this->_caretInfo->__Field(HX_("row",1a,e2,56,00),hx::paccDynamic),-1 )) {
HXLINE(1031)			_hx_tmp27 = hx::IsGreater( this->_caretInfo->__Field(HX_("column",d6,4e,8b,c6),hx::paccDynamic),-1 );
            		}
            		else {
HXLINE(1031)			_hx_tmp27 = false;
            		}
HXDLIN(1031)		if (_hx_tmp27) {
HXLINE(1031)			if (hx::IsNotEq( this->_caretInfo->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic),true )) {
HXLINE(1031)				_hx_tmp26 = hx::IsEq( this->_caretInfo->__Field(HX_("force",eb,b1,94,04),hx::paccDynamic),true );
            			}
            			else {
HXLINE(1031)				_hx_tmp26 = true;
            			}
            		}
            		else {
HXLINE(1031)			_hx_tmp26 = false;
            		}
HXDLIN(1031)		if (_hx_tmp26) {
HXLINE(1032)			g->set_color(this->textColor);
HXLINE(1033)			Float _hx_tmp28 = this->get_caretLeft();
HXDLIN(1033)			Float _hx_tmp29 = this->get_caretTop();
HXDLIN(1033)			Float _hx_tmp30 = this->get_caretWidth();
HXDLIN(1033)			g->fillRect(_hx_tmp28,_hx_tmp29,_hx_tmp30,this->get_caretHeight());
            		}
HXLINE(1036)		g->disableScissor();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,render,(void))

int TextField_obj::SPACE;

int TextField_obj::CR;

int TextField_obj::LF;

 ::haxe::ui::backend::kha::TextField TextField_obj::_currentFocus;

int TextField_obj::REPEAT_TIMER_GROUP;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "haxe.ui.backend.kha.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_selectionInfo,"_selectionInfo");
	HX_MARK_MEMBER_NAME(_caretInfo,"_caretInfo");
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(editable,"editable");
	HX_MARK_MEMBER_NAME(textColor,"textColor");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(selectedTextColor,"selectedTextColor");
	HX_MARK_MEMBER_NAME(selectedBackgroundColor,"selectedBackgroundColor");
	HX_MARK_MEMBER_NAME(scrollTop,"scrollTop");
	HX_MARK_MEMBER_NAME(scrollLeft,"scrollLeft");
	HX_MARK_MEMBER_NAME(_textChanged,"_textChanged");
	HX_MARK_MEMBER_NAME(_caretMoved,"_caretMoved");
	HX_MARK_MEMBER_NAME(_lines,"_lines");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_password,"_password");
	HX_MARK_MEMBER_NAME(_font,"_font");
	HX_MARK_MEMBER_NAME(_fontSize,"_fontSize");
	HX_MARK_MEMBER_NAME(_multiline,"_multiline");
	HX_MARK_MEMBER_NAME(_wordWrap,"_wordWrap");
	HX_MARK_MEMBER_NAME(_autoHeight,"_autoHeight");
	HX_MARK_MEMBER_NAME(maxVisibleLines,"maxVisibleLines");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(hasSelection,"hasSelection");
	HX_MARK_MEMBER_NAME(selectionStart,"selectionStart");
	HX_MARK_MEMBER_NAME(selectionEnd,"selectionEnd");
	HX_MARK_MEMBER_NAME(isActive,"isActive");
	HX_MARK_MEMBER_NAME(requiredWidth,"requiredWidth");
	HX_MARK_MEMBER_NAME(requiredHeight,"requiredHeight");
	HX_MARK_MEMBER_NAME(caretLeft,"caretLeft");
	HX_MARK_MEMBER_NAME(caretTop,"caretTop");
	HX_MARK_MEMBER_NAME(caretWidth,"caretWidth");
	HX_MARK_MEMBER_NAME(caretHeight,"caretHeight");
	HX_MARK_MEMBER_NAME(_repeatTimerId,"_repeatTimerId");
	HX_MARK_MEMBER_NAME(_downKey,"_downKey");
	HX_MARK_MEMBER_NAME(_shift,"_shift");
	HX_MARK_MEMBER_NAME(_ctrl,"_ctrl");
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_selectionInfo,"_selectionInfo");
	HX_VISIT_MEMBER_NAME(_caretInfo,"_caretInfo");
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(editable,"editable");
	HX_VISIT_MEMBER_NAME(textColor,"textColor");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(selectedTextColor,"selectedTextColor");
	HX_VISIT_MEMBER_NAME(selectedBackgroundColor,"selectedBackgroundColor");
	HX_VISIT_MEMBER_NAME(scrollTop,"scrollTop");
	HX_VISIT_MEMBER_NAME(scrollLeft,"scrollLeft");
	HX_VISIT_MEMBER_NAME(_textChanged,"_textChanged");
	HX_VISIT_MEMBER_NAME(_caretMoved,"_caretMoved");
	HX_VISIT_MEMBER_NAME(_lines,"_lines");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_password,"_password");
	HX_VISIT_MEMBER_NAME(_font,"_font");
	HX_VISIT_MEMBER_NAME(_fontSize,"_fontSize");
	HX_VISIT_MEMBER_NAME(_multiline,"_multiline");
	HX_VISIT_MEMBER_NAME(_wordWrap,"_wordWrap");
	HX_VISIT_MEMBER_NAME(_autoHeight,"_autoHeight");
	HX_VISIT_MEMBER_NAME(maxVisibleLines,"maxVisibleLines");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(hasSelection,"hasSelection");
	HX_VISIT_MEMBER_NAME(selectionStart,"selectionStart");
	HX_VISIT_MEMBER_NAME(selectionEnd,"selectionEnd");
	HX_VISIT_MEMBER_NAME(isActive,"isActive");
	HX_VISIT_MEMBER_NAME(requiredWidth,"requiredWidth");
	HX_VISIT_MEMBER_NAME(requiredHeight,"requiredHeight");
	HX_VISIT_MEMBER_NAME(caretLeft,"caretLeft");
	HX_VISIT_MEMBER_NAME(caretTop,"caretTop");
	HX_VISIT_MEMBER_NAME(caretWidth,"caretWidth");
	HX_VISIT_MEMBER_NAME(caretHeight,"caretHeight");
	HX_VISIT_MEMBER_NAME(_repeatTimerId,"_repeatTimerId");
	HX_VISIT_MEMBER_NAME(_downKey,"_downKey");
	HX_VISIT_MEMBER_NAME(_shift,"_shift");
	HX_VISIT_MEMBER_NAME(_ctrl,"_ctrl");
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_font() ); }
		if (HX_FIELD_EQ(inName,"blur") ) { return hx::Val( blur_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return hx::Val( _text ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"_font") ) { return hx::Val( _font ); }
		if (HX_FIELD_EQ(inName,"_ctrl") ) { return hx::Val( _ctrl ); }
		if (HX_FIELD_EQ(inName,"onCut") ) { return hx::Val( onCut_dyn() ); }
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn() ); }
		if (HX_FIELD_EQ(inName,"_lines") ) { return hx::Val( _lines ); }
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"recalc") ) { return hx::Val( recalc_dyn() ); }
		if (HX_FIELD_EQ(inName,"_shift") ) { return hx::Val( _shift ); }
		if (HX_FIELD_EQ(inName,"onCopy") ) { return hx::Val( onCopy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onBlur") ) { return hx::Val( onBlur_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"onPaste") ) { return hx::Val( onPaste_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return hx::Val( onKeyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { return hx::Val( editable ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"password") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_password() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fontSize() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numLines() : numLines ); }
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( inCallProp == hx::paccAlways ? get_isActive() : isActive ); }
		if (HX_FIELD_EQ(inName,"inBounds") ) { return hx::Val( inBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"caretTop") ) { return hx::Val( inCallProp == hx::paccAlways ? get_caretTop() : caretTop ); }
		if (HX_FIELD_EQ(inName,"_downKey") ) { return hx::Val( _downKey ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textColor") ) { return hx::Val( textColor ); }
		if (HX_FIELD_EQ(inName,"scrollTop") ) { return hx::Val( scrollTop ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"_password") ) { return hx::Val( _password ); }
		if (HX_FIELD_EQ(inName,"_fontSize") ) { return hx::Val( _fontSize ); }
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"_wordWrap") ) { return hx::Val( _wordWrap ); }
		if (HX_FIELD_EQ(inName,"caretLeft") ) { return hx::Val( inCallProp == hx::paccAlways ? get_caretLeft() : caretLeft ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_caretInfo") ) { return hx::Val( _caretInfo ); }
		if (HX_FIELD_EQ(inName,"scrollLeft") ) { return hx::Val( scrollLeft ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"_multiline") ) { return hx::Val( _multiline ); }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoHeight() ); }
		if (HX_FIELD_EQ(inName,"insertText") ) { return hx::Val( insertText_dyn() ); }
		if (HX_FIELD_EQ(inName,"caretWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_caretWidth() : caretWidth ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"splitLines") ) { return hx::Val( splitLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"posToIndex") ) { return hx::Val( posToIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"indexToPos") ) { return hx::Val( indexToPos_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_caretMoved") ) { return hx::Val( _caretMoved ); }
		if (HX_FIELD_EQ(inName,"_autoHeight") ) { return hx::Val( _autoHeight ); }
		if (HX_FIELD_EQ(inName,"caretHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_caretHeight() : caretHeight ); }
		if (HX_FIELD_EQ(inName,"onKeyRepeat") ) { return hx::Val( onKeyRepeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteChars") ) { return hx::Val( deleteChars_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_textChanged") ) { return hx::Val( _textChanged ); }
		if (HX_FIELD_EQ(inName,"get_password") ) { return hx::Val( get_password_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_password") ) { return hx::Val( set_password_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fontSize") ) { return hx::Val( get_fontSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fontSize") ) { return hx::Val( set_fontSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasSelection") ) { return hx::Val( inCallProp == hx::paccAlways ? get_hasSelection() : hasSelection ); }
		if (HX_FIELD_EQ(inName,"selectionEnd") ) { return hx::Val( inCallProp == hx::paccAlways ? get_selectionEnd() : selectionEnd ); }
		if (HX_FIELD_EQ(inName,"get_isActive") ) { return hx::Val( get_isActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretTop") ) { return hx::Val( get_caretTop_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"caretPosition") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_caretPosition() ); }
		if (HX_FIELD_EQ(inName,"requiredWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_requiredWidth() : requiredWidth ); }
		if (HX_FIELD_EQ(inName,"moveCaretLeft") ) { return hx::Val( moveCaretLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretLeft") ) { return hx::Val( get_caretLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollToCaret") ) { return hx::Val( scrollToCaret_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_selectionInfo") ) { return hx::Val( _selectionInfo ); }
		if (HX_FIELD_EQ(inName,"get_autoHeight") ) { return hx::Val( get_autoHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoHeight") ) { return hx::Val( set_autoHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSelection") ) { return hx::Val( resetSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectionStart") ) { return hx::Val( inCallProp == hx::paccAlways ? get_selectionStart() : selectionStart ); }
		if (HX_FIELD_EQ(inName,"requiredHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_requiredHeight() : requiredHeight ); }
		if (HX_FIELD_EQ(inName,"moveCaretRight") ) { return hx::Val( moveCaretRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretWidth") ) { return hx::Val( get_caretWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_repeatTimerId") ) { return hx::Val( _repeatTimerId ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"maxVisibleLines") ) { return hx::Val( inCallProp == hx::paccAlways ? get_maxVisibleLines() : maxVisibleLines ); }
		if (HX_FIELD_EQ(inName,"get_caretHeight") ) { return hx::Val( get_caretHeight_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"notifyCaretMoved") ) { return hx::Val( notifyCaretMoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_hasSelection") ) { return hx::Val( get_hasSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEnd") ) { return hx::Val( get_selectionEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"ensureRowVisible") ) { return hx::Val( ensureRowVisible_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"selectedTextColor") ) { return hx::Val( selectedTextColor ); }
		if (HX_FIELD_EQ(inName,"notifyTextChanged") ) { return hx::Val( notifyTextChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretPosition") ) { return hx::Val( get_caretPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_caretPosition") ) { return hx::Val( set_caretPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_requiredWidth") ) { return hx::Val( get_requiredWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"findClosestColumn") ) { return hx::Val( findClosestColumn_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_selectionStart") ) { return hx::Val( get_selectionStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_requiredHeight") ) { return hx::Val( get_requiredHeight_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_maxVisibleLines") ) { return hx::Val( get_maxVisibleLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"performKeyOperation") ) { return hx::Val( performKeyOperation_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deleteCharsFromCaret") ) { return hx::Val( deleteCharsFromCaret_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"selectedBackgroundColor") ) { return hx::Val( selectedBackgroundColor ); }
		if (HX_FIELD_EQ(inName,"handleNegativeSelection") ) { return hx::Val( handleNegativeSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"handlePositiveSelection") ) { return hx::Val( handlePositiveSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"_currentFocus") ) { outValue = ( _currentFocus ); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast<  ::kha::Kravur >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _hx_set__text(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_font") ) { _hx_set__font(HX_CTX_GET,inValue.Cast<  ::kha::Kravur >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_ctrl") ) { _ctrl=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_lines") ) { _hx_set__lines(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_shift") ) { _shift=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { editable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"password") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_password(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fontSize(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isActive") ) { isActive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretTop") ) { caretTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downKey") ) { _downKey=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textColor") ) { textColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollTop") ) { scrollTop=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_password") ) { _password=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fontSize") ) { _fontSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_wordWrap") ) { _wordWrap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretLeft") ) { caretLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_caretInfo") ) { _hx_set__caretInfo(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollLeft") ) { scrollLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_multiline") ) { _multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoHeight(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"caretWidth") ) { caretWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_caretMoved") ) { _hx_set__caretMoved(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_autoHeight") ) { _autoHeight=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretHeight") ) { caretHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_textChanged") ) { _hx_set__textChanged(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"hasSelection") ) { hasSelection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectionEnd") ) { selectionEnd=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"caretPosition") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_caretPosition(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"requiredWidth") ) { requiredWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_selectionInfo") ) { _hx_set__selectionInfo(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"selectionStart") ) { selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"requiredHeight") ) { requiredHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_repeatTimerId") ) { _repeatTimerId=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxVisibleLines") ) { maxVisibleLines=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"selectedTextColor") ) { selectedTextColor=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"selectedBackgroundColor") ) { selectedBackgroundColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"_currentFocus") ) { _currentFocus=ioValue.Cast<  ::haxe::ui::backend::kha::TextField >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_selectionInfo",1b,63,51,34));
	outFields->push(HX_("_caretInfo",52,57,c5,7c));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("editable",a4,04,a6,d5));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("selectedTextColor",9b,13,33,50));
	outFields->push(HX_("selectedBackgroundColor",7a,0a,e4,13));
	outFields->push(HX_("scrollTop",88,0c,0a,3e));
	outFields->push(HX_("scrollLeft",b4,96,6f,05));
	outFields->push(HX_("_textChanged",c8,59,56,0e));
	outFields->push(HX_("_caretMoved",cf,b4,36,fe));
	outFields->push(HX_("_lines",40,25,e9,70));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("_width",47,fd,49,c6));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("_height",86,19,c3,70));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("_password",7a,1a,66,90));
	outFields->push(HX_("password",1b,23,d0,48));
	outFields->push(HX_("_font",ae,79,d1,f6));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("_fontSize",8f,b5,67,16));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("_multiline",ae,4e,b4,f9));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("_wordWrap",13,0c,71,48));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("_autoHeight",d5,e5,a0,40));
	outFields->push(HX_("autoHeight",b6,18,17,6e));
	outFields->push(HX_("maxVisibleLines",f1,b4,a3,97));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("hasSelection",92,dd,6c,1b));
	outFields->push(HX_("selectionStart",76,58,7a,0f));
	outFields->push(HX_("selectionEnd",ef,fa,80,dd));
	outFields->push(HX_("caretPosition",4c,11,76,5d));
	outFields->push(HX_("isActive",50,dd,af,6e));
	outFields->push(HX_("requiredWidth",27,3c,27,83));
	outFields->push(HX_("requiredHeight",a6,de,7c,f5));
	outFields->push(HX_("caretLeft",2a,ab,17,23));
	outFields->push(HX_("caretTop",d2,b8,38,e9));
	outFields->push(HX_("caretWidth",83,d1,a9,e9));
	outFields->push(HX_("caretHeight",ca,f9,3c,41));
	outFields->push(HX_("_repeatTimerId",26,2d,df,fb));
	outFields->push(HX_("_downKey",de,8b,55,a7));
	outFields->push(HX_("_shift",c3,33,0a,78));
	outFields->push(HX_("_ctrl",8a,a4,d9,f4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextField_obj,_selectionInfo),HX_("_selectionInfo",1b,63,51,34)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextField_obj,_caretInfo),HX_("_caretInfo",52,57,c5,7c)},
	{hx::fsFloat,(int)offsetof(TextField_obj,left),HX_("left",07,08,b0,47)},
	{hx::fsFloat,(int)offsetof(TextField_obj,top),HX_("top",95,66,58,00)},
	{hx::fsBool,(int)offsetof(TextField_obj,editable),HX_("editable",a4,04,a6,d5)},
	{hx::fsInt,(int)offsetof(TextField_obj,textColor),HX_("textColor",76,01,4a,e3)},
	{hx::fsInt,(int)offsetof(TextField_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{hx::fsInt,(int)offsetof(TextField_obj,selectedTextColor),HX_("selectedTextColor",9b,13,33,50)},
	{hx::fsInt,(int)offsetof(TextField_obj,selectedBackgroundColor),HX_("selectedBackgroundColor",7a,0a,e4,13)},
	{hx::fsInt,(int)offsetof(TextField_obj,scrollTop),HX_("scrollTop",88,0c,0a,3e)},
	{hx::fsFloat,(int)offsetof(TextField_obj,scrollLeft),HX_("scrollLeft",b4,96,6f,05)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TextField_obj,_textChanged),HX_("_textChanged",c8,59,56,0e)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TextField_obj,_caretMoved),HX_("_caretMoved",cf,b4,36,fe)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TextField_obj,_lines),HX_("_lines",40,25,e9,70)},
	{hx::fsString,(int)offsetof(TextField_obj,_text),HX_("_text",8c,e8,0a,00)},
	{hx::fsFloat,(int)offsetof(TextField_obj,_width),HX_("_width",47,fd,49,c6)},
	{hx::fsFloat,(int)offsetof(TextField_obj,_height),HX_("_height",86,19,c3,70)},
	{hx::fsBool,(int)offsetof(TextField_obj,_password),HX_("_password",7a,1a,66,90)},
	{hx::fsObject /*  ::kha::Kravur */ ,(int)offsetof(TextField_obj,_font),HX_("_font",ae,79,d1,f6)},
	{hx::fsInt,(int)offsetof(TextField_obj,_fontSize),HX_("_fontSize",8f,b5,67,16)},
	{hx::fsBool,(int)offsetof(TextField_obj,_multiline),HX_("_multiline",ae,4e,b4,f9)},
	{hx::fsBool,(int)offsetof(TextField_obj,_wordWrap),HX_("_wordWrap",13,0c,71,48)},
	{hx::fsBool,(int)offsetof(TextField_obj,_autoHeight),HX_("_autoHeight",d5,e5,a0,40)},
	{hx::fsInt,(int)offsetof(TextField_obj,maxVisibleLines),HX_("maxVisibleLines",f1,b4,a3,97)},
	{hx::fsInt,(int)offsetof(TextField_obj,numLines),HX_("numLines",d9,f1,11,32)},
	{hx::fsBool,(int)offsetof(TextField_obj,hasSelection),HX_("hasSelection",92,dd,6c,1b)},
	{hx::fsInt,(int)offsetof(TextField_obj,selectionStart),HX_("selectionStart",76,58,7a,0f)},
	{hx::fsInt,(int)offsetof(TextField_obj,selectionEnd),HX_("selectionEnd",ef,fa,80,dd)},
	{hx::fsBool,(int)offsetof(TextField_obj,isActive),HX_("isActive",50,dd,af,6e)},
	{hx::fsFloat,(int)offsetof(TextField_obj,requiredWidth),HX_("requiredWidth",27,3c,27,83)},
	{hx::fsFloat,(int)offsetof(TextField_obj,requiredHeight),HX_("requiredHeight",a6,de,7c,f5)},
	{hx::fsFloat,(int)offsetof(TextField_obj,caretLeft),HX_("caretLeft",2a,ab,17,23)},
	{hx::fsFloat,(int)offsetof(TextField_obj,caretTop),HX_("caretTop",d2,b8,38,e9)},
	{hx::fsFloat,(int)offsetof(TextField_obj,caretWidth),HX_("caretWidth",83,d1,a9,e9)},
	{hx::fsFloat,(int)offsetof(TextField_obj,caretHeight),HX_("caretHeight",ca,f9,3c,41)},
	{hx::fsInt,(int)offsetof(TextField_obj,_repeatTimerId),HX_("_repeatTimerId",26,2d,df,fb)},
	{hx::fsInt,(int)offsetof(TextField_obj,_downKey),HX_("_downKey",de,8b,55,a7)},
	{hx::fsBool,(int)offsetof(TextField_obj,_shift),HX_("_shift",c3,33,0a,78)},
	{hx::fsBool,(int)offsetof(TextField_obj,_ctrl),HX_("_ctrl",8a,a4,d9,f4)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextField_obj::SPACE,HX_("SPACE",a6,c4,54,ff)},
	{hx::fsInt,(void *) &TextField_obj::CR,HX_("CR",af,3a,00,00)},
	{hx::fsInt,(void *) &TextField_obj::LF,HX_("LF",7a,42,00,00)},
	{hx::fsObject /*  ::haxe::ui::backend::kha::TextField */ ,(void *) &TextField_obj::_currentFocus,HX_("_currentFocus",be,d7,03,2e)},
	{hx::fsInt,(void *) &TextField_obj::REPEAT_TIMER_GROUP,HX_("REPEAT_TIMER_GROUP",a1,01,e5,ae)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_("_selectionInfo",1b,63,51,34),
	HX_("_caretInfo",52,57,c5,7c),
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("editable",a4,04,a6,d5),
	HX_("textColor",76,01,4a,e3),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("selectedTextColor",9b,13,33,50),
	HX_("selectedBackgroundColor",7a,0a,e4,13),
	HX_("scrollTop",88,0c,0a,3e),
	HX_("scrollLeft",b4,96,6f,05),
	HX_("_textChanged",c8,59,56,0e),
	HX_("_caretMoved",cf,b4,36,fe),
	HX_("notify",c9,da,b8,31),
	HX_("notifyTextChanged",7e,bb,6d,68),
	HX_("notifyCaretMoved",d9,7b,0d,40),
	HX_("_lines",40,25,e9,70),
	HX_("_text",8c,e8,0a,00),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("_width",47,fd,49,c6),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("_height",86,19,c3,70),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("_password",7a,1a,66,90),
	HX_("get_password",24,d7,e9,fd),
	HX_("set_password",98,fa,e2,12),
	HX_("_font",ae,79,d1,f6),
	HX_("get_font",58,19,7b,c3),
	HX_("set_font",cc,72,d8,71),
	HX_("_fontSize",8f,b5,67,16),
	HX_("get_fontSize",39,72,eb,83),
	HX_("set_fontSize",ad,95,e4,98),
	HX_("_multiline",ae,4e,b4,f9),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("_wordWrap",13,0c,71,48),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("_autoHeight",d5,e5,a0,40),
	HX_("get_autoHeight",ff,a0,0c,e4),
	HX_("set_autoHeight",73,89,2c,04),
	HX_("maxVisibleLines",f1,b4,a3,97),
	HX_("get_maxVisibleLines",08,84,ae,22),
	HX_("numLines",d9,f1,11,32),
	HX_("get_numLines",e2,a5,2b,e7),
	HX_("resetSelection",7d,5c,8b,e8),
	HX_("hasSelection",92,dd,6c,1b),
	HX_("get_hasSelection",1b,ca,0b,20),
	HX_("selectionStart",76,58,7a,0f),
	HX_("get_selectionStart",3f,39,14,ab),
	HX_("selectionEnd",ef,fa,80,dd),
	HX_("get_selectionEnd",78,e7,1f,e2),
	HX_("get_caretPosition",a3,1c,e6,63),
	HX_("set_caretPosition",af,f4,53,87),
	HX_("isActive",50,dd,af,6e),
	HX_("get_isActive",59,91,c9,23),
	HX_("recalc",c8,d1,e1,fd),
	HX_("inBounds",3a,d0,9b,ee),
	HX_("requiredWidth",27,3c,27,83),
	HX_("get_requiredWidth",7e,47,97,89),
	HX_("requiredHeight",a6,de,7c,f5),
	HX_("get_requiredHeight",6f,bf,16,91),
	HX_("moveCaretRight",ca,ed,9b,47),
	HX_("moveCaretLeft",d9,3d,c7,3d),
	HX_("handleNegativeSelection",4f,5a,f9,e7),
	HX_("handlePositiveSelection",8b,b1,f8,c6),
	HX_("performKeyOperation",c9,50,44,62),
	HX_("insertText",86,cc,e4,32),
	HX_("caretLeft",2a,ab,17,23),
	HX_("get_caretLeft",01,7f,7b,e4),
	HX_("caretTop",d2,b8,38,e9),
	HX_("get_caretTop",db,6c,52,9e),
	HX_("caretWidth",83,d1,a9,e9),
	HX_("get_caretWidth",cc,59,9f,5f),
	HX_("caretHeight",ca,f9,3c,41),
	HX_("get_caretHeight",61,b1,1e,02),
	HX_("_repeatTimerId",26,2d,df,fb),
	HX_("_downKey",de,8b,55,a7),
	HX_("_shift",c3,33,0a,78),
	HX_("_ctrl",8a,a4,d9,f4),
	HX_("onCut",a3,19,63,32),
	HX_("onCopy",74,c4,4e,e4),
	HX_("onPaste",b4,f1,93,53),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyRepeat",3b,f9,c6,c0),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("onMouseDown",08,94,05,11),
	HX_("focus",d8,5f,89,04),
	HX_("onFocus",39,fe,c6,9a),
	HX_("blur",a7,42,19,41),
	HX_("onBlur",66,4b,a3,e3),
	HX_("splitLines",c5,cc,3c,44),
	HX_("deleteCharsFromCaret",a7,4c,00,02),
	HX_("deleteChars",b2,d0,a8,d5),
	HX_("posToIndex",63,4c,d4,a0),
	HX_("indexToPos",67,82,0a,e4),
	HX_("scrollToCaret",7b,61,eb,7f),
	HX_("ensureRowVisible",d6,68,63,23),
	HX_("findClosestColumn",16,76,82,ed),
	HX_("render",56,6b,29,05),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(TextField_obj::CR,"CR");
	HX_MARK_MEMBER_NAME(TextField_obj::LF,"LF");
	HX_MARK_MEMBER_NAME(TextField_obj::_currentFocus,"_currentFocus");
	HX_MARK_MEMBER_NAME(TextField_obj::REPEAT_TIMER_GROUP,"REPEAT_TIMER_GROUP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(TextField_obj::CR,"CR");
	HX_VISIT_MEMBER_NAME(TextField_obj::LF,"LF");
	HX_VISIT_MEMBER_NAME(TextField_obj::_currentFocus,"_currentFocus");
	HX_VISIT_MEMBER_NAME(TextField_obj::REPEAT_TIMER_GROUP,"REPEAT_TIMER_GROUP");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_("SPACE",a6,c4,54,ff),
	HX_("CR",af,3a,00,00),
	HX_("LF",7a,42,00,00),
	HX_("_currentFocus",be,d7,03,2e),
	HX_("REPEAT_TIMER_GROUP",a1,01,e5,ae),
	::String(null())
};

void TextField_obj::__register()
{
	TextField_obj _hx_dummy;
	TextField_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.kha.TextField",b7,89,20,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_31_boot)
HXDLIN(  31)		SPACE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_32_boot)
HXDLIN(  32)		CR = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_33_boot)
HXDLIN(  33)		LF = 13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_900e02585355f002_590_boot)
HXDLIN( 590)		REPEAT_TIMER_GROUP = 1234;
            	}
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
} // end namespace kha
