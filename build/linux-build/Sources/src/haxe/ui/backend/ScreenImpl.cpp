// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <hxinc/haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_ui_Toolkit
#include <hxinc/haxe/ui/Toolkit.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <hxinc/haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <hxinc/haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenBase
#include <hxinc/haxe/ui/backend/ScreenBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenImpl
#include <hxinc/haxe/ui/backend/ScreenImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <hxinc/haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <hxinc/haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_kha_Display
#include <hxinc/kha/Display.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_Window
#include <hxinc/kha/Window.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a615936dd15791e_15_new,"haxe.ui.backend.ScreenImpl","new",0x83c2272a,"haxe.ui.backend.ScreenImpl.new","haxe/ui/backend/ScreenImpl.hx",15,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_23_get_width,"haxe.ui.backend.ScreenImpl","get_width",0xddce9ca7,"haxe.ui.backend.ScreenImpl.get_width","haxe/ui/backend/ScreenImpl.hx",23,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_27_get_height,"haxe.ui.backend.ScreenImpl","get_height",0xed49ee26,"haxe.ui.backend.ScreenImpl.get_height","haxe/ui/backend/ScreenImpl.hx",27,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_31_get_dpi,"haxe.ui.backend.ScreenImpl","get_dpi",0xbe038fbe,"haxe.ui.backend.ScreenImpl.get_dpi","haxe/ui/backend/ScreenImpl.hx",31,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_34_get_title,"haxe.ui.backend.ScreenImpl","get_title",0x23a6fc39,"haxe.ui.backend.ScreenImpl.get_title","haxe/ui/backend/ScreenImpl.hx",34,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_42_set_title,"haxe.ui.backend.ScreenImpl","set_title",0x06f7e845,"haxe.ui.backend.ScreenImpl.set_title","haxe/ui/backend/ScreenImpl.hx",42,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_52_addComponent,"haxe.ui.backend.ScreenImpl","addComponent",0x6c819252,"haxe.ui.backend.ScreenImpl.addComponent","haxe/ui/backend/ScreenImpl.hx",52,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_60_removeComponent,"haxe.ui.backend.ScreenImpl","removeComponent",0xf4ece9a3,"haxe.ui.backend.ScreenImpl.removeComponent","haxe/ui/backend/ScreenImpl.hx",60,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_65_renderTo,"haxe.ui.backend.ScreenImpl","renderTo",0x75cc8367,"haxe.ui.backend.ScreenImpl.renderTo","haxe/ui/backend/ScreenImpl.hx",65,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_79_updateFPS,"haxe.ui.backend.ScreenImpl","updateFPS",0x529d13aa,"haxe.ui.backend.ScreenImpl.updateFPS","haxe/ui/backend/ScreenImpl.hx",79,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_133_addResizeListener,"haxe.ui.backend.ScreenImpl","addResizeListener",0x50efacd3,"haxe.ui.backend.ScreenImpl.addResizeListener","haxe/ui/backend/ScreenImpl.hx",133,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_126_addResizeListener,"haxe.ui.backend.ScreenImpl","addResizeListener",0x50efacd3,"haxe.ui.backend.ScreenImpl.addResizeListener","haxe/ui/backend/ScreenImpl.hx",126,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_139_supportsEvent,"haxe.ui.backend.ScreenImpl","supportsEvent",0x6f292f40,"haxe.ui.backend.ScreenImpl.supportsEvent","haxe/ui/backend/ScreenImpl.hx",139,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_149_mapEvent,"haxe.ui.backend.ScreenImpl","mapEvent",0xaff804d4,"haxe.ui.backend.ScreenImpl.mapEvent","haxe/ui/backend/ScreenImpl.hx",149,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_170_unmapEvent,"haxe.ui.backend.ScreenImpl","unmapEvent",0x6d4195ad,"haxe.ui.backend.ScreenImpl.unmapEvent","haxe/ui/backend/ScreenImpl.hx",170,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_183___onMouseMove,"haxe.ui.backend.ScreenImpl","__onMouseMove",0x1fe736e1,"haxe.ui.backend.ScreenImpl.__onMouseMove","haxe/ui/backend/ScreenImpl.hx",183,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_194___onMouseDown,"haxe.ui.backend.ScreenImpl","__onMouseDown",0x19f44c32,"haxe.ui.backend.ScreenImpl.__onMouseDown","haxe/ui/backend/ScreenImpl.hx",194,0x18a34445)
HX_LOCAL_STACK_FRAME(_hx_pos_7a615936dd15791e_205___onMouseUp,"haxe.ui.backend.ScreenImpl","__onMouseUp",0xf37b262b,"haxe.ui.backend.ScreenImpl.__onMouseUp","haxe/ui/backend/ScreenImpl.hx",205,0x18a34445)
namespace haxe{
namespace ui{
namespace backend{

void ScreenImpl_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7a615936dd15791e_15_new)
HXLINE( 125)		this->_hasListener = false;
HXLINE(  78)		this->_fpsCountdown = ((Float)10);
HXLINE(  77)		this->_fpsHigest = ((Float)0);
HXLINE(  76)		this->_fpsLowest = ((Float)16777215);
HXLINE(  75)		this->_hx_set__fpsFont(HX_CTX, null());
HXLINE(  74)		this->fps = ((Float)0);
HXLINE(  18)		super::__construct();
HXLINE(  19)		this->_hx_set__mapping(HX_CTX,  ::haxe::ds::StringMap_obj::__alloc( HX_CTX ));
            	}

Dynamic ScreenImpl_obj::__CreateEmpty() { return new ScreenImpl_obj; }

void *ScreenImpl_obj::_hx_vtable = 0;

Dynamic ScreenImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ScreenImpl_obj > _hx_result = new ScreenImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ScreenImpl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x095a7d57) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x095a7d57;
	} else {
		return inClassId==(int)0x0e041426;
	}
}

Float ScreenImpl_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_23_get_width)
HXDLIN(  23)		int _hx_tmp = ::kha::System_obj::windowWidth(null());
HXDLIN(  23)		return (( (Float)(_hx_tmp) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
            	}


Float ScreenImpl_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_27_get_height)
HXDLIN(  27)		int _hx_tmp = ::kha::System_obj::windowHeight(null());
HXDLIN(  27)		return (( (Float)(_hx_tmp) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
            	}


Float ScreenImpl_obj::get_dpi(){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_31_get_dpi)
HXDLIN(  31)		return ( (Float)(::kha::Display_obj::get_primary()->get_pixelsPerInch()) );
            	}


::String ScreenImpl_obj::get_title(){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_34_get_title)
HXLINE(  38)		::haxe::Log_obj::trace(HX_("WARNING: this platform doesnt support dynamic titles",c1,b2,a9,4b),hx::SourceInfo(HX_("haxe/ui/backend/ScreenImpl.hx",45,44,a3,18),38,HX_("haxe.ui.backend.ScreenImpl",38,0a,49,cc),HX_("get_title",ef,71,e4,53)));
HXLINE(  39)		return HX_("",00,00,00,00);
            	}


::String ScreenImpl_obj::set_title(::String s){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_42_set_title)
HXLINE(  47)		::haxe::Log_obj::trace(HX_("WARNING: this platform doesnt support dynamic titles",c1,b2,a9,4b),hx::SourceInfo(HX_("haxe/ui/backend/ScreenImpl.hx",45,44,a3,18),47,HX_("haxe.ui.backend.ScreenImpl",38,0a,49,cc),HX_("set_title",fb,5d,35,37)));
HXLINE(  48)		return HX_("",00,00,00,00);
            	}


 ::haxe::ui::core::Component ScreenImpl_obj::addComponent( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_52_addComponent)
HXLINE(  53)		this->_topLevelComponents->push(component);
HXLINE(  54)		this->addResizeListener();
HXLINE(  55)		this->resizeComponent(component);
HXLINE(  57)		return component;
            	}


 ::haxe::ui::core::Component ScreenImpl_obj::removeComponent( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_60_removeComponent)
HXLINE(  61)		this->_topLevelComponents->remove(component);
HXLINE(  62)		return component;
            	}


void ScreenImpl_obj::renderTo( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_65_renderTo)
HXLINE(  66)		{
HXLINE(  66)			int _g = 0;
HXDLIN(  66)			::Array< ::Dynamic> _g1 = this->_topLevelComponents;
HXDLIN(  66)			while((_g < _g1->length)){
HXLINE(  66)				 ::haxe::ui::core::Component c = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  66)				_g = (_g + 1);
HXLINE(  67)				c->renderTo(g);
            			}
            		}
HXLINE(  69)		this->updateFPS(g);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScreenImpl_obj,renderTo,(void))

void ScreenImpl_obj::updateFPS( ::kha::graphics2::Graphics g){
            	HX_GC_STACKFRAME(&_hx_pos_7a615936dd15791e_79_updateFPS)
HXLINE(  80)		Float currentTime = ::kha::Scheduler_obj::time();
HXLINE(  81)		this->_deltaTime = (currentTime - this->_lastTime);
HXLINE(  82)		this->_lastTime = currentTime;
HXLINE(  83)		Float nFps = (((Float)1.0) / this->_deltaTime);
HXLINE(  84)		if (::Math_obj::isFinite(nFps)) {
HXLINE(  85)			this->fps = ( (Float)(::Math_obj::round(nFps)) );
HXLINE(  86)			this->_fpsCountdown--;
HXLINE(  87)			if ((this->_fpsCountdown <= 0)) {
HXLINE(  88)				this->_fpsCountdown = ( (Float)(0) );
HXLINE(  89)				if ((this->fps > this->_fpsHigest)) {
HXLINE(  90)					this->_fpsHigest = this->fps;
            				}
HXLINE(  92)				if ((this->fps < this->_fpsLowest)) {
HXLINE(  93)					this->_fpsLowest = this->fps;
            				}
            			}
            		}
HXLINE(  98)		 ::Dynamic showFPS;
HXDLIN(  98)		if (hx::IsNotNull( this->get_options() )) {
HXLINE(  98)			showFPS = this->get_options()->__Field(HX_("showFPS",ec,0a,9a,7b),hx::paccDynamic);
            		}
            		else {
HXLINE(  98)			showFPS = false;
            		}
HXLINE( 102)		if (hx::IsEq( showFPS,true )) {
HXLINE( 103)			g->set_color(-16777216);
HXLINE( 104)			if (hx::IsNull( this->_fpsFont )) {
HXLINE( 105)				this->_hx_set__fpsFont(HX_CTX, ::kha::Kravur_obj::fromBytes(::haxe::Resource_obj::getBytes(HX_("styles/default/arial.ttf",c0,d9,d8,76)),null()));
            			}
HXLINE( 107)			g->set_font(this->_fpsFont);
HXLINE( 108)			g->set_fontSize(::Std_obj::_hx_int((( (Float)(14) ) * ::haxe::ui::Toolkit_obj::get_scale())));
HXLINE( 109)			::String fpsString = (HX_("FPS: ",af,da,2c,83) + this->fps);
HXLINE( 110)			if ((this->_fpsCountdown <= 0)) {
HXLINE( 111)				fpsString = (fpsString + ((((HX_(" (L: ",ea,f6,7c,87) + this->_fpsLowest) + HX_(", H: ",fa,2e,ff,6a)) + this->_fpsHigest) + HX_(")",29,00,00,00)));
            			}
HXLINE( 113)			 ::kha::Kravur cy = this->_fpsFont;
HXDLIN( 113)			Float cy1 = (cy->height(g->get_fontSize()) + 3);
HXLINE( 114)			 ::kha::Kravur cx = this->_fpsFont;
HXDLIN( 114)			Float cx1 = (cx->width(g->get_fontSize(),fpsString) + 6);
HXLINE( 115)			g->fillRect(( (Float)(0) ),( (Float)(0) ),cx1,cy1);
HXLINE( 116)			g->set_color(-1);
HXLINE( 117)			g->drawString(fpsString,( (Float)(2) ),( (Float)(2) ));
HXLINE( 118)			g->set_font(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScreenImpl_obj,updateFPS,(void))

void ScreenImpl_obj::addResizeListener(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::backend::ScreenImpl,_gthis) HXARGC(2)
            		void _hx_run(int w,int h){
            			HX_STACKFRAME(&_hx_pos_7a615936dd15791e_133_addResizeListener)
HXLINE( 133)			int _g = 0;
HXDLIN( 133)			::Array< ::Dynamic> _g1 = _gthis->_topLevelComponents;
HXDLIN( 133)			while((_g < _g1->length)){
HXLINE( 133)				 ::haxe::ui::core::Component c = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 133)				_g = (_g + 1);
HXLINE( 134)				_gthis->resizeComponent(c);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_126_addResizeListener)
HXDLIN( 126)		 ::haxe::ui::backend::ScreenImpl _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 127)		if ((this->_hasListener == true)) {
HXLINE( 128)			return;
            		}
HXLINE( 131)		this->_hasListener = true;
HXLINE( 132)		::kha::Window_obj::get(0)->notifyOnResize( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScreenImpl_obj,addResizeListener,(void))

bool ScreenImpl_obj::supportsEvent(::String type){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_139_supportsEvent)
HXLINE( 140)		bool _hx_tmp;
HXDLIN( 140)		bool _hx_tmp1;
HXDLIN( 140)		if ((type != HX_("mousemove",b6,6f,dc,09))) {
HXLINE( 140)			_hx_tmp1 = (type == HX_("mousedown",07,85,e9,03));
            		}
            		else {
HXLINE( 140)			_hx_tmp1 = true;
            		}
HXDLIN( 140)		if (!(_hx_tmp1)) {
HXLINE( 140)			_hx_tmp = (type == HX_("mouseup",c0,0f,73,c0));
            		}
            		else {
HXLINE( 140)			_hx_tmp = true;
            		}
HXDLIN( 140)		if (_hx_tmp) {
HXLINE( 143)			return true;
            		}
HXLINE( 145)		return false;
            	}


void ScreenImpl_obj::mapEvent(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_149_mapEvent)
HXDLIN( 149)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("mousedown",07,85,e9,03)) ){
HXLINE( 156)			if ((this->_mapping->exists(type) == false)) {
HXLINE( 157)				this->_mapping->set(type,listener);
HXLINE( 158)				::kha::input::Mouse_obj::get(null())->notify(this->_hx___onMouseDown_dyn(),null(),null(),null(),null());
            			}
HXLINE( 156)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("mousemove",b6,6f,dc,09)) ){
HXLINE( 151)			if ((this->_mapping->exists(type) == false)) {
HXLINE( 152)				this->_mapping->set(type,listener);
HXLINE( 153)				::kha::input::Mouse_obj::get(null())->notify(null(),null(),this->_hx___onMouseMove_dyn(),null(),null());
            			}
HXLINE( 151)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("mouseup",c0,0f,73,c0)) ){
HXLINE( 161)			if ((this->_mapping->exists(type) == false)) {
HXLINE( 162)				this->_mapping->set(type,listener);
HXLINE( 163)				::kha::input::Mouse_obj::get(null())->notify(null(),this->_hx___onMouseUp_dyn(),null(),null(),null());
            			}
HXLINE( 161)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
            	}


void ScreenImpl_obj::unmapEvent(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_7a615936dd15791e_170_unmapEvent)
HXDLIN( 170)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("mousedown",07,85,e9,03)) ){
HXLINE( 175)			this->_mapping->remove(type);
HXLINE( 176)			::kha::input::Mouse_obj::get(null())->remove(this->_hx___onMouseDown_dyn(),null(),null(),null(),null());
HXLINE( 174)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("mousemove",b6,6f,dc,09)) ){
HXLINE( 172)			this->_mapping->remove(type);
HXLINE( 173)			::kha::input::Mouse_obj::get(null())->remove(null(),null(),this->_hx___onMouseMove_dyn(),null(),null());
HXLINE( 171)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("mouseup",c0,0f,73,c0)) ){
HXLINE( 178)			this->_mapping->remove(type);
HXLINE( 179)			::kha::input::Mouse_obj::get(null())->remove(null(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 177)			goto _hx_goto_17;
            		}
            		_hx_goto_17:;
            	}


void ScreenImpl_obj::_hx___onMouseMove(int x,int y,int movementX,int movementY){
            	HX_GC_STACKFRAME(&_hx_pos_7a615936dd15791e_183___onMouseMove)
HXLINE( 184)		if ((this->_mapping->exists(HX_("mousemove",b6,6f,dc,09)) == false)) {
HXLINE( 185)			return;
            		}
HXLINE( 188)		 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mousemove",b6,6f,dc,09));
HXLINE( 189)		mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 190)		mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 191)		this->_mapping->get(HX_("mousemove",b6,6f,dc,09))(mouseEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ScreenImpl_obj,_hx___onMouseMove,(void))

void ScreenImpl_obj::_hx___onMouseDown(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_7a615936dd15791e_194___onMouseDown)
HXLINE( 195)		if ((this->_mapping->exists(HX_("mousedown",07,85,e9,03)) == false)) {
HXLINE( 196)			return;
            		}
HXLINE( 199)		 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mousedown",07,85,e9,03));
HXLINE( 200)		mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 201)		mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 202)		this->_mapping->get(HX_("mousedown",07,85,e9,03))(mouseEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ScreenImpl_obj,_hx___onMouseDown,(void))

void ScreenImpl_obj::_hx___onMouseUp(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_7a615936dd15791e_205___onMouseUp)
HXLINE( 206)		if ((this->_mapping->exists(HX_("mouseup",c0,0f,73,c0)) == false)) {
HXLINE( 207)			return;
            		}
HXLINE( 210)		 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mouseup",c0,0f,73,c0));
HXLINE( 211)		mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 212)		mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 213)		this->_mapping->get(HX_("mouseup",c0,0f,73,c0))(mouseEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ScreenImpl_obj,_hx___onMouseUp,(void))


hx::ObjectPtr< ScreenImpl_obj > ScreenImpl_obj::__new() {
	hx::ObjectPtr< ScreenImpl_obj > __this = new ScreenImpl_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ScreenImpl_obj > ScreenImpl_obj::__alloc(hx::Ctx *_hx_ctx) {
	ScreenImpl_obj *__this = (ScreenImpl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ScreenImpl_obj), true, "haxe.ui.backend.ScreenImpl"));
	*(void **)__this = ScreenImpl_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ScreenImpl_obj::ScreenImpl_obj()
{
}

void ScreenImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScreenImpl);
	HX_MARK_MEMBER_NAME(_mapping,"_mapping");
	HX_MARK_MEMBER_NAME(_deltaTime,"_deltaTime");
	HX_MARK_MEMBER_NAME(_lastTime,"_lastTime");
	HX_MARK_MEMBER_NAME(fps,"fps");
	HX_MARK_MEMBER_NAME(_fpsFont,"_fpsFont");
	HX_MARK_MEMBER_NAME(_fpsLowest,"_fpsLowest");
	HX_MARK_MEMBER_NAME(_fpsHigest,"_fpsHigest");
	HX_MARK_MEMBER_NAME(_fpsCountdown,"_fpsCountdown");
	HX_MARK_MEMBER_NAME(_hasListener,"_hasListener");
	 ::haxe::ui::backend::ScreenBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScreenImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_mapping,"_mapping");
	HX_VISIT_MEMBER_NAME(_deltaTime,"_deltaTime");
	HX_VISIT_MEMBER_NAME(_lastTime,"_lastTime");
	HX_VISIT_MEMBER_NAME(fps,"fps");
	HX_VISIT_MEMBER_NAME(_fpsFont,"_fpsFont");
	HX_VISIT_MEMBER_NAME(_fpsLowest,"_fpsLowest");
	HX_VISIT_MEMBER_NAME(_fpsHigest,"_fpsHigest");
	HX_VISIT_MEMBER_NAME(_fpsCountdown,"_fpsCountdown");
	HX_VISIT_MEMBER_NAME(_hasListener,"_hasListener");
	 ::haxe::ui::backend::ScreenBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ScreenImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { return hx::Val( fps ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_dpi") ) { return hx::Val( get_dpi_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_mapping") ) { return hx::Val( _mapping ); }
		if (HX_FIELD_EQ(inName,"renderTo") ) { return hx::Val( renderTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"_fpsFont") ) { return hx::Val( _fpsFont ); }
		if (HX_FIELD_EQ(inName,"mapEvent") ) { return hx::Val( mapEvent_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_title") ) { return hx::Val( get_title_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_title") ) { return hx::Val( set_title_dyn() ); }
		if (HX_FIELD_EQ(inName,"_lastTime") ) { return hx::Val( _lastTime ); }
		if (HX_FIELD_EQ(inName,"updateFPS") ) { return hx::Val( updateFPS_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"_deltaTime") ) { return hx::Val( _deltaTime ); }
		if (HX_FIELD_EQ(inName,"_fpsLowest") ) { return hx::Val( _fpsLowest ); }
		if (HX_FIELD_EQ(inName,"_fpsHigest") ) { return hx::Val( _fpsHigest ); }
		if (HX_FIELD_EQ(inName,"unmapEvent") ) { return hx::Val( unmapEvent_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__onMouseUp") ) { return hx::Val( _hx___onMouseUp_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addComponent") ) { return hx::Val( addComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"_hasListener") ) { return hx::Val( _hasListener ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fpsCountdown") ) { return hx::Val( _fpsCountdown ); }
		if (HX_FIELD_EQ(inName,"supportsEvent") ) { return hx::Val( supportsEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseMove") ) { return hx::Val( _hx___onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseDown") ) { return hx::Val( _hx___onMouseDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeComponent") ) { return hx::Val( removeComponent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addResizeListener") ) { return hx::Val( addResizeListener_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ScreenImpl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { fps=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_mapping") ) { _hx_set__mapping(HX_CTX_GET,inValue.Cast<  ::haxe::ds::StringMap >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_fpsFont") ) { _hx_set__fpsFont(HX_CTX_GET,inValue.Cast<  ::kha::Kravur >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_lastTime") ) { _lastTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_deltaTime") ) { _deltaTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fpsLowest") ) { _fpsLowest=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fpsHigest") ) { _fpsHigest=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_hasListener") ) { _hasListener=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fpsCountdown") ) { _fpsCountdown=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScreenImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_mapping",8f,d4,32,7e));
	outFields->push(HX_("_deltaTime",e6,b7,fe,50));
	outFields->push(HX_("_lastTime",e2,dc,db,27));
	outFields->push(HX_("fps",e9,c7,4d,00));
	outFields->push(HX_("_fpsFont",d9,53,ec,f8));
	outFields->push(HX_("_fpsLowest",bc,d4,97,b7));
	outFields->push(HX_("_fpsHigest",4a,7e,2f,9f));
	outFields->push(HX_("_fpsCountdown",67,36,ff,e2));
	outFields->push(HX_("_hasListener",ef,93,f2,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ScreenImpl_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ScreenImpl_obj,_mapping),HX_("_mapping",8f,d4,32,7e)},
	{hx::fsFloat,(int)offsetof(ScreenImpl_obj,_deltaTime),HX_("_deltaTime",e6,b7,fe,50)},
	{hx::fsFloat,(int)offsetof(ScreenImpl_obj,_lastTime),HX_("_lastTime",e2,dc,db,27)},
	{hx::fsFloat,(int)offsetof(ScreenImpl_obj,fps),HX_("fps",e9,c7,4d,00)},
	{hx::fsObject /*  ::kha::Kravur */ ,(int)offsetof(ScreenImpl_obj,_fpsFont),HX_("_fpsFont",d9,53,ec,f8)},
	{hx::fsFloat,(int)offsetof(ScreenImpl_obj,_fpsLowest),HX_("_fpsLowest",bc,d4,97,b7)},
	{hx::fsFloat,(int)offsetof(ScreenImpl_obj,_fpsHigest),HX_("_fpsHigest",4a,7e,2f,9f)},
	{hx::fsFloat,(int)offsetof(ScreenImpl_obj,_fpsCountdown),HX_("_fpsCountdown",67,36,ff,e2)},
	{hx::fsBool,(int)offsetof(ScreenImpl_obj,_hasListener),HX_("_hasListener",ef,93,f2,70)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ScreenImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String ScreenImpl_obj_sMemberFields[] = {
	HX_("_mapping",8f,d4,32,7e),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_dpi",f4,0b,c1,26),
	HX_("get_title",ef,71,e4,53),
	HX_("set_title",fb,5d,35,37),
	HX_("addComponent",5c,12,a8,0e),
	HX_("removeComponent",d9,8b,72,50),
	HX_("renderTo",71,b6,db,b2),
	HX_("_deltaTime",e6,b7,fe,50),
	HX_("_lastTime",e2,dc,db,27),
	HX_("fps",e9,c7,4d,00),
	HX_("_fpsFont",d9,53,ec,f8),
	HX_("_fpsLowest",bc,d4,97,b7),
	HX_("_fpsHigest",4a,7e,2f,9f),
	HX_("_fpsCountdown",67,36,ff,e2),
	HX_("updateFPS",60,89,da,82),
	HX_("_hasListener",ef,93,f2,70),
	HX_("addResizeListener",89,c8,ca,d2),
	HX_("supportsEvent",f6,b7,b2,ae),
	HX_("mapEvent",de,37,07,ed),
	HX_("unmapEvent",37,1f,cb,72),
	HX_("__onMouseMove",97,bf,70,5f),
	HX_("__onMouseDown",e8,d4,7d,59),
	HX_("__onMouseUp",61,f5,49,c6),
	::String(null()) };

hx::Class ScreenImpl_obj::__mClass;

void ScreenImpl_obj::__register()
{
	ScreenImpl_obj _hx_dummy;
	ScreenImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.ScreenImpl",38,0a,49,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ScreenImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ScreenImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScreenImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScreenImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
