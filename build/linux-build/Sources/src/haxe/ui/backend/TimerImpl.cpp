// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_TimerImpl
#include <hxinc/haxe/ui/backend/TimerImpl.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_886b5ec6758f91cf_10_new,"haxe.ui.backend.TimerImpl","new",0x5c2f026b,"haxe.ui.backend.TimerImpl.new","haxe/ui/backend/TimerImpl.hx",10,0xe2a33786)
HX_DEFINE_STACK_FRAME(_hx_pos_886b5ec6758f91cf_5_new,"haxe.ui.backend.TimerImpl","new",0x5c2f026b,"haxe.ui.backend.TimerImpl.new","haxe/ui/backend/TimerImpl.hx",5,0xe2a33786)
HX_LOCAL_STACK_FRAME(_hx_pos_886b5ec6758f91cf_19_stop,"haxe.ui.backend.TimerImpl","stop",0x504c8797,"haxe.ui.backend.TimerImpl.stop","haxe/ui/backend/TimerImpl.hx",19,0xe2a33786)
namespace haxe{
namespace ui{
namespace backend{

void TimerImpl_obj::__construct(int delay, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::backend::TimerImpl,_gthis, ::Dynamic,callback) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_886b5ec6758f91cf_10_new)
HXLINE(  11)			if ((_gthis->_stopped == false)) {
HXLINE(  12)				callback();
            			}
HXLINE(  15)			return !(_gthis->_stopped);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_886b5ec6758f91cf_5_new)
HXLINE(   7)		this->_stopped = false;
HXLINE(   6)		this->_timerId = -1;
HXLINE(   9)		 ::haxe::ui::backend::TimerImpl _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  10)		this->_timerId = ::kha::Scheduler_obj::addBreakableTimeTaskToGroup(0, ::Dynamic(new _hx_Closure_0(_gthis,callback)),( (Float)(0) ),(( (Float)(delay) ) / ( (Float)(1000) )),null());
            	}

Dynamic TimerImpl_obj::__CreateEmpty() { return new TimerImpl_obj; }

void *TimerImpl_obj::_hx_vtable = 0;

Dynamic TimerImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TimerImpl_obj > _hx_result = new TimerImpl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TimerImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02010d2f;
}

void TimerImpl_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_886b5ec6758f91cf_19_stop)
HXLINE(  20)		this->_stopped = true;
HXLINE(  21)		::kha::Scheduler_obj::removeTimeTask(this->_timerId);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TimerImpl_obj,stop,(void))


hx::ObjectPtr< TimerImpl_obj > TimerImpl_obj::__new(int delay, ::Dynamic callback) {
	hx::ObjectPtr< TimerImpl_obj > __this = new TimerImpl_obj();
	__this->__construct(delay,callback);
	return __this;
}

hx::ObjectPtr< TimerImpl_obj > TimerImpl_obj::__alloc(hx::Ctx *_hx_ctx,int delay, ::Dynamic callback) {
	TimerImpl_obj *__this = (TimerImpl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TimerImpl_obj), false, "haxe.ui.backend.TimerImpl"));
	*(void **)__this = TimerImpl_obj::_hx_vtable;
	__this->__construct(delay,callback);
	return __this;
}

TimerImpl_obj::TimerImpl_obj()
{
}

hx::Val TimerImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_timerId") ) { return hx::Val( _timerId ); }
		if (HX_FIELD_EQ(inName,"_stopped") ) { return hx::Val( _stopped ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TimerImpl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_timerId") ) { _timerId=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stopped") ) { _stopped=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TimerImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_timerId",81,94,b1,12));
	outFields->push(HX_("_stopped",8e,2b,1a,7d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TimerImpl_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TimerImpl_obj,_timerId),HX_("_timerId",81,94,b1,12)},
	{hx::fsBool,(int)offsetof(TimerImpl_obj,_stopped),HX_("_stopped",8e,2b,1a,7d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TimerImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String TimerImpl_obj_sMemberFields[] = {
	HX_("_timerId",81,94,b1,12),
	HX_("_stopped",8e,2b,1a,7d),
	HX_("stop",02,f0,5b,4c),
	::String(null()) };

hx::Class TimerImpl_obj::__mClass;

void TimerImpl_obj::__register()
{
	TimerImpl_obj _hx_dummy;
	TimerImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.TimerImpl",f9,f0,74,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TimerImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TimerImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimerImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimerImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
