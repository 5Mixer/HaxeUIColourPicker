// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_TextBase
#include <hxinc/haxe/ui/backend/TextBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TextDisplayData
#include <hxinc/haxe/ui/core/TextDisplayData.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TextInputData
#include <hxinc/haxe/ui/core/TextInputData.h>
#endif
#ifndef INCLUDED_haxe_ui_data_DataSource
#include <hxinc/haxe/ui/data/DataSource.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <hxinc/haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1fa44b53d7776068_11_new,"haxe.ui.backend.TextBase","new",0x6f57ec1c,"haxe.ui.backend.TextBase.new","haxe/ui/backend/TextBase.hx",11,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_31_focus,"haxe.ui.backend.TextBase","focus",0x5198e294,"haxe.ui.backend.TextBase.focus","haxe/ui/backend/TextBase.hx",31,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_34_blur,"haxe.ui.backend.TextBase","blur",0xf5ad6b6b,"haxe.ui.backend.TextBase.blur","haxe/ui/backend/TextBase.hx",34,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_40_get_dataSource,"haxe.ui.backend.TextBase","get_dataSource",0xb46944b2,"haxe.ui.backend.TextBase.get_dataSource","haxe/ui/backend/TextBase.hx",40,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_42_set_dataSource,"haxe.ui.backend.TextBase","set_dataSource",0xd4892d26,"haxe.ui.backend.TextBase.set_dataSource","haxe/ui/backend/TextBase.hx",42,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_51_validateData,"haxe.ui.backend.TextBase","validateData",0x3833e2a4,"haxe.ui.backend.TextBase.validateData","haxe/ui/backend/TextBase.hx",51,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_55_validateStyle,"haxe.ui.backend.TextBase","validateStyle",0xa4c80377,"haxe.ui.backend.TextBase.validateStyle","haxe/ui/backend/TextBase.hx",55,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_58_validatePosition,"haxe.ui.backend.TextBase","validatePosition",0x40e3f223,"haxe.ui.backend.TextBase.validatePosition","haxe/ui/backend/TextBase.hx",58,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_61_validateDisplay,"haxe.ui.backend.TextBase","validateDisplay",0x21fd2608,"haxe.ui.backend.TextBase.validateDisplay","haxe/ui/backend/TextBase.hx",61,0xb04ce5d3)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa44b53d7776068_64_measureText,"haxe.ui.backend.TextBase","measureText",0xc2e132e7,"haxe.ui.backend.TextBase.measureText","haxe/ui/backend/TextBase.hx",64,0xb04ce5d3)
namespace haxe{
namespace ui{
namespace backend{

void TextBase_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1fa44b53d7776068_11_new)
HXLINE(  24)		this->_textHeight = ((Float)0);
HXLINE(  23)		this->_textWidth = ((Float)0);
HXLINE(  22)		this->_height = ((Float)0);
HXLINE(  21)		this->_width = ((Float)0);
HXLINE(  20)		this->_top = ((Float)0);
HXLINE(  19)		this->_left = ((Float)0);
HXLINE(  18)		this->_hx_set__htmlText(HX_CTX, null());
HXLINE(  15)		this->_hx_set__inputData(HX_CTX,  ::haxe::ui::core::TextInputData_obj::__alloc( HX_CTX ));
HXLINE(  14)		this->_hx_set__displayData(HX_CTX,  ::haxe::ui::core::TextDisplayData_obj::__alloc( HX_CTX ));
            	}

Dynamic TextBase_obj::__CreateEmpty() { return new TextBase_obj; }

void *TextBase_obj::_hx_vtable = 0;

Dynamic TextBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextBase_obj > _hx_result = new TextBase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextBase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d6dcab4;
}

void TextBase_obj::focus(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_31_focus)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,focus,(void))

void TextBase_obj::blur(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_34_blur)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,blur,(void))

 ::haxe::ui::data::DataSource TextBase_obj::get_dataSource(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_40_get_dataSource)
HXDLIN(  40)		return this->_dataSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,get_dataSource,return )

 ::haxe::ui::data::DataSource TextBase_obj::set_dataSource( ::haxe::ui::data::DataSource value){
            	HX_GC_STACKFRAME(&_hx_pos_1fa44b53d7776068_42_set_dataSource)
HXLINE(  43)		this->_hx_set__dataSource(HX_CTX, value);
HXLINE(  44)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBase_obj,set_dataSource,return )

void TextBase_obj::validateData(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_51_validateData)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,validateData,(void))

bool TextBase_obj::validateStyle(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_55_validateStyle)
HXDLIN(  55)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,validateStyle,return )

void TextBase_obj::validatePosition(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_58_validatePosition)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,validatePosition,(void))

void TextBase_obj::validateDisplay(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_61_validateDisplay)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,validateDisplay,(void))

void TextBase_obj::measureText(){
            	HX_STACKFRAME(&_hx_pos_1fa44b53d7776068_64_measureText)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBase_obj,measureText,(void))


hx::ObjectPtr< TextBase_obj > TextBase_obj::__new() {
	hx::ObjectPtr< TextBase_obj > __this = new TextBase_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextBase_obj > TextBase_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextBase_obj *__this = (TextBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextBase_obj), true, "haxe.ui.backend.TextBase"));
	*(void **)__this = TextBase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextBase_obj::TextBase_obj()
{
}

void TextBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextBase);
	HX_MARK_MEMBER_NAME(parentComponent,"parentComponent");
	HX_MARK_MEMBER_NAME(_displayData,"_displayData");
	HX_MARK_MEMBER_NAME(_inputData,"_inputData");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_htmlText,"_htmlText");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_top,"_top");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_textWidth,"_textWidth");
	HX_MARK_MEMBER_NAME(_textHeight,"_textHeight");
	HX_MARK_MEMBER_NAME(_textStyle,"_textStyle");
	HX_MARK_MEMBER_NAME(_fontInfo,"_fontInfo");
	HX_MARK_MEMBER_NAME(_dataSource,"_dataSource");
	HX_MARK_END_CLASS();
}

void TextBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentComponent,"parentComponent");
	HX_VISIT_MEMBER_NAME(_displayData,"_displayData");
	HX_VISIT_MEMBER_NAME(_inputData,"_inputData");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_htmlText,"_htmlText");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_top,"_top");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_textWidth,"_textWidth");
	HX_VISIT_MEMBER_NAME(_textHeight,"_textHeight");
	HX_VISIT_MEMBER_NAME(_textStyle,"_textStyle");
	HX_VISIT_MEMBER_NAME(_fontInfo,"_fontInfo");
	HX_VISIT_MEMBER_NAME(_dataSource,"_dataSource");
}

hx::Val TextBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_top") ) { return hx::Val( _top ); }
		if (HX_FIELD_EQ(inName,"blur") ) { return hx::Val( blur_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return hx::Val( _text ); }
		if (HX_FIELD_EQ(inName,"_left") ) { return hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_htmlText") ) { return hx::Val( _htmlText ); }
		if (HX_FIELD_EQ(inName,"_fontInfo") ) { return hx::Val( _fontInfo ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_inputData") ) { return hx::Val( _inputData ); }
		if (HX_FIELD_EQ(inName,"_textWidth") ) { return hx::Val( _textWidth ); }
		if (HX_FIELD_EQ(inName,"_textStyle") ) { return hx::Val( _textStyle ); }
		if (HX_FIELD_EQ(inName,"dataSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dataSource() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_textHeight") ) { return hx::Val( _textHeight ); }
		if (HX_FIELD_EQ(inName,"_dataSource") ) { return hx::Val( _dataSource ); }
		if (HX_FIELD_EQ(inName,"measureText") ) { return hx::Val( measureText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_displayData") ) { return hx::Val( _displayData ); }
		if (HX_FIELD_EQ(inName,"validateData") ) { return hx::Val( validateData_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"validateStyle") ) { return hx::Val( validateStyle_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_dataSource") ) { return hx::Val( get_dataSource_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_dataSource") ) { return hx::Val( set_dataSource_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parentComponent") ) { return hx::Val( parentComponent ); }
		if (HX_FIELD_EQ(inName,"validateDisplay") ) { return hx::Val( validateDisplay_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"validatePosition") ) { return hx::Val( validatePosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextBase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_top") ) { _top=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _hx_set__text(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_htmlText") ) { _hx_set__htmlText(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_fontInfo") ) { _hx_set__fontInfo(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_inputData") ) { _hx_set__inputData(HX_CTX_GET,inValue.Cast<  ::haxe::ui::core::TextInputData >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_textWidth") ) { _textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textStyle") ) { _hx_set__textStyle(HX_CTX_GET,inValue.Cast<  ::haxe::ui::styles::Style >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dataSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dataSource(inValue.Cast<  ::haxe::ui::data::DataSource >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_textHeight") ) { _textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dataSource") ) { _hx_set__dataSource(HX_CTX_GET,inValue.Cast<  ::haxe::ui::data::DataSource >()); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_displayData") ) { _hx_set__displayData(HX_CTX_GET,inValue.Cast<  ::haxe::ui::core::TextDisplayData >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parentComponent") ) { _hx_set_parentComponent(HX_CTX_GET,inValue.Cast<  ::haxe::ui::core::Component >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parentComponent",33,d6,77,24));
	outFields->push(HX_("_displayData",8d,a3,5f,90));
	outFields->push(HX_("_inputData",15,8f,30,65));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("_htmlText",17,17,ce,57));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_top",96,ab,23,3f));
	outFields->push(HX_("_width",47,fd,49,c6));
	outFields->push(HX_("_height",86,19,c3,70));
	outFields->push(HX_("_textWidth",da,c1,f2,be));
	outFields->push(HX_("_textHeight",93,55,c6,0b));
	outFields->push(HX_("_textStyle",05,b1,ad,78));
	outFields->push(HX_("_fontInfo",3c,4d,cf,0f));
	outFields->push(HX_("_dataSource",c4,43,5d,f0));
	outFields->push(HX_("dataSource",a5,76,d3,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextBase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ui::core::Component */ ,(int)offsetof(TextBase_obj,parentComponent),HX_("parentComponent",33,d6,77,24)},
	{hx::fsObject /*  ::haxe::ui::core::TextDisplayData */ ,(int)offsetof(TextBase_obj,_displayData),HX_("_displayData",8d,a3,5f,90)},
	{hx::fsObject /*  ::haxe::ui::core::TextInputData */ ,(int)offsetof(TextBase_obj,_inputData),HX_("_inputData",15,8f,30,65)},
	{hx::fsString,(int)offsetof(TextBase_obj,_text),HX_("_text",8c,e8,0a,00)},
	{hx::fsString,(int)offsetof(TextBase_obj,_htmlText),HX_("_htmlText",17,17,ce,57)},
	{hx::fsFloat,(int)offsetof(TextBase_obj,_left),HX_("_left",e6,23,c1,fa)},
	{hx::fsFloat,(int)offsetof(TextBase_obj,_top),HX_("_top",96,ab,23,3f)},
	{hx::fsFloat,(int)offsetof(TextBase_obj,_width),HX_("_width",47,fd,49,c6)},
	{hx::fsFloat,(int)offsetof(TextBase_obj,_height),HX_("_height",86,19,c3,70)},
	{hx::fsFloat,(int)offsetof(TextBase_obj,_textWidth),HX_("_textWidth",da,c1,f2,be)},
	{hx::fsFloat,(int)offsetof(TextBase_obj,_textHeight),HX_("_textHeight",93,55,c6,0b)},
	{hx::fsObject /*  ::haxe::ui::styles::Style */ ,(int)offsetof(TextBase_obj,_textStyle),HX_("_textStyle",05,b1,ad,78)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextBase_obj,_fontInfo),HX_("_fontInfo",3c,4d,cf,0f)},
	{hx::fsObject /*  ::haxe::ui::data::DataSource */ ,(int)offsetof(TextBase_obj,_dataSource),HX_("_dataSource",c4,43,5d,f0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextBase_obj_sStaticStorageInfo = 0;
#endif

static ::String TextBase_obj_sMemberFields[] = {
	HX_("parentComponent",33,d6,77,24),
	HX_("_displayData",8d,a3,5f,90),
	HX_("_inputData",15,8f,30,65),
	HX_("_text",8c,e8,0a,00),
	HX_("_htmlText",17,17,ce,57),
	HX_("_left",e6,23,c1,fa),
	HX_("_top",96,ab,23,3f),
	HX_("_width",47,fd,49,c6),
	HX_("_height",86,19,c3,70),
	HX_("_textWidth",da,c1,f2,be),
	HX_("_textHeight",93,55,c6,0b),
	HX_("_textStyle",05,b1,ad,78),
	HX_("_fontInfo",3c,4d,cf,0f),
	HX_("focus",d8,5f,89,04),
	HX_("blur",a7,42,19,41),
	HX_("_dataSource",c4,43,5d,f0),
	HX_("get_dataSource",ee,fe,c8,93),
	HX_("set_dataSource",62,e7,e8,b3),
	HX_("validateData",e0,55,63,96),
	HX_("validateStyle",bb,64,1d,b0),
	HX_("validatePosition",5f,b3,53,83),
	HX_("validateDisplay",4c,60,60,b6),
	HX_("measureText",2b,fb,80,50),
	::String(null()) };

hx::Class TextBase_obj::__mClass;

void TextBase_obj::__register()
{
	TextBase_obj _hx_dummy;
	TextBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.TextBase",2a,ee,b8,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextBase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
