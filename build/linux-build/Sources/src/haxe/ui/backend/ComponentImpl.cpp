// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_Toolkit
#include <hxinc/haxe/ui/Toolkit.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_BatchOperation
#include <hxinc/haxe/ui/backend/BatchOperation.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <hxinc/haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <hxinc/haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageBase
#include <hxinc/haxe/ui/backend/ImageBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageDisplayImpl
#include <hxinc/haxe/ui/backend/ImageDisplayImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageSurface
#include <hxinc/haxe/ui/backend/ImageSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenBase
#include <hxinc/haxe/ui/backend/ScreenBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenImpl
#include <hxinc/haxe/ui/backend/ScreenImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_TextBase
#include <hxinc/haxe/ui/backend/TextBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_TextDisplayImpl
#include <hxinc/haxe/ui/backend/TextDisplayImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_TextInputImpl
#include <hxinc/haxe/ui/backend/TextInputImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_kha_StyleHelper
#include <hxinc/haxe/ui/backend/kha/StyleHelper.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_kha_TextField
#include <hxinc/haxe/ui/backend/kha/TextField.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ImageDisplay
#include <hxinc/haxe/ui/core/ImageDisplay.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Screen
#include <hxinc/haxe/ui/core/Screen.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TextDisplay
#include <hxinc/haxe/ui/core/TextDisplay.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TextInput
#include <hxinc/haxe/ui/core/TextInput.h>
#endif
#ifndef INCLUDED_haxe_ui_events_KeyboardEvent
#include <hxinc/haxe/ui/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <hxinc/haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <hxinc/haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Rectangle
#include <hxinc/haxe/ui/geom/Rectangle.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <hxinc/haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6354e66e0651e41a_20_new,"haxe.ui.backend.ComponentImpl","new",0x2c83d563,"haxe.ui.backend.ComponentImpl.new","haxe/ui/backend/ComponentImpl.hx",20,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_49_clearCaches,"haxe.ui.backend.ComponentImpl","clearCaches",0x50f0ad61,"haxe.ui.backend.ComponentImpl.clearCaches","haxe/ui/backend/ComponentImpl.hx",49,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_58_cacheScreenPos,"haxe.ui.backend.ComponentImpl","cacheScreenPos",0x99ba16c3,"haxe.ui.backend.ComponentImpl.cacheScreenPos","haxe/ui/backend/ComponentImpl.hx",58,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_81_get_screenX,"haxe.ui.backend.ComponentImpl","get_screenX",0xbc426386,"haxe.ui.backend.ComponentImpl.get_screenX","haxe/ui/backend/ComponentImpl.hx",81,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_87_get_screenY,"haxe.ui.backend.ComponentImpl","get_screenY",0xbc426387,"haxe.ui.backend.ComponentImpl.get_screenY","haxe/ui/backend/ComponentImpl.hx",87,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_92_findRootComponent,"haxe.ui.backend.ComponentImpl","findRootComponent",0x45f9c285,"haxe.ui.backend.ComponentImpl.findRootComponent","haxe/ui/backend/ComponentImpl.hx",92,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_108_isRootComponent,"haxe.ui.backend.ComponentImpl","isRootComponent",0x63f45574,"haxe.ui.backend.ComponentImpl.isRootComponent","haxe/ui/backend/ComponentImpl.hx",108,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_111_findClipComponent,"haxe.ui.backend.ComponentImpl","findClipComponent",0x6413bc17,"haxe.ui.backend.ComponentImpl.findClipComponent","haxe/ui/backend/ComponentImpl.hx",111,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_137_inBounds,"haxe.ui.backend.ComponentImpl","inBounds",0x904bc057,"haxe.ui.backend.ComponentImpl.inBounds","haxe/ui/backend/ComponentImpl.hx",137,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_172_calcOpacity,"haxe.ui.backend.ComponentImpl","calcOpacity",0x935d19b9,"haxe.ui.backend.ComponentImpl.calcOpacity","haxe/ui/backend/ComponentImpl.hx",172,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_191_isOffscreen,"haxe.ui.backend.ComponentImpl","isOffscreen",0x044282d4,"haxe.ui.backend.ComponentImpl.isOffscreen","haxe/ui/backend/ComponentImpl.hx",191,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_213_clearBatchOperations,"haxe.ui.backend.ComponentImpl","clearBatchOperations",0xb4643b56,"haxe.ui.backend.ComponentImpl.clearBatchOperations","haxe/ui/backend/ComponentImpl.hx",213,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_220_addBatchStyleOperation,"haxe.ui.backend.ComponentImpl","addBatchStyleOperation",0x17e3e54c,"haxe.ui.backend.ComponentImpl.addBatchStyleOperation","haxe/ui/backend/ComponentImpl.hx",220,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_224_addBatchImageOperation,"haxe.ui.backend.ComponentImpl","addBatchImageOperation",0xe690d5e2,"haxe.ui.backend.ComponentImpl.addBatchImageOperation","haxe/ui/backend/ComponentImpl.hx",224,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_228_addBatchTextOperation,"haxe.ui.backend.ComponentImpl","addBatchTextOperation",0x048f69e4,"haxe.ui.backend.ComponentImpl.addBatchTextOperation","haxe/ui/backend/ComponentImpl.hx",228,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_242_renderTo,"haxe.ui.backend.ComponentImpl","renderTo",0x548ba68e,"haxe.ui.backend.ComponentImpl.renderTo","haxe/ui/backend/ComponentImpl.hx",242,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_331_renderToBatch,"haxe.ui.backend.ComponentImpl","renderToBatch",0x99102e4c,"haxe.ui.backend.ComponentImpl.renderToBatch","haxe/ui/backend/ComponentImpl.hx",331,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_338_renderToBatchOperations,"haxe.ui.backend.ComponentImpl","renderToBatchOperations",0x5541a7d8,"haxe.ui.backend.ComponentImpl.renderToBatchOperations","haxe/ui/backend/ComponentImpl.hx",338,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_356_renderStyleTo,"haxe.ui.backend.ComponentImpl","renderStyleTo",0x21875719,"haxe.ui.backend.ComponentImpl.renderStyleTo","haxe/ui/backend/ComponentImpl.hx",356,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_369_renderImageTo,"haxe.ui.backend.ComponentImpl","renderImageTo",0xe0452fc3,"haxe.ui.backend.ComponentImpl.renderImageTo","haxe/ui/backend/ComponentImpl.hx",369,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_393_renderTextTo,"haxe.ui.backend.ComponentImpl","renderTextTo",0xcae5221b,"haxe.ui.backend.ComponentImpl.renderTextTo","haxe/ui/backend/ComponentImpl.hx",393,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_421_renderToScaled,"haxe.ui.backend.ComponentImpl","renderToScaled",0x3b6e63c8,"haxe.ui.backend.ComponentImpl.renderToScaled","haxe/ui/backend/ComponentImpl.hx",421,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_441_handleSize,"haxe.ui.backend.ComponentImpl","handleSize",0xcc9b35e6,"haxe.ui.backend.ComponentImpl.handleSize","haxe/ui/backend/ComponentImpl.hx",441,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_451_handleVisibility,"haxe.ui.backend.ComponentImpl","handleVisibility",0x434d2cb7,"haxe.ui.backend.ComponentImpl.handleVisibility","haxe/ui/backend/ComponentImpl.hx",451,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_463_mapEvent,"haxe.ui.backend.ComponentImpl","mapEvent",0x8eb727fb,"haxe.ui.backend.ComponentImpl.mapEvent","haxe/ui/backend/ComponentImpl.hx",463,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_559_onTextInputChanged,"haxe.ui.backend.ComponentImpl","onTextInputChanged",0xbaddb3f3,"haxe.ui.backend.ComponentImpl.onTextInputChanged","haxe/ui/backend/ComponentImpl.hx",559,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_562_unmapEvent,"haxe.ui.backend.ComponentImpl","unmapEvent",0xd46d1094,"haxe.ui.backend.ComponentImpl.unmapEvent","haxe/ui/backend/ComponentImpl.hx",562,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_567___onMouseMove,"haxe.ui.backend.ComponentImpl","__onMouseMove",0x8254465a,"haxe.ui.backend.ComponentImpl.__onMouseMove","haxe/ui/backend/ComponentImpl.hx",567,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_596___onMouseDown,"haxe.ui.backend.ComponentImpl","__onMouseDown",0x7c615bab,"haxe.ui.backend.ComponentImpl.__onMouseDown","haxe/ui/backend/ComponentImpl.hx",596,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_616___onMouseUp,"haxe.ui.backend.ComponentImpl","__onMouseUp",0xd25b3564,"haxe.ui.backend.ComponentImpl.__onMouseUp","haxe/ui/backend/ComponentImpl.hx",616,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_658___onDoubleClick,"haxe.ui.backend.ComponentImpl","__onDoubleClick",0xfff756fb,"haxe.ui.backend.ComponentImpl.__onDoubleClick","haxe/ui/backend/ComponentImpl.hx",658,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_683___onMouseWheel,"haxe.ui.backend.ComponentImpl","__onMouseWheel",0x44bdb132,"haxe.ui.backend.ComponentImpl.__onMouseWheel","haxe/ui/backend/ComponentImpl.hx",683,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_701___onKeyDown,"haxe.ui.backend.ComponentImpl","__onKeyDown",0xae2fab25,"haxe.ui.backend.ComponentImpl.__onKeyDown","haxe/ui/backend/ComponentImpl.hx",701,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_717___onKeyUp,"haxe.ui.backend.ComponentImpl","__onKeyUp",0xceccd25e,"haxe.ui.backend.ComponentImpl.__onKeyUp","haxe/ui/backend/ComponentImpl.hx",717,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_733_hasComponentOver,"haxe.ui.backend.ComponentImpl","hasComponentOver",0xa2872614,"haxe.ui.backend.ComponentImpl.hasComponentOver","haxe/ui/backend/ComponentImpl.hx",733,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_742_getComponentsAtPoint,"haxe.ui.backend.ComponentImpl","getComponentsAtPoint",0x94d93e0e,"haxe.ui.backend.ComponentImpl.getComponentsAtPoint","haxe/ui/backend/ComponentImpl.hx",742,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_751_findChildrenAtPoint,"haxe.ui.backend.ComponentImpl","findChildrenAtPoint",0xf5f41da8,"haxe.ui.backend.ComponentImpl.findChildrenAtPoint","haxe/ui/backend/ComponentImpl.hx",751,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_759_hasChildRecursive,"haxe.ui.backend.ComponentImpl","hasChildRecursive",0x0d61af73,"haxe.ui.backend.ComponentImpl.hasChildRecursive","haxe/ui/backend/ComponentImpl.hx",759,0xefd7100e)
HX_LOCAL_STACK_FRAME(_hx_pos_480173924f690e63_315_registerBehaviours,"haxe.ui.backend.ComponentImpl","registerBehaviours",0x8495be36,"haxe.ui.backend.ComponentImpl.registerBehaviours","haxe/ui/macros/Macros.hx",315,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_afe584834299818f_521_cloneComponent,"haxe.ui.backend.ComponentImpl","cloneComponent",0x8a894d7d,"haxe.ui.backend.ComponentImpl.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",521,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_480173924f690e63_302_self,"haxe.ui.backend.ComponentImpl","self",0xca24e929,"haxe.ui.backend.ComponentImpl.self","haxe/ui/macros/Macros.hx",302,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_6354e66e0651e41a_231_useBatching,"haxe.ui.backend.ComponentImpl","useBatching",0xb42d7cd2,"haxe.ui.backend.ComponentImpl.useBatching","haxe/ui/backend/ComponentImpl.hx",231,0xefd7100e)
namespace haxe{
namespace ui{
namespace backend{

void ComponentImpl_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_20_new)
HXLINE( 595)		this->_mouseDownFlag = false;
HXLINE( 566)		this->_mouseOverFlag = false;
HXLINE(  47)		this->_hx_set__cachedOpacity(HX_CTX, null());
HXLINE(  46)		this->_hx_set__cachedRootComponent(HX_CTX, null());
HXLINE(  45)		this->_hx_set__cachedClipComponentNone(HX_CTX, null());
HXLINE(  44)		this->_hx_set__cachedClipComponent(HX_CTX, null());
HXLINE(  43)		this->_hx_set__cachedScreenY(HX_CTX, null());
HXLINE(  42)		this->_hx_set__cachedScreenX(HX_CTX, null());
HXLINE(  30)		this->_lastClickY = -1;
HXLINE(  29)		this->_lastClickX = -1;
HXLINE(  28)		this->_lastClickTimeDiff = ((Float)2147483647);
HXLINE(  27)		this->_lastClickTime = ((Float)0);
HXLINE(  24)		this->lastMouseY = -1;
HXLINE(  23)		this->lastMouseX = -1;
HXLINE(  33)		super::__construct();
HXLINE(  34)		this->_hx_set__eventMap(HX_CTX,  ::haxe::ds::StringMap_obj::__alloc( HX_CTX ));
            	}

Dynamic ComponentImpl_obj::__CreateEmpty() { return new ComponentImpl_obj; }

void *ComponentImpl_obj::_hx_vtable = 0;

Dynamic ComponentImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ComponentImpl_obj > _hx_result = new ComponentImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ComponentImpl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4a06d0bc) {
		if (inClassId<=(int)0x2a04b446) {
			if (inClassId<=(int)0x23af8dfd) {
				if (inClassId<=(int)0x0fddceef) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0fddceef;
				} else {
					return inClassId==(int)0x23af8dfd;
				}
			} else {
				return inClassId==(int)0x2a04b446;
			}
		} else {
			return inClassId==(int)0x324697fd || inClassId==(int)0x4a06d0bc;
		}
	} else {
		if (inClassId<=(int)0x7f63f3f1) {
			if (inClassId<=(int)0x7ee2d869) {
				return inClassId==(int)0x4eb0678b || inClassId==(int)0x7ee2d869;
			} else {
				return inClassId==(int)0x7f63f3f1;
			}
		} else {
			return inClassId==(int)0x7ff0cb0e;
		}
	}
}

void ComponentImpl_obj::clearCaches(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_49_clearCaches)
HXLINE(  50)		this->_hx_set__cachedScreenX(HX_CTX, null());
HXLINE(  51)		this->_hx_set__cachedScreenY(HX_CTX, null());
HXLINE(  52)		this->_hx_set__cachedClipComponent(HX_CTX, null());
HXLINE(  53)		this->_hx_set__cachedClipComponentNone(HX_CTX, null());
HXLINE(  54)		this->_hx_set__cachedRootComponent(HX_CTX, null());
HXLINE(  55)		this->_hx_set__cachedOpacity(HX_CTX, null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,clearCaches,(void))

void ComponentImpl_obj::cacheScreenPos(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_58_cacheScreenPos)
HXLINE(  59)		bool _hx_tmp;
HXDLIN(  59)		if (hx::IsNotNull( this->_cachedScreenX )) {
HXLINE(  59)			_hx_tmp = hx::IsNotNull( this->_cachedScreenY );
            		}
            		else {
HXLINE(  59)			_hx_tmp = false;
            		}
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  60)			return;
            		}
HXLINE(  63)		 ::haxe::ui::core::Component c = hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this));
HXLINE(  64)		Float xpos = ( (Float)(0) );
HXLINE(  65)		Float ypos = ( (Float)(0) );
HXLINE(  66)		while(hx::IsNotNull( c )){
HXLINE(  67)			xpos = (xpos + c->get_left());
HXLINE(  68)			ypos = (ypos + c->get_top());
HXLINE(  69)			if (hx::IsNotNull( c->get_componentClipRect() )) {
HXLINE(  70)				xpos = (xpos - c->get_componentClipRect()->left);
HXLINE(  71)				ypos = (ypos - c->get_componentClipRect()->top);
            			}
HXLINE(  73)			c = c->parentComponent;
            		}
HXLINE(  76)		this->_hx_set__cachedScreenX(HX_CTX, xpos);
HXLINE(  77)		this->_hx_set__cachedScreenY(HX_CTX, ypos);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,cacheScreenPos,(void))

Float ComponentImpl_obj::get_screenX(){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_81_get_screenX)
HXLINE(  82)		this->cacheScreenPos();
HXLINE(  83)		return ( (Float)(this->_cachedScreenX) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,get_screenX,return )

Float ComponentImpl_obj::get_screenY(){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_87_get_screenY)
HXLINE(  88)		this->cacheScreenPos();
HXLINE(  89)		return ( (Float)(this->_cachedScreenY) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,get_screenY,return )

 ::haxe::ui::core::Component ComponentImpl_obj::findRootComponent(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_92_findRootComponent)
HXLINE(  93)		if (hx::IsNotNull( this->_cachedRootComponent )) {
HXLINE(  94)			return this->_cachedRootComponent;
            		}
HXLINE(  97)		 ::haxe::ui::core::Component c = hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this));
HXLINE(  98)		while(hx::IsNotNull( c->parentComponent )){
HXLINE(  99)			c = c->parentComponent;
            		}
HXLINE( 102)		this->_hx_set__cachedRootComponent(HX_CTX, c);
HXLINE( 104)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,findRootComponent,return )

bool ComponentImpl_obj::isRootComponent(){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_108_isRootComponent)
HXDLIN( 108)		return hx::IsEq( this->findRootComponent(),hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,isRootComponent,return )

 ::haxe::ui::core::Component ComponentImpl_obj::findClipComponent(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_111_findClipComponent)
HXLINE( 112)		if (hx::IsNotNull( this->_cachedClipComponent )) {
HXLINE( 113)			return this->_cachedClipComponent;
            		}
            		else {
HXLINE( 114)			if (hx::IsEq( this->_cachedClipComponentNone,true )) {
HXLINE( 115)				return null();
            			}
            		}
HXLINE( 118)		 ::haxe::ui::core::Component c = hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this));
HXLINE( 119)		 ::haxe::ui::core::Component clip = null();
HXLINE( 120)		while(hx::IsNotNull( c )){
HXLINE( 121)			if (hx::IsNotNull( c->get_componentClipRect() )) {
HXLINE( 122)				clip = c;
HXLINE( 123)				goto _hx_goto_9;
            			}
HXLINE( 125)			c = c->parentComponent;
            		}
            		_hx_goto_9:;
HXLINE( 128)		this->_hx_set__cachedClipComponent(HX_CTX, clip);
HXLINE( 129)		if (hx::IsNull( clip )) {
HXLINE( 130)			this->_hx_set__cachedClipComponentNone(HX_CTX, true);
            		}
HXLINE( 133)		return clip;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,findClipComponent,return )

bool ComponentImpl_obj::inBounds(int x,int y){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_137_inBounds)
HXLINE( 138)		if ((hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this))->get_hidden() == true)) {
HXLINE( 139)			return false;
            		}
HXLINE( 142)		bool b = false;
HXLINE( 143)		Float sx = this->get_screenX();
HXDLIN( 143)		Float sx1 = (sx * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 144)		Float sy = this->get_screenY();
HXDLIN( 144)		Float sy1 = (sy * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 145)		 ::Dynamic cx = hx::TCast<  ::haxe::ui::core::ComponentBounds >::cast(hx::ObjectPtr<OBJ_>(this))->get_componentWidth();
HXDLIN( 145)		Float cx1 = (( (Float)(cx) ) * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 146)		 ::Dynamic cy = hx::TCast<  ::haxe::ui::core::ComponentBounds >::cast(hx::ObjectPtr<OBJ_>(this))->get_componentHeight();
HXDLIN( 146)		Float cy1 = (( (Float)(cy) ) * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 148)		bool _hx_tmp;
HXDLIN( 148)		bool _hx_tmp1;
HXDLIN( 148)		bool _hx_tmp2;
HXDLIN( 148)		if ((x >= sx1)) {
HXLINE( 148)			_hx_tmp2 = (y >= sy1);
            		}
            		else {
HXLINE( 148)			_hx_tmp2 = false;
            		}
HXDLIN( 148)		if (_hx_tmp2) {
HXLINE( 148)			_hx_tmp1 = (x <= (sx1 + cx1));
            		}
            		else {
HXLINE( 148)			_hx_tmp1 = false;
            		}
HXDLIN( 148)		if (_hx_tmp1) {
HXLINE( 148)			_hx_tmp = (y <= (sy1 + cy1));
            		}
            		else {
HXLINE( 148)			_hx_tmp = false;
            		}
HXDLIN( 148)		if (_hx_tmp) {
HXLINE( 149)			b = true;
            		}
HXLINE( 153)		if ((b == true)) {
HXLINE( 154)			 ::haxe::ui::core::Component clip = this->findClipComponent();
HXLINE( 155)			if (hx::IsNotNull( clip )) {
HXLINE( 156)				b = false;
HXLINE( 157)				Float sx2 = clip->get_screenX();
HXDLIN( 157)				Float sx3 = (sx2 + clip->get_componentClipRect()->left);
HXDLIN( 157)				Float sx4 = (sx3 * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 158)				Float sy2 = clip->get_screenY();
HXDLIN( 158)				Float sy3 = (sy2 + clip->get_componentClipRect()->top);
HXDLIN( 158)				Float sy4 = (sy3 * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 159)				Float cx2 = clip->get_componentClipRect()->width;
HXDLIN( 159)				Float cx3 = (cx2 * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 160)				Float cy2 = clip->get_componentClipRect()->height;
HXDLIN( 160)				Float cy3 = (cy2 * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 161)				bool _hx_tmp3;
HXDLIN( 161)				bool _hx_tmp4;
HXDLIN( 161)				bool _hx_tmp5;
HXDLIN( 161)				if ((x >= sx4)) {
HXLINE( 161)					_hx_tmp5 = (y >= sy4);
            				}
            				else {
HXLINE( 161)					_hx_tmp5 = false;
            				}
HXDLIN( 161)				if (_hx_tmp5) {
HXLINE( 161)					_hx_tmp4 = (x <= (sx4 + cx3));
            				}
            				else {
HXLINE( 161)					_hx_tmp4 = false;
            				}
HXDLIN( 161)				if (_hx_tmp4) {
HXLINE( 161)					_hx_tmp3 = (y <= (sy4 + cy3));
            				}
            				else {
HXLINE( 161)					_hx_tmp3 = false;
            				}
HXDLIN( 161)				if (_hx_tmp3) {
HXLINE( 162)					b = true;
            				}
            			}
            		}
HXLINE( 166)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,inBounds,return )

Float ComponentImpl_obj::calcOpacity(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_172_calcOpacity)
HXLINE( 173)		if (hx::IsNotNull( this->_cachedOpacity )) {
HXLINE( 174)			return ( (Float)(this->_cachedOpacity) );
            		}
HXLINE( 177)		Float opacity = ( (Float)(1) );
HXLINE( 178)		 ::haxe::ui::core::Component c = hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this));
HXLINE( 179)		while(hx::IsNotNull( c )){
HXLINE( 180)			if (hx::IsNotNull( c->get_style()->opacity )) {
HXLINE( 181)				opacity = (opacity * ( (Float)(c->get_style()->opacity) ));
            			}
HXLINE( 183)			c = c->parentComponent;
            		}
HXLINE( 186)		this->_hx_set__cachedOpacity(HX_CTX, opacity);
HXLINE( 188)		return opacity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,calcOpacity,return )

bool ComponentImpl_obj::isOffscreen(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_191_isOffscreen)
HXLINE( 192)		Float x = this->get_screenX();
HXLINE( 193)		Float y = this->get_screenY();
HXLINE( 194)		Float w = ( (Float)(this->get_width()) );
HXLINE( 195)		Float h = ( (Float)(this->get_height()) );
HXLINE( 197)		 ::haxe::ui::core::Component clipComponent = this->findClipComponent();
HXLINE( 198)		 ::haxe::ui::geom::Rectangle thisRect =  ::haxe::ui::geom::Rectangle_obj::__alloc( HX_CTX ,x,y,w,h);
HXLINE( 199)		bool _hx_tmp;
HXDLIN( 199)		if (hx::IsNotNull( clipComponent )) {
HXLINE( 199)			_hx_tmp = hx::IsNotEq( clipComponent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 199)			_hx_tmp = false;
            		}
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 200)			Float screenClipRect = clipComponent->get_screenX();
HXDLIN( 200)			Float screenClipRect1 = (screenClipRect + clipComponent->get_componentClipRect()->left);
HXDLIN( 200)			Float screenClipRect2 = clipComponent->get_screenY();
HXDLIN( 200)			Float screenClipRect3 = (screenClipRect2 + clipComponent->get_componentClipRect()->top);
HXDLIN( 200)			Float screenClipRect4 = clipComponent->get_componentClipRect()->width;
HXDLIN( 200)			 ::haxe::ui::geom::Rectangle screenClipRect5 =  ::haxe::ui::geom::Rectangle_obj::__alloc( HX_CTX ,screenClipRect1,screenClipRect3,screenClipRect4,clipComponent->get_componentClipRect()->height);
HXLINE( 201)			return !(screenClipRect5->intersects(thisRect));
            		}
            		else {
HXLINE( 203)			Float screenRect = ::haxe::ui::core::Screen_obj::get_instance()->get_width();
HXDLIN( 203)			 ::haxe::ui::geom::Rectangle screenRect1 =  ::haxe::ui::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,screenRect,::haxe::ui::core::Screen_obj::get_instance()->get_height());
HXLINE( 204)			return !(screenRect1->intersects(thisRect));
            		}
HXLINE( 199)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,isOffscreen,return )

void ComponentImpl_obj::clearBatchOperations(){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_213_clearBatchOperations)
HXLINE( 214)		this->findRootComponent()->_hx_set__batchStyleOperations(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE( 215)		this->findRootComponent()->_hx_set__batchImageOperations(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE( 216)		this->findRootComponent()->_hx_set__batchTextOperations(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,clearBatchOperations,(void))

void ComponentImpl_obj::addBatchStyleOperation( ::haxe::ui::backend::BatchOperation op){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_220_addBatchStyleOperation)
HXDLIN( 220)		this->findRootComponent()->_batchStyleOperations->push(op);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,addBatchStyleOperation,(void))

void ComponentImpl_obj::addBatchImageOperation( ::haxe::ui::backend::BatchOperation op){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_224_addBatchImageOperation)
HXDLIN( 224)		this->findRootComponent()->_batchImageOperations->push(op);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,addBatchImageOperation,(void))

void ComponentImpl_obj::addBatchTextOperation( ::haxe::ui::backend::BatchOperation op){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_228_addBatchTextOperation)
HXDLIN( 228)		this->findRootComponent()->_batchTextOperations->push(op);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,addBatchTextOperation,(void))

void ComponentImpl_obj::renderTo( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_242_renderTo)
HXLINE( 243)		bool _hx_tmp;
HXDLIN( 243)		if ((this->get_isReady() != false)) {
HXLINE( 243)			_hx_tmp = (hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this))->get_hidden() == true);
            		}
            		else {
HXLINE( 243)			_hx_tmp = true;
            		}
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 244)			return;
            		}
HXLINE( 247)		this->clearCaches();
HXLINE( 249)		if ((this->isOffscreen() == true)) {
HXLINE( 250)			return;
            		}
HXLINE( 253)		bool _hx_tmp1;
HXDLIN( 253)		bool _hx_tmp2;
HXDLIN( 253)		if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 253)			_hx_tmp2 = true;
            		}
            		else {
HXLINE( 253)			if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 253)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 253)				_hx_tmp2 = true;
            			}
            		}
HXDLIN( 253)		if ((_hx_tmp2 == true)) {
HXLINE( 253)			_hx_tmp1 = this->isRootComponent();
            		}
            		else {
HXLINE( 253)			_hx_tmp1 = false;
            		}
HXDLIN( 253)		if (_hx_tmp1) {
HXLINE( 254)			this->clearBatchOperations();
            		}
HXLINE( 257)		Float x = this->get_screenX();
HXLINE( 258)		Float y = this->get_screenY();
HXLINE( 259)		Float w = ( (Float)(this->get_width()) );
HXLINE( 260)		Float h = ( (Float)(this->get_height()) );
HXLINE( 262)		 ::haxe::ui::styles::Style style = this->get_style();
HXLINE( 263)		if (hx::IsNull( style )) {
HXLINE( 264)			return;
            		}
HXLINE( 267)		 ::haxe::ui::geom::Rectangle clipRect = hx::TCast<  ::haxe::ui::core::ComponentBounds >::cast(hx::ObjectPtr<OBJ_>(this))->get_componentClipRect();
HXLINE( 268)		if (hx::IsNotNull( clipRect )) {
HXLINE( 269)			Float clx = (x + clipRect->left);
HXDLIN( 269)			int clx1 = ::Std_obj::_hx_int((clx * ::haxe::ui::Toolkit_obj::get_scaleX()));
HXLINE( 270)			Float cly = (y + clipRect->top);
HXDLIN( 270)			int cly1 = ::Std_obj::_hx_int((cly * ::haxe::ui::Toolkit_obj::get_scaleY()));
HXLINE( 271)			Float clipRect1 = clipRect->width;
HXDLIN( 271)			int clw = ::Math_obj::ceil((clipRect1 * ::haxe::ui::Toolkit_obj::get_scaleX()));
HXLINE( 272)			Float clipRect2 = clipRect->height;
HXDLIN( 272)			int clh = ::Math_obj::ceil((clipRect2 * ::haxe::ui::Toolkit_obj::get_scaleY()));
HXLINE( 273)			bool _hx_tmp3;
HXDLIN( 273)			if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 273)				_hx_tmp3 = true;
            			}
            			else {
HXLINE( 273)				if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 273)					_hx_tmp3 = false;
            				}
            				else {
HXLINE( 273)					_hx_tmp3 = true;
            				}
            			}
HXDLIN( 273)			if ((_hx_tmp3 == true)) {
HXLINE( 274)				this->addBatchStyleOperation(::haxe::ui::backend::BatchOperation_obj::ApplyScissor(clx1,cly1,clw,clh));
HXLINE( 275)				this->addBatchImageOperation(::haxe::ui::backend::BatchOperation_obj::ApplyScissor(clx1,cly1,clw,clh));
HXLINE( 276)				this->addBatchTextOperation(::haxe::ui::backend::BatchOperation_obj::ApplyScissor(clx1,cly1,clw,clh));
            			}
            			else {
HXLINE( 278)				bool _hx_tmp4;
HXDLIN( 278)				if ((clw >= 0)) {
HXLINE( 278)					_hx_tmp4 = (clh >= 0);
            				}
            				else {
HXLINE( 278)					_hx_tmp4 = false;
            				}
HXDLIN( 278)				if (_hx_tmp4) {
HXLINE( 279)					g->scissor(clx1,cly1,clw,clh);
            				}
            			}
            		}
HXLINE( 284)		bool _hx_tmp5;
HXDLIN( 284)		if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 284)			_hx_tmp5 = true;
            		}
            		else {
HXLINE( 284)			if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 284)				_hx_tmp5 = false;
            			}
            			else {
HXLINE( 284)				_hx_tmp5 = true;
            			}
            		}
HXDLIN( 284)		if ((_hx_tmp5 == true)) {
HXLINE( 285)			this->addBatchStyleOperation(::haxe::ui::backend::BatchOperation_obj::DrawStyle(hx::ObjectPtr<OBJ_>(this)));
            		}
            		else {
HXLINE( 287)			this->renderStyleTo(g,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 290)		bool _hx_tmp6;
HXDLIN( 290)		if (hx::IsNotNull( this->_imageDisplay )) {
HXLINE( 290)			_hx_tmp6 = hx::IsNotNull( this->_imageDisplay->_buffer );
            		}
            		else {
HXLINE( 290)			_hx_tmp6 = false;
            		}
HXDLIN( 290)		if (_hx_tmp6) {
HXLINE( 291)			bool _hx_tmp7;
HXDLIN( 291)			if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 291)				_hx_tmp7 = true;
            			}
            			else {
HXLINE( 291)				if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 291)					_hx_tmp7 = false;
            				}
            				else {
HXLINE( 291)					_hx_tmp7 = true;
            				}
            			}
HXDLIN( 291)			if ((_hx_tmp7 == true)) {
HXLINE( 292)				this->addBatchImageOperation(::haxe::ui::backend::BatchOperation_obj::DrawImage(hx::ObjectPtr<OBJ_>(this)));
            			}
            			else {
HXLINE( 294)				this->renderImageTo(g,hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 298)		bool _hx_tmp8;
HXDLIN( 298)		if (hx::IsNull( this->_textDisplay )) {
HXLINE( 298)			_hx_tmp8 = hx::IsNotNull( this->_textInput );
            		}
            		else {
HXLINE( 298)			_hx_tmp8 = true;
            		}
HXDLIN( 298)		if (_hx_tmp8) {
HXLINE( 299)			bool _hx_tmp9;
HXDLIN( 299)			if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 299)				_hx_tmp9 = true;
            			}
            			else {
HXLINE( 299)				if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 299)					_hx_tmp9 = false;
            				}
            				else {
HXLINE( 299)					_hx_tmp9 = true;
            				}
            			}
HXDLIN( 299)			if ((_hx_tmp9 == true)) {
HXLINE( 300)				this->addBatchTextOperation(::haxe::ui::backend::BatchOperation_obj::DrawText(hx::ObjectPtr<OBJ_>(this)));
            			}
            			else {
HXLINE( 302)				this->renderTextTo(g,hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 306)		{
HXLINE( 306)			int _g = 0;
HXDLIN( 306)			 ::haxe::ui::core::Component _this = hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 306)			::Array< ::Dynamic> _g1;
HXDLIN( 306)			if (hx::IsNull( _this->_children )) {
HXLINE( 306)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 306)				_g1 = _this->_children;
            			}
HXDLIN( 306)			while((_g < _g1->length)){
HXLINE( 306)				 ::haxe::ui::core::Component c = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 306)				_g = (_g + 1);
HXLINE( 307)				c->renderTo(g);
            			}
            		}
HXLINE( 310)		bool _hx_tmp10;
HXDLIN( 310)		if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 310)			_hx_tmp10 = true;
            		}
            		else {
HXLINE( 310)			if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 310)				_hx_tmp10 = false;
            			}
            			else {
HXLINE( 310)				_hx_tmp10 = true;
            			}
            		}
HXDLIN( 310)		if ((_hx_tmp10 == false)) {
HXLINE( 311)			g->set_opacity(( (Float)(1) ));
            		}
HXLINE( 314)		if (hx::IsNotNull( clipRect )) {
HXLINE( 315)			bool _hx_tmp11;
HXDLIN( 315)			if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 315)				_hx_tmp11 = true;
            			}
            			else {
HXLINE( 315)				if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 315)					_hx_tmp11 = false;
            				}
            				else {
HXLINE( 315)					_hx_tmp11 = true;
            				}
            			}
HXDLIN( 315)			if ((_hx_tmp11 == true)) {
HXLINE( 316)				this->addBatchStyleOperation(::haxe::ui::backend::BatchOperation_obj::ClearScissor_dyn());
HXLINE( 317)				this->addBatchImageOperation(::haxe::ui::backend::BatchOperation_obj::ClearScissor_dyn());
HXLINE( 318)				this->addBatchTextOperation(::haxe::ui::backend::BatchOperation_obj::ClearScissor_dyn());
            			}
            			else {
HXLINE( 320)				g->disableScissor();
            			}
            		}
HXLINE( 324)		bool _hx_tmp12;
HXDLIN( 324)		bool _hx_tmp13;
HXDLIN( 324)		if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 324)			_hx_tmp13 = true;
            		}
            		else {
HXLINE( 324)			if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 324)				_hx_tmp13 = false;
            			}
            			else {
HXLINE( 324)				_hx_tmp13 = true;
            			}
            		}
HXDLIN( 324)		if ((_hx_tmp13 == true)) {
HXLINE( 324)			_hx_tmp12 = this->isRootComponent();
            		}
            		else {
HXLINE( 324)			_hx_tmp12 = false;
            		}
HXDLIN( 324)		if (_hx_tmp12) {
HXLINE( 325)			this->renderToBatch(g);
            		}
HXLINE( 328)		this->clearCaches();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,renderTo,(void))

void ComponentImpl_obj::renderToBatch( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_331_renderToBatch)
HXLINE( 332)		this->renderToBatchOperations(g,this->_batchStyleOperations);
HXLINE( 333)		this->renderToBatchOperations(g,this->_batchImageOperations);
HXLINE( 334)		this->renderToBatchOperations(g,this->_batchTextOperations);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,renderToBatch,(void))

void ComponentImpl_obj::renderToBatchOperations( ::kha::graphics2::Graphics g,::Array< ::Dynamic> operations){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_338_renderToBatchOperations)
HXDLIN( 338)		int _g = 0;
HXDLIN( 338)		while((_g < operations->length)){
HXDLIN( 338)			 ::haxe::ui::backend::BatchOperation op = operations->__get(_g).StaticCast<  ::haxe::ui::backend::BatchOperation >();
HXDLIN( 338)			_g = (_g + 1);
HXLINE( 339)			switch((int)(op->_hx_getIndex())){
            				case (int)0: {
HXLINE( 344)					 ::haxe::ui::backend::ComponentImpl c = op->_hx_getObject(0).StaticCast<  ::haxe::ui::backend::ComponentImpl >();
HXLINE( 345)					this->renderStyleTo(g,c);
            				}
            				break;
            				case (int)1: {
HXLINE( 346)					 ::haxe::ui::backend::ComponentImpl c1 = op->_hx_getObject(0).StaticCast<  ::haxe::ui::backend::ComponentImpl >();
HXLINE( 347)					this->renderImageTo(g,c1);
            				}
            				break;
            				case (int)2: {
HXLINE( 348)					 ::haxe::ui::backend::ComponentImpl c2 = op->_hx_getObject(0).StaticCast<  ::haxe::ui::backend::ComponentImpl >();
HXLINE( 349)					this->renderTextTo(g,c2);
            				}
            				break;
            				case (int)3: {
HXLINE( 340)					int sh = op->_hx_getInt(3);
HXDLIN( 340)					int sw = op->_hx_getInt(2);
HXDLIN( 340)					int sy = op->_hx_getInt(1);
HXDLIN( 340)					int sx = op->_hx_getInt(0);
HXLINE( 341)					bool _hx_tmp;
HXDLIN( 341)					if ((sw >= 0)) {
HXLINE( 341)						_hx_tmp = (sh >= 0);
            					}
            					else {
HXLINE( 341)						_hx_tmp = false;
            					}
HXDLIN( 341)					if (_hx_tmp) {
HXLINE( 342)						g->scissor(sx,sy,sw,sh);
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 351)					g->disableScissor();
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,renderToBatchOperations,(void))

void ComponentImpl_obj::renderStyleTo( ::kha::graphics2::Graphics g, ::haxe::ui::backend::ComponentImpl c){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_356_renderStyleTo)
HXLINE( 357)		g->set_opacity(c->calcOpacity());
HXLINE( 358)		Float x = c->get_screenX();
HXLINE( 359)		Float y = c->get_screenY();
HXLINE( 360)		Float w = ( (Float)(c->get_width()) );
HXLINE( 361)		Float h = ( (Float)(c->get_height()) );
HXLINE( 362)		 ::haxe::ui::styles::Style style = c->get_style();
HXLINE( 364)		::haxe::ui::backend::kha::StyleHelper_obj::paintStyle(g,style,x,y,w,h);
HXLINE( 366)		g->set_opacity(( (Float)(1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,renderStyleTo,(void))

void ComponentImpl_obj::renderImageTo( ::kha::graphics2::Graphics g, ::haxe::ui::backend::ComponentImpl c){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_369_renderImageTo)
HXLINE( 370)		g->set_opacity(c->calcOpacity());
HXLINE( 372)		Float x = c->get_screenX();
HXLINE( 373)		Float y = c->get_screenY();
HXLINE( 374)		Float w = ( (Float)(c->get_width()) );
HXLINE( 375)		Float h = ( (Float)(c->get_height()) );
HXLINE( 376)		Float imageX = (x + c->_imageDisplay->get_left());
HXDLIN( 376)		Float imageX1 = (imageX * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 377)		Float imageY = (y + c->_imageDisplay->get_top());
HXDLIN( 377)		Float imageY1 = (imageY * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 378)		int orgScaleQuality = g->get_imageScaleQuality();
HXLINE( 380)		g->set_imageScaleQuality(0);
HXLINE( 381)		if ((c->_imageDisplay->get_scaled() == true)) {
HXLINE( 382)			 ::kha::Image c1 = c->_imageDisplay->_buffer;
HXDLIN( 382)			Float _hx_tmp = c->_imageDisplay->get_imageWidth();
HXDLIN( 382)			g->drawScaledImage(c1,( (float)(imageX1) ),( (float)(imageY1) ),( (float)(_hx_tmp) ),( (float)(c->_imageDisplay->get_imageHeight()) ));
            		}
            		else {
HXLINE( 383)			if ((::haxe::ui::Toolkit_obj::get_scale() != 1)) {
HXLINE( 384)				 ::kha::Image c2 = c->_imageDisplay->_buffer;
HXDLIN( 384)				Float _hx_tmp1 = c->_imageDisplay->get_imageWidth();
HXDLIN( 384)				Float _hx_tmp2 = (_hx_tmp1 * ::haxe::ui::Toolkit_obj::get_scaleX());
HXDLIN( 384)				Float _hx_tmp3 = c->_imageDisplay->get_imageHeight();
HXDLIN( 384)				g->drawScaledImage(c2,( (float)(imageX1) ),( (float)(imageY1) ),( (float)(_hx_tmp2) ),( (float)((_hx_tmp3 * ::haxe::ui::Toolkit_obj::get_scaleY())) ));
            			}
            			else {
HXLINE( 386)				g->drawImage(c->_imageDisplay->_buffer,( (float)(imageX1) ),( (float)(imageY1) ));
            			}
            		}
HXLINE( 388)		g->set_imageScaleQuality(orgScaleQuality);
HXLINE( 390)		g->set_opacity(( (Float)(1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,renderImageTo,(void))

void ComponentImpl_obj::renderTextTo( ::kha::graphics2::Graphics g, ::haxe::ui::backend::ComponentImpl c){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_393_renderTextTo)
HXLINE( 394)		g->set_opacity(c->calcOpacity());
HXLINE( 395)		Float x = c->get_screenX();
HXLINE( 396)		Float y = c->get_screenY();
HXLINE( 397)		Float w = ( (Float)(c->get_width()) );
HXLINE( 398)		Float h = ( (Float)(c->get_height()) );
HXLINE( 399)		 ::haxe::ui::styles::Style style = c->get_style();
HXLINE( 402)		if (hx::IsNotNull( style->color )) {
HXLINE( 403)			g->set_color((( (int)(style->color) ) | -16777216));
            		}
            		else {
HXLINE( 405)			g->set_color((-16777216 | -16777216));
            		}
HXLINE( 408)		if (hx::IsNotNull( c->_textDisplay )) {
HXLINE( 409)			 ::haxe::ui::core::TextDisplay c1 = c->_textDisplay;
HXDLIN( 409)			Float _hx_tmp = (x * ::haxe::ui::Toolkit_obj::get_scaleX());
HXDLIN( 409)			c1->renderTo(g,_hx_tmp,(y * ::haxe::ui::Toolkit_obj::get_scaleY()));
            		}
HXLINE( 412)		if (hx::IsNotNull( c->_textInput )) {
HXLINE( 413)			 ::haxe::ui::core::TextInput c2 = c->_textInput;
HXDLIN( 413)			Float _hx_tmp1 = (x * ::haxe::ui::Toolkit_obj::get_scaleX());
HXDLIN( 413)			c2->renderTo(g,_hx_tmp1,(y * ::haxe::ui::Toolkit_obj::get_scaleY()));
            		}
HXLINE( 416)		g->set_color(-1);
HXLINE( 417)		g->set_opacity(( (Float)(1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,renderTextTo,(void))

void ComponentImpl_obj::renderToScaled( ::kha::graphics2::Graphics g,Float scaleX,Float scaleY){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_421_renderToScaled)
HXLINE( 422)		 ::Dynamic cx = hx::TCast<  ::haxe::ui::core::ComponentBounds >::cast(hx::ObjectPtr<OBJ_>(this))->get_width();
HXDLIN( 422)		int cx1 = ::Std_obj::_hx_int((( (Float)(cx) ) * ::haxe::ui::Toolkit_obj::get_scaleX()));
HXLINE( 423)		 ::Dynamic cy = hx::TCast<  ::haxe::ui::core::ComponentBounds >::cast(hx::ObjectPtr<OBJ_>(this))->get_height();
HXDLIN( 423)		int cy1 = ::Std_obj::_hx_int((( (Float)(cy) ) * ::haxe::ui::Toolkit_obj::get_scaleY()));
HXLINE( 425)		bool _hx_tmp;
HXDLIN( 425)		bool _hx_tmp1;
HXDLIN( 425)		if (hx::IsNotNull( this->_componentBuffer )) {
HXLINE( 425)			_hx_tmp1 = (this->_componentBuffer->get_width() != cx1);
            		}
            		else {
HXLINE( 425)			_hx_tmp1 = true;
            		}
HXDLIN( 425)		if (!(_hx_tmp1)) {
HXLINE( 425)			_hx_tmp = (this->_componentBuffer->get_height() != cy1);
            		}
            		else {
HXLINE( 425)			_hx_tmp = true;
            		}
HXDLIN( 425)		if (_hx_tmp) {
HXLINE( 426)			if (hx::IsNotNull( this->_componentBuffer )) {
HXLINE( 427)				this->_componentBuffer->unload();
            			}
HXLINE( 429)			this->_hx_set__componentBuffer(HX_CTX, ::kha::Image_obj::createRenderTarget(cx1,cy1,null(),null(),null(),null()));
            		}
HXLINE( 432)		g->end();
HXLINE( 433)		this->_componentBuffer->get_g2()->begin(true,-1);
HXLINE( 434)		this->renderTo(this->_componentBuffer->get_g2());
HXLINE( 435)		this->_componentBuffer->get_g2()->end();
HXLINE( 436)		g->begin(null(),null());
HXLINE( 438)		g->drawScaledImage(this->_componentBuffer,( (float)(0) ),( (float)(0) ),( (float)((( (Float)(cx1) ) * scaleX)) ),( (float)((( (Float)(cy1) ) * scaleY)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ComponentImpl_obj,renderToScaled,(void))

void ComponentImpl_obj::handleSize( ::Dynamic width, ::Dynamic height, ::haxe::ui::styles::Style style){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_441_handleSize)
HXLINE( 442)		bool _hx_tmp;
HXDLIN( 442)		bool _hx_tmp1;
HXDLIN( 442)		bool _hx_tmp2;
HXDLIN( 442)		if (hx::IsNotNull( width )) {
HXLINE( 442)			_hx_tmp2 = hx::IsNull( height );
            		}
            		else {
HXLINE( 442)			_hx_tmp2 = true;
            		}
HXDLIN( 442)		if (!(_hx_tmp2)) {
HXLINE( 442)			_hx_tmp1 = hx::IsLessEq( width,0 );
            		}
            		else {
HXLINE( 442)			_hx_tmp1 = true;
            		}
HXDLIN( 442)		if (!(_hx_tmp1)) {
HXLINE( 442)			_hx_tmp = hx::IsLessEq( height,0 );
            		}
            		else {
HXLINE( 442)			_hx_tmp = true;
            		}
HXDLIN( 442)		if (_hx_tmp) {
HXLINE( 443)			return;
            		}
HXLINE( 446)		bool _hx_tmp3;
HXDLIN( 446)		if (hx::IsNotNull( style->clip )) {
HXLINE( 446)			_hx_tmp3 = hx::IsEq( style->clip,true );
            		}
            		else {
HXLINE( 446)			_hx_tmp3 = false;
            		}
HXDLIN( 446)		if (_hx_tmp3) {
HXLINE( 447)			hx::TCast<  ::haxe::ui::core::ComponentBounds >::cast(hx::ObjectPtr<OBJ_>(this))->set_componentClipRect( ::haxe::ui::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height));
            		}
            	}


void ComponentImpl_obj::handleVisibility(bool show){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_451_handleVisibility)
HXLINE( 452)		 ::haxe::ui::core::Component c = hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this));
HXLINE( 453)		{
HXLINE( 453)			int _g = 0;
HXDLIN( 453)			::Array< ::Dynamic> _g1;
HXDLIN( 453)			if (hx::IsNull( c->_children )) {
HXLINE( 453)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 453)				_g1 = c->_children;
            			}
HXDLIN( 453)			while((_g < _g1->length)){
HXLINE( 453)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 453)				_g = (_g + 1);
HXLINE( 454)				child->handleVisibility(show);
            			}
            		}
            	}


void ComponentImpl_obj::mapEvent(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_463_mapEvent)
HXDLIN( 463)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE( 550)			if ((this->_eventMap->exists(type) == false)) {
HXLINE( 551)				if ((this->hasTextInput() == true)) {
HXLINE( 552)					this->getTextInput()->_tf->notify(this->onTextInputChanged_dyn(),null());
            				}
            			}
HXLINE( 550)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("click",48,7c,5e,48)) ){
HXLINE( 492)			if ((this->_eventMap->exists(HX_("click",48,7c,5e,48)) == false)) {
HXLINE( 493)				this->_eventMap->set(HX_("click",48,7c,5e,48),listener);
HXLINE( 495)				if ((this->_eventMap->exists(HX_("mousedown",07,85,e9,03)) == false)) {
HXLINE( 496)					::kha::input::Mouse_obj::get(null())->notify(this->_hx___onMouseDown_dyn(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 497)					this->_eventMap->set(HX_("mousedown",07,85,e9,03),listener);
            				}
HXLINE( 500)				if ((this->_eventMap->exists(HX_("mouseup",c0,0f,73,c0)) == false)) {
HXLINE( 501)					::kha::input::Mouse_obj::get(null())->notify(null(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 502)					this->_eventMap->set(HX_("mouseup",c0,0f,73,c0),listener);
            				}
            			}
HXLINE( 492)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("doubleclick",97,93,48,3a)) ){
HXLINE( 506)			if ((this->_eventMap->exists(HX_("doubleclick",97,93,48,3a)) == false)) {
HXLINE( 507)				this->_eventMap->set(HX_("doubleclick",97,93,48,3a),listener);
HXLINE( 509)				if ((this->_eventMap->exists(HX_("mouseup",c0,0f,73,c0)) == false)) {
HXLINE( 510)					::kha::input::Mouse_obj::get(null())->notify(null(),this->_hx___onDoubleClick_dyn(),null(),null(),null());
HXLINE( 511)					this->_eventMap->set(HX_("mouseup",c0,0f,73,c0),listener);
            				}
            			}
HXLINE( 506)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("keydown",81,3d,6e,b1)) ){
HXLINE( 540)			if ((this->_eventMap->exists(HX_("keydown",81,3d,6e,b1)) == false)) {
HXLINE( 541)				::kha::input::Keyboard_obj::get(null())->notify(this->_hx___onKeyDown_dyn(),null(),null());
HXLINE( 542)				this->_eventMap->set(HX_("keydown",81,3d,6e,b1),listener);
            			}
HXLINE( 540)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("keyup",ba,d5,fe,de)) ){
HXLINE( 545)			if ((this->_eventMap->exists(HX_("keyup",ba,d5,fe,de)) == false)) {
HXLINE( 546)				::kha::input::Keyboard_obj::get(null())->notify(null(),this->_hx___onKeyUp_dyn(),null());
HXLINE( 547)				this->_eventMap->set(HX_("keyup",ba,d5,fe,de),listener);
            			}
HXLINE( 545)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mousedown",07,85,e9,03)) ){
HXLINE( 476)			if ((this->_eventMap->exists(HX_("mousedown",07,85,e9,03)) == false)) {
HXLINE( 477)				::kha::input::Mouse_obj::get(null())->notify(this->_hx___onMouseDown_dyn(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 478)				this->_eventMap->set(HX_("mousedown",07,85,e9,03),listener);
            			}
HXLINE( 476)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mouseout",89,2f,36,a4)) ){
HXLINE( 470)			if ((this->_eventMap->exists(HX_("mouseout",89,2f,36,a4)) == false)) {
HXLINE( 472)				this->_eventMap->set(HX_("mouseout",89,2f,36,a4),listener);
            			}
HXLINE( 470)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mouseover",f9,1d,34,0b)) ){
HXLINE( 465)			if ((this->_eventMap->exists(HX_("mouseover",f9,1d,34,0b)) == false)) {
HXLINE( 466)				::kha::input::Mouse_obj::get(null())->notify(null(),null(),this->_hx___onMouseMove_dyn(),null(),null());
HXLINE( 467)				this->_eventMap->set(HX_("mouseover",f9,1d,34,0b),listener);
            			}
HXLINE( 465)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mouseup",c0,0f,73,c0)) ){
HXLINE( 482)			if ((this->_eventMap->exists(HX_("mouseup",c0,0f,73,c0)) == false)) {
HXLINE( 483)				::kha::input::Mouse_obj::get(null())->notify(null(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 484)				this->_eventMap->set(HX_("mouseup",c0,0f,73,c0),listener);
            			}
HXLINE( 482)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mousewheel",56,b8,59,54)) ){
HXLINE( 487)			if (!(this->_eventMap->exists(HX_("mousewheel",56,b8,59,54)))) {
HXLINE( 488)				::kha::input::Mouse_obj::get(null())->notify(null(),null(),null(),this->_hx___onMouseWheel_dyn(),null());
HXLINE( 489)				this->_eventMap->set(HX_("mousewheel",56,b8,59,54),listener);
            			}
HXLINE( 487)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("rightclick",ec,f2,f5,b7)) ){
HXLINE( 526)			if ((this->_eventMap->exists(HX_("rightclick",ec,f2,f5,b7)) == false)) {
HXLINE( 527)				this->_eventMap->set(HX_("rightclick",ec,f2,f5,b7),listener);
HXLINE( 529)				if ((this->_eventMap->exists(HX_("rightmousedown",ab,1d,2b,41)) == false)) {
HXLINE( 530)					::kha::input::Mouse_obj::get(null())->notify(this->_hx___onMouseDown_dyn(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 531)					this->_eventMap->set(HX_("rightmousedown",ab,1d,2b,41),listener);
            				}
HXLINE( 534)				if ((this->_eventMap->exists(HX_("rightmouseup",64,77,d0,dd)) == false)) {
HXLINE( 535)					::kha::input::Mouse_obj::get(null())->notify(null(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 536)					this->_eventMap->set(HX_("rightmouseup",64,77,d0,dd),listener);
            				}
            			}
HXLINE( 526)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("rightmousedown",ab,1d,2b,41)) ){
HXLINE( 515)			if ((this->_eventMap->exists(HX_("rightmousedown",ab,1d,2b,41)) == false)) {
HXLINE( 516)				::kha::input::Mouse_obj::get(null())->notify(this->_hx___onMouseDown_dyn(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 517)				this->_eventMap->set(HX_("rightmousedown",ab,1d,2b,41),listener);
            			}
HXLINE( 515)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("rightmouseup",64,77,d0,dd)) ){
HXLINE( 521)			if ((this->_eventMap->exists(HX_("rightmouseup",64,77,d0,dd)) == false)) {
HXLINE( 522)				::kha::input::Mouse_obj::get(null())->notify(null(),this->_hx___onMouseUp_dyn(),null(),null(),null());
HXLINE( 523)				this->_eventMap->set(HX_("rightmouseup",64,77,d0,dd),listener);
            			}
HXLINE( 521)			goto _hx_goto_31;
            		}
            		_hx_goto_31:;
            	}


void ComponentImpl_obj::onTextInputChanged(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_559_onTextInputChanged)
HXDLIN( 559)		this->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,onTextInputChanged,(void))

void ComponentImpl_obj::unmapEvent(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_562_unmapEvent)
            	}


void ComponentImpl_obj::_hx___onMouseMove(int x,int y,int movementX,int movementY){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_567___onMouseMove)
HXLINE( 568)		this->lastMouseX = x;
HXLINE( 569)		this->lastMouseY = y;
HXLINE( 570)		bool i = this->inBounds(x,y);
HXLINE( 571)		bool _hx_tmp;
HXDLIN( 571)		if ((i == true)) {
HXLINE( 571)			_hx_tmp = (this->_mouseOverFlag == false);
            		}
            		else {
HXLINE( 571)			_hx_tmp = false;
            		}
HXDLIN( 571)		if (_hx_tmp) {
HXLINE( 572)			if ((this->hasComponentOver(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),x,y) == true)) {
HXLINE( 573)				return;
            			}
HXLINE( 575)			this->_mouseOverFlag = true;
HXLINE( 576)			 ::Dynamic fn = this->_eventMap->get(HX_("mouseover",f9,1d,34,0b));
HXLINE( 577)			if (hx::IsNotNull( fn )) {
HXLINE( 578)				 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mouseover",f9,1d,34,0b));
HXLINE( 579)				mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 580)				mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 581)				fn(mouseEvent);
            			}
            		}
            		else {
HXLINE( 583)			bool _hx_tmp1;
HXDLIN( 583)			if ((i == false)) {
HXLINE( 583)				_hx_tmp1 = (this->_mouseOverFlag == true);
            			}
            			else {
HXLINE( 583)				_hx_tmp1 = false;
            			}
HXDLIN( 583)			if (_hx_tmp1) {
HXLINE( 584)				this->_mouseOverFlag = false;
HXLINE( 585)				 ::Dynamic fn1 = this->_eventMap->get(HX_("mouseout",89,2f,36,a4));
HXLINE( 586)				if (hx::IsNotNull( fn1 )) {
HXLINE( 587)					 ::haxe::ui::events::MouseEvent mouseEvent1 =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mouseout",89,2f,36,a4));
HXLINE( 588)					mouseEvent1->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 589)					mouseEvent1->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 590)					fn1(mouseEvent1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ComponentImpl_obj,_hx___onMouseMove,(void))

void ComponentImpl_obj::_hx___onMouseDown(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_596___onMouseDown)
HXLINE( 597)		this->lastMouseX = x;
HXLINE( 598)		this->lastMouseY = y;
HXLINE( 599)		bool i = this->inBounds(x,y);
HXLINE( 600)		bool _hx_tmp;
HXDLIN( 600)		if ((i == true)) {
HXLINE( 600)			_hx_tmp = (this->_mouseDownFlag == false);
            		}
            		else {
HXLINE( 600)			_hx_tmp = false;
            		}
HXDLIN( 600)		if (_hx_tmp) {
HXLINE( 601)			if ((this->hasComponentOver(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),x,y) == true)) {
HXLINE( 602)				return;
            			}
HXLINE( 604)			this->_mouseDownFlag = true;
HXLINE( 605)			::String type;
HXDLIN( 605)			if ((button == 0)) {
HXLINE( 605)				type = HX_("mousedown",07,85,e9,03);
            			}
            			else {
HXLINE( 605)				type = HX_("rightmousedown",ab,1d,2b,41);
            			}
HXLINE( 606)			 ::Dynamic fn = this->_eventMap->get(type);
HXLINE( 607)			if (hx::IsNotNull( fn )) {
HXLINE( 608)				 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,type);
HXLINE( 609)				mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 610)				mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 611)				fn(mouseEvent);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ComponentImpl_obj,_hx___onMouseDown,(void))

void ComponentImpl_obj::_hx___onMouseUp(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_616___onMouseUp)
HXLINE( 617)		this->lastMouseX = x;
HXLINE( 618)		this->lastMouseY = y;
HXLINE( 619)		bool i = this->inBounds(x,y);
HXLINE( 620)		if ((i == true)) {
HXLINE( 621)			if ((this->hasComponentOver(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),x,y) == true)) {
HXLINE( 622)				return;
            			}
HXLINE( 625)			if ((this->_mouseDownFlag == true)) {
HXLINE( 626)				::String type;
HXDLIN( 626)				if ((button == 0)) {
HXLINE( 626)					type = HX_("click",48,7c,5e,48);
            				}
            				else {
HXLINE( 626)					type = HX_("rightclick",ec,f2,f5,b7);
            				}
HXLINE( 627)				 ::Dynamic fn = this->_eventMap->get(type);
HXLINE( 628)				if (hx::IsNotNull( fn )) {
HXLINE( 629)					 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,type);
HXLINE( 630)					mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 631)					mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 632)					fn(mouseEvent);
            				}
HXLINE( 635)				if ((type == HX_("click",48,7c,5e,48))) {
HXLINE( 636)					Float _hx_tmp = ::kha::Scheduler_obj::realTime();
HXDLIN( 636)					this->_lastClickTimeDiff = (_hx_tmp - this->_lastClickTime);
HXLINE( 637)					this->_lastClickTime = ::kha::Scheduler_obj::realTime();
HXLINE( 638)					if ((this->_lastClickTimeDiff >= ((Float)0.5))) {
HXLINE( 639)						this->_lastClickX = x;
HXLINE( 640)						this->_lastClickY = y;
            					}
            				}
            			}
HXLINE( 645)			this->_mouseDownFlag = false;
HXLINE( 646)			::String type1;
HXDLIN( 646)			if ((button == 0)) {
HXLINE( 646)				type1 = HX_("mouseup",c0,0f,73,c0);
            			}
            			else {
HXLINE( 646)				type1 = HX_("rightmouseup",64,77,d0,dd);
            			}
HXLINE( 647)			 ::Dynamic fn1 = this->_eventMap->get(type1);
HXLINE( 648)			if (hx::IsNotNull( fn1 )) {
HXLINE( 649)				 ::haxe::ui::events::MouseEvent mouseEvent1 =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,type1);
HXLINE( 650)				mouseEvent1->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 651)				mouseEvent1->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 652)				fn1(mouseEvent1);
            			}
            		}
HXLINE( 655)		this->_mouseDownFlag = false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ComponentImpl_obj,_hx___onMouseUp,(void))

void ComponentImpl_obj::_hx___onDoubleClick(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_658___onDoubleClick)
HXLINE( 659)		this->lastMouseX = x;
HXLINE( 660)		this->lastMouseY = y;
HXLINE( 661)		bool i = this->inBounds(x,y);
HXLINE( 662)		bool _hx_tmp;
HXDLIN( 662)		if ((i == true)) {
HXLINE( 662)			_hx_tmp = (button == 0);
            		}
            		else {
HXLINE( 662)			_hx_tmp = false;
            		}
HXDLIN( 662)		if (_hx_tmp) {
HXLINE( 663)			if ((this->hasComponentOver(( ( ::haxe::ui::core::Component)(hx::ObjectPtr<OBJ_>(this)) ),x,y) == true)) {
HXLINE( 664)				return;
            			}
HXLINE( 667)			this->_mouseDownFlag = false;
HXLINE( 668)			Float x2 = ( (Float)(this->_lastClickX) );
HXDLIN( 668)			Float y2 = ( (Float)(this->_lastClickY) );
HXDLIN( 668)			Float mouseDelta = ::Math_obj::sqrt((((( (Float)(x) ) - x2) * (( (Float)(x) ) - x2)) + ((( (Float)(y) ) - y2) * (( (Float)(y) ) - y2))));
HXLINE( 669)			bool _hx_tmp1;
HXDLIN( 669)			if ((this->_lastClickTimeDiff < ((Float)0.5))) {
HXLINE( 669)				_hx_tmp1 = (mouseDelta < 5);
            			}
            			else {
HXLINE( 669)				_hx_tmp1 = false;
            			}
HXDLIN( 669)			if (_hx_tmp1) {
HXLINE( 670)				::String type = HX_("doubleclick",97,93,48,3a);
HXLINE( 671)				 ::Dynamic fn = this->_eventMap->get(type);
HXLINE( 672)				if (hx::IsNotNull( fn )) {
HXLINE( 673)					 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,type);
HXLINE( 674)					mouseEvent->screenX = (( (Float)(x) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 675)					mouseEvent->screenY = (( (Float)(y) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 676)					fn(mouseEvent);
            				}
            			}
            		}
HXLINE( 680)		this->_mouseDownFlag = false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ComponentImpl_obj,_hx___onDoubleClick,(void))

void ComponentImpl_obj::_hx___onMouseWheel(int delta){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_683___onMouseWheel)
HXLINE( 684)		 ::Dynamic fn = this->_eventMap->get(HX_("mousewheel",56,b8,59,54));
HXLINE( 686)		if (hx::IsNull( fn )) {
HXLINE( 687)			return;
            		}
HXLINE( 690)		if (!(this->inBounds(this->lastMouseX,this->lastMouseY))) {
HXLINE( 691)			return;
            		}
HXLINE( 694)		 ::haxe::ui::events::MouseEvent mouseEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mousewheel",56,b8,59,54));
HXLINE( 695)		int _hx_tmp = this->lastMouseX;
HXDLIN( 695)		mouseEvent->screenX = (( (Float)(_hx_tmp) ) / ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 696)		int _hx_tmp1 = this->lastMouseY;
HXDLIN( 696)		mouseEvent->screenY = (( (Float)(_hx_tmp1) ) / ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 697)		mouseEvent->delta = ::Math_obj::max(( (Float)(-1) ),::Math_obj::min(( (Float)(1) ),( (Float)(-(delta)) )));
HXLINE( 698)		fn(mouseEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,_hx___onMouseWheel,(void))

void ComponentImpl_obj::_hx___onKeyDown(int key){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_701___onKeyDown)
HXLINE( 702)		if ((hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this))->hasClass(HX_(":active",80,29,23,82)) == false)) {
HXLINE( 703)			return;
            		}
HXLINE( 706)		 ::Dynamic fn = this->_eventMap->get(HX_("keydown",81,3d,6e,b1));
HXLINE( 708)		if (hx::IsNull( fn )) {
HXLINE( 709)			return;
            		}
HXLINE( 712)		 ::haxe::ui::events::KeyboardEvent keyEvent =  ::haxe::ui::events::KeyboardEvent_obj::__alloc( HX_CTX ,HX_("keydown",81,3d,6e,b1));
HXLINE( 713)		keyEvent->keyCode = key;
HXLINE( 714)		fn(keyEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,_hx___onKeyDown,(void))

void ComponentImpl_obj::_hx___onKeyUp(int key){
            	HX_GC_STACKFRAME(&_hx_pos_6354e66e0651e41a_717___onKeyUp)
HXLINE( 718)		if ((hx::TCast<  ::haxe::ui::core::Component >::cast(hx::ObjectPtr<OBJ_>(this))->hasClass(HX_(":active",80,29,23,82)) == false)) {
HXLINE( 719)			return;
            		}
HXLINE( 722)		 ::Dynamic fn = this->_eventMap->get(HX_("keyup",ba,d5,fe,de));
HXLINE( 724)		if (hx::IsNull( fn )) {
HXLINE( 725)			return;
            		}
HXLINE( 728)		 ::haxe::ui::events::KeyboardEvent keyEvent =  ::haxe::ui::events::KeyboardEvent_obj::__alloc( HX_CTX ,HX_("keyup",ba,d5,fe,de));
HXLINE( 729)		keyEvent->keyCode = key;
HXLINE( 730)		fn(keyEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentImpl_obj,_hx___onKeyUp,(void))

bool ComponentImpl_obj::hasComponentOver( ::haxe::ui::core::Component ref,int x,int y){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_733_hasComponentOver)
HXLINE( 734)		::Array< ::Dynamic> array = this->getComponentsAtPoint(x,y);
HXLINE( 735)		if ((array->length == 0)) {
HXLINE( 736)			return false;
            		}
HXLINE( 739)		return !(this->hasChildRecursive(ref,array->__get((array->length - 1)).StaticCast<  ::haxe::ui::core::Component >()));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ComponentImpl_obj,hasComponentOver,return )

::Array< ::Dynamic> ComponentImpl_obj::getComponentsAtPoint(int x,int y){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_742_getComponentsAtPoint)
HXLINE( 743)		::Array< ::Dynamic> array = ::Array_obj< ::Dynamic>::__new();
HXLINE( 744)		{
HXLINE( 744)			int _g = 0;
HXDLIN( 744)			::Array< ::Dynamic> _g1 = ::haxe::ui::core::Screen_obj::get_instance()->rootComponents;
HXDLIN( 744)			while((_g < _g1->length)){
HXLINE( 744)				 ::haxe::ui::core::Component r = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 744)				_g = (_g + 1);
HXLINE( 745)				this->findChildrenAtPoint(r,x,y,array);
            			}
            		}
HXLINE( 747)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,getComponentsAtPoint,return )

void ComponentImpl_obj::findChildrenAtPoint( ::haxe::ui::core::Component child,int x,int y,::Array< ::Dynamic> array){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_751_findChildrenAtPoint)
HXDLIN( 751)		if ((child->inBounds(x,y) == true)) {
HXLINE( 752)			array->push(child);
HXLINE( 753)			{
HXLINE( 753)				int _g = 0;
HXDLIN( 753)				::Array< ::Dynamic> _g1;
HXDLIN( 753)				if (hx::IsNull( child->_children )) {
HXLINE( 753)					_g1 = ::Array_obj< ::Dynamic>::__new(0);
            				}
            				else {
HXLINE( 753)					_g1 = child->_children;
            				}
HXDLIN( 753)				while((_g < _g1->length)){
HXLINE( 753)					 ::haxe::ui::core::Component c = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 753)					_g = (_g + 1);
HXLINE( 754)					this->findChildrenAtPoint(c,x,y,array);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ComponentImpl_obj,findChildrenAtPoint,(void))

bool ComponentImpl_obj::hasChildRecursive( ::haxe::ui::core::Component parent, ::haxe::ui::core::Component child){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_759_hasChildRecursive)
HXLINE( 760)		if (hx::IsEq( parent,child )) {
HXLINE( 761)			return true;
            		}
HXLINE( 763)		bool r = false;
HXLINE( 764)		{
HXLINE( 764)			int _g = 0;
HXDLIN( 764)			::Array< ::Dynamic> _g1;
HXDLIN( 764)			if (hx::IsNull( parent->_children )) {
HXLINE( 764)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 764)				_g1 = parent->_children;
            			}
HXDLIN( 764)			while((_g < _g1->length)){
HXLINE( 764)				 ::haxe::ui::core::Component t = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 764)				_g = (_g + 1);
HXLINE( 765)				if (hx::IsEq( t,child )) {
HXLINE( 766)					r = true;
HXLINE( 767)					goto _hx_goto_47;
            				}
HXLINE( 770)				r = this->hasChildRecursive(t,child);
HXLINE( 771)				if ((r == true)) {
HXLINE( 772)					goto _hx_goto_47;
            				}
            			}
            			_hx_goto_47:;
            		}
HXLINE( 776)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ComponentImpl_obj,hasChildRecursive,return )

void ComponentImpl_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_480173924f690e63_315_registerBehaviours)
HXDLIN( 315)		this->super::registerBehaviours();
            	}


 ::haxe::ui::core::ComponentContainer ComponentImpl_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_afe584834299818f_521_cloneComponent)
HXLINE( 267)		 ::haxe::ui::backend::ComponentImpl c = ( ( ::haxe::ui::backend::ComponentImpl)(this->super::cloneComponent()) );
HXLINE( 287)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 287)		if (hx::IsNull( this->_children )) {
HXLINE( 287)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp = this->_children;
            		}
HXDLIN( 287)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 287)		if (hx::IsNull( c->_children )) {
HXLINE( 287)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 287)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 288)			int _g = 0;
HXDLIN( 288)			::Array< ::Dynamic> _g1;
HXDLIN( 288)			if (hx::IsNull( this->_children )) {
HXLINE( 288)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 288)				_g1 = this->_children;
            			}
HXDLIN( 288)			while((_g < _g1->length)){
HXLINE( 288)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 288)				_g = (_g + 1);
HXLINE( 289)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 293)		return c;
            	}


 ::haxe::ui::core::ComponentContainer ComponentImpl_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_480173924f690e63_302_self)
HXDLIN( 302)		return  ::haxe::ui::backend::ComponentImpl_obj::__alloc( HX_CTX );
            	}


bool ComponentImpl_obj::useBatching(){
            	HX_STACKFRAME(&_hx_pos_6354e66e0651e41a_231_useBatching)
HXLINE( 232)		if (hx::IsNull( ::haxe::ui::core::Screen_obj::get_instance()->get_options() )) {
HXLINE( 233)			return true;
            		}
HXLINE( 235)		if (hx::IsEq( ::haxe::ui::core::Screen_obj::get_instance()->get_options()->__Field(HX_("noBatch",b9,6b,be,80),hx::paccDynamic),true )) {
HXLINE( 236)			return false;
            		}
HXLINE( 238)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ComponentImpl_obj,useBatching,return )


hx::ObjectPtr< ComponentImpl_obj > ComponentImpl_obj::__new() {
	hx::ObjectPtr< ComponentImpl_obj > __this = new ComponentImpl_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ComponentImpl_obj > ComponentImpl_obj::__alloc(hx::Ctx *_hx_ctx) {
	ComponentImpl_obj *__this = (ComponentImpl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ComponentImpl_obj), true, "haxe.ui.backend.ComponentImpl"));
	*(void **)__this = ComponentImpl_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ComponentImpl_obj::ComponentImpl_obj()
{
}

void ComponentImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ComponentImpl);
	HX_MARK_MEMBER_NAME(_eventMap,"_eventMap");
	HX_MARK_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_MARK_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_MARK_MEMBER_NAME(_lastClickTime,"_lastClickTime");
	HX_MARK_MEMBER_NAME(_lastClickTimeDiff,"_lastClickTimeDiff");
	HX_MARK_MEMBER_NAME(_lastClickX,"_lastClickX");
	HX_MARK_MEMBER_NAME(_lastClickY,"_lastClickY");
	HX_MARK_MEMBER_NAME(_cachedScreenX,"_cachedScreenX");
	HX_MARK_MEMBER_NAME(_cachedScreenY,"_cachedScreenY");
	HX_MARK_MEMBER_NAME(_cachedClipComponent,"_cachedClipComponent");
	HX_MARK_MEMBER_NAME(_cachedClipComponentNone,"_cachedClipComponentNone");
	HX_MARK_MEMBER_NAME(_cachedRootComponent,"_cachedRootComponent");
	HX_MARK_MEMBER_NAME(_cachedOpacity,"_cachedOpacity");
	HX_MARK_MEMBER_NAME(screenX,"screenX");
	HX_MARK_MEMBER_NAME(screenY,"screenY");
	HX_MARK_MEMBER_NAME(_batchStyleOperations,"_batchStyleOperations");
	HX_MARK_MEMBER_NAME(_batchImageOperations,"_batchImageOperations");
	HX_MARK_MEMBER_NAME(_batchTextOperations,"_batchTextOperations");
	HX_MARK_MEMBER_NAME(_componentBuffer,"_componentBuffer");
	HX_MARK_MEMBER_NAME(_mouseOverFlag,"_mouseOverFlag");
	HX_MARK_MEMBER_NAME(_mouseDownFlag,"_mouseDownFlag");
	 ::haxe::ui::backend::ComponentBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ComponentImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_eventMap,"_eventMap");
	HX_VISIT_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_VISIT_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_VISIT_MEMBER_NAME(_lastClickTime,"_lastClickTime");
	HX_VISIT_MEMBER_NAME(_lastClickTimeDiff,"_lastClickTimeDiff");
	HX_VISIT_MEMBER_NAME(_lastClickX,"_lastClickX");
	HX_VISIT_MEMBER_NAME(_lastClickY,"_lastClickY");
	HX_VISIT_MEMBER_NAME(_cachedScreenX,"_cachedScreenX");
	HX_VISIT_MEMBER_NAME(_cachedScreenY,"_cachedScreenY");
	HX_VISIT_MEMBER_NAME(_cachedClipComponent,"_cachedClipComponent");
	HX_VISIT_MEMBER_NAME(_cachedClipComponentNone,"_cachedClipComponentNone");
	HX_VISIT_MEMBER_NAME(_cachedRootComponent,"_cachedRootComponent");
	HX_VISIT_MEMBER_NAME(_cachedOpacity,"_cachedOpacity");
	HX_VISIT_MEMBER_NAME(screenX,"screenX");
	HX_VISIT_MEMBER_NAME(screenY,"screenY");
	HX_VISIT_MEMBER_NAME(_batchStyleOperations,"_batchStyleOperations");
	HX_VISIT_MEMBER_NAME(_batchImageOperations,"_batchImageOperations");
	HX_VISIT_MEMBER_NAME(_batchTextOperations,"_batchTextOperations");
	HX_VISIT_MEMBER_NAME(_componentBuffer,"_componentBuffer");
	HX_VISIT_MEMBER_NAME(_mouseOverFlag,"_mouseOverFlag");
	HX_VISIT_MEMBER_NAME(_mouseDownFlag,"_mouseDownFlag");
	 ::haxe::ui::backend::ComponentBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ComponentImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return hx::Val( self_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"screenX") ) { return hx::Val( inCallProp == hx::paccAlways ? get_screenX() : screenX ); }
		if (HX_FIELD_EQ(inName,"screenY") ) { return hx::Val( inCallProp == hx::paccAlways ? get_screenY() : screenY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"inBounds") ) { return hx::Val( inBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderTo") ) { return hx::Val( renderTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"mapEvent") ) { return hx::Val( mapEvent_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_eventMap") ) { return hx::Val( _eventMap ); }
		if (HX_FIELD_EQ(inName,"__onKeyUp") ) { return hx::Val( _hx___onKeyUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { return hx::Val( lastMouseX ); }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { return hx::Val( lastMouseY ); }
		if (HX_FIELD_EQ(inName,"handleSize") ) { return hx::Val( handleSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"unmapEvent") ) { return hx::Val( unmapEvent_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_lastClickX") ) { return hx::Val( _lastClickX ); }
		if (HX_FIELD_EQ(inName,"_lastClickY") ) { return hx::Val( _lastClickY ); }
		if (HX_FIELD_EQ(inName,"clearCaches") ) { return hx::Val( clearCaches_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_screenX") ) { return hx::Val( get_screenX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_screenY") ) { return hx::Val( get_screenY_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcOpacity") ) { return hx::Val( calcOpacity_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOffscreen") ) { return hx::Val( isOffscreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseUp") ) { return hx::Val( _hx___onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onKeyDown") ) { return hx::Val( _hx___onKeyDown_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderTextTo") ) { return hx::Val( renderTextTo_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderToBatch") ) { return hx::Val( renderToBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderStyleTo") ) { return hx::Val( renderStyleTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderImageTo") ) { return hx::Val( renderImageTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseMove") ) { return hx::Val( _hx___onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseDown") ) { return hx::Val( _hx___onMouseDown_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_lastClickTime") ) { return hx::Val( _lastClickTime ); }
		if (HX_FIELD_EQ(inName,"_cachedScreenX") ) { return hx::Val( _cachedScreenX ); }
		if (HX_FIELD_EQ(inName,"_cachedScreenY") ) { return hx::Val( _cachedScreenY ); }
		if (HX_FIELD_EQ(inName,"_cachedOpacity") ) { return hx::Val( _cachedOpacity ); }
		if (HX_FIELD_EQ(inName,"cacheScreenPos") ) { return hx::Val( cacheScreenPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderToScaled") ) { return hx::Val( renderToScaled_dyn() ); }
		if (HX_FIELD_EQ(inName,"_mouseOverFlag") ) { return hx::Val( _mouseOverFlag ); }
		if (HX_FIELD_EQ(inName,"_mouseDownFlag") ) { return hx::Val( _mouseDownFlag ); }
		if (HX_FIELD_EQ(inName,"__onMouseWheel") ) { return hx::Val( _hx___onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return hx::Val( cloneComponent_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isRootComponent") ) { return hx::Val( isRootComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onDoubleClick") ) { return hx::Val( _hx___onDoubleClick_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_componentBuffer") ) { return hx::Val( _componentBuffer ); }
		if (HX_FIELD_EQ(inName,"handleVisibility") ) { return hx::Val( handleVisibility_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasComponentOver") ) { return hx::Val( hasComponentOver_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"findRootComponent") ) { return hx::Val( findRootComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"findClipComponent") ) { return hx::Val( findClipComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasChildRecursive") ) { return hx::Val( hasChildRecursive_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_lastClickTimeDiff") ) { return hx::Val( _lastClickTimeDiff ); }
		if (HX_FIELD_EQ(inName,"onTextInputChanged") ) { return hx::Val( onTextInputChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return hx::Val( registerBehaviours_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"findChildrenAtPoint") ) { return hx::Val( findChildrenAtPoint_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_cachedClipComponent") ) { return hx::Val( _cachedClipComponent ); }
		if (HX_FIELD_EQ(inName,"_cachedRootComponent") ) { return hx::Val( _cachedRootComponent ); }
		if (HX_FIELD_EQ(inName,"_batchTextOperations") ) { return hx::Val( _batchTextOperations ); }
		if (HX_FIELD_EQ(inName,"clearBatchOperations") ) { return hx::Val( clearBatchOperations_dyn() ); }
		if (HX_FIELD_EQ(inName,"getComponentsAtPoint") ) { return hx::Val( getComponentsAtPoint_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_batchStyleOperations") ) { return hx::Val( _batchStyleOperations ); }
		if (HX_FIELD_EQ(inName,"_batchImageOperations") ) { return hx::Val( _batchImageOperations ); }
		if (HX_FIELD_EQ(inName,"addBatchTextOperation") ) { return hx::Val( addBatchTextOperation_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"addBatchStyleOperation") ) { return hx::Val( addBatchStyleOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"addBatchImageOperation") ) { return hx::Val( addBatchImageOperation_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"renderToBatchOperations") ) { return hx::Val( renderToBatchOperations_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_cachedClipComponentNone") ) { return hx::Val( _cachedClipComponentNone ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ComponentImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"useBatching") ) { outValue = useBatching_dyn(); return true; }
	}
	return false;
}

hx::Val ComponentImpl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"screenX") ) { screenX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screenY") ) { screenY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_eventMap") ) { _hx_set__eventMap(HX_CTX_GET,inValue.Cast<  ::haxe::ds::StringMap >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { lastMouseX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { lastMouseY=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_lastClickX") ) { _lastClickX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastClickY") ) { _lastClickY=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_lastClickTime") ) { _lastClickTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cachedScreenX") ) { _hx_set__cachedScreenX(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_cachedScreenY") ) { _hx_set__cachedScreenY(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_cachedOpacity") ) { _hx_set__cachedOpacity(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_mouseOverFlag") ) { _mouseOverFlag=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mouseDownFlag") ) { _mouseDownFlag=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_componentBuffer") ) { _hx_set__componentBuffer(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_lastClickTimeDiff") ) { _lastClickTimeDiff=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_cachedClipComponent") ) { _hx_set__cachedClipComponent(HX_CTX_GET,inValue.Cast<  ::haxe::ui::core::Component >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_cachedRootComponent") ) { _hx_set__cachedRootComponent(HX_CTX_GET,inValue.Cast<  ::haxe::ui::core::Component >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_batchTextOperations") ) { _hx_set__batchTextOperations(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_batchStyleOperations") ) { _hx_set__batchStyleOperations(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"_batchImageOperations") ) { _hx_set__batchImageOperations(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_cachedClipComponentNone") ) { _hx_set__cachedClipComponentNone(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ComponentImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_eventMap",01,7e,68,08));
	outFields->push(HX_("lastMouseX",89,2d,e9,96));
	outFields->push(HX_("lastMouseY",8a,2d,e9,96));
	outFields->push(HX_("_lastClickTime",80,03,87,68));
	outFields->push(HX_("_lastClickTimeDiff",a5,4b,51,cc));
	outFields->push(HX_("_lastClickX",25,f3,b2,a7));
	outFields->push(HX_("_lastClickY",26,f3,b2,a7));
	outFields->push(HX_("_cachedScreenX",eb,1b,0a,9e));
	outFields->push(HX_("_cachedScreenY",ec,1b,0a,9e));
	outFields->push(HX_("_cachedClipComponent",8c,49,33,f9));
	outFields->push(HX_("_cachedClipComponentNone",64,3e,08,1f));
	outFields->push(HX_("_cachedRootComponent",fa,4f,19,db));
	outFields->push(HX_("_cachedOpacity",4a,b6,38,5f));
	outFields->push(HX_("screenX",6c,c3,36,2a));
	outFields->push(HX_("screenY",6d,c3,36,2a));
	outFields->push(HX_("_batchStyleOperations",42,7a,ba,0f));
	outFields->push(HX_("_batchImageOperations",ec,0c,60,18));
	outFields->push(HX_("_batchTextOperations",d4,4d,c5,f5));
	outFields->push(HX_("_componentBuffer",1e,10,49,92));
	outFields->push(HX_("_mouseOverFlag",a6,f2,67,f9));
	outFields->push(HX_("_mouseDownFlag",b4,f8,f8,45));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ComponentImpl_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ComponentImpl_obj,_eventMap),HX_("_eventMap",01,7e,68,08)},
	{hx::fsInt,(int)offsetof(ComponentImpl_obj,lastMouseX),HX_("lastMouseX",89,2d,e9,96)},
	{hx::fsInt,(int)offsetof(ComponentImpl_obj,lastMouseY),HX_("lastMouseY",8a,2d,e9,96)},
	{hx::fsFloat,(int)offsetof(ComponentImpl_obj,_lastClickTime),HX_("_lastClickTime",80,03,87,68)},
	{hx::fsFloat,(int)offsetof(ComponentImpl_obj,_lastClickTimeDiff),HX_("_lastClickTimeDiff",a5,4b,51,cc)},
	{hx::fsInt,(int)offsetof(ComponentImpl_obj,_lastClickX),HX_("_lastClickX",25,f3,b2,a7)},
	{hx::fsInt,(int)offsetof(ComponentImpl_obj,_lastClickY),HX_("_lastClickY",26,f3,b2,a7)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentImpl_obj,_cachedScreenX),HX_("_cachedScreenX",eb,1b,0a,9e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentImpl_obj,_cachedScreenY),HX_("_cachedScreenY",ec,1b,0a,9e)},
	{hx::fsObject /*  ::haxe::ui::core::Component */ ,(int)offsetof(ComponentImpl_obj,_cachedClipComponent),HX_("_cachedClipComponent",8c,49,33,f9)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentImpl_obj,_cachedClipComponentNone),HX_("_cachedClipComponentNone",64,3e,08,1f)},
	{hx::fsObject /*  ::haxe::ui::core::Component */ ,(int)offsetof(ComponentImpl_obj,_cachedRootComponent),HX_("_cachedRootComponent",fa,4f,19,db)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentImpl_obj,_cachedOpacity),HX_("_cachedOpacity",4a,b6,38,5f)},
	{hx::fsFloat,(int)offsetof(ComponentImpl_obj,screenX),HX_("screenX",6c,c3,36,2a)},
	{hx::fsFloat,(int)offsetof(ComponentImpl_obj,screenY),HX_("screenY",6d,c3,36,2a)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ComponentImpl_obj,_batchStyleOperations),HX_("_batchStyleOperations",42,7a,ba,0f)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ComponentImpl_obj,_batchImageOperations),HX_("_batchImageOperations",ec,0c,60,18)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ComponentImpl_obj,_batchTextOperations),HX_("_batchTextOperations",d4,4d,c5,f5)},
	{hx::fsObject /*  ::kha::Image */ ,(int)offsetof(ComponentImpl_obj,_componentBuffer),HX_("_componentBuffer",1e,10,49,92)},
	{hx::fsBool,(int)offsetof(ComponentImpl_obj,_mouseOverFlag),HX_("_mouseOverFlag",a6,f2,67,f9)},
	{hx::fsBool,(int)offsetof(ComponentImpl_obj,_mouseDownFlag),HX_("_mouseDownFlag",b4,f8,f8,45)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ComponentImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String ComponentImpl_obj_sMemberFields[] = {
	HX_("_eventMap",01,7e,68,08),
	HX_("lastMouseX",89,2d,e9,96),
	HX_("lastMouseY",8a,2d,e9,96),
	HX_("_lastClickTime",80,03,87,68),
	HX_("_lastClickTimeDiff",a5,4b,51,cc),
	HX_("_lastClickX",25,f3,b2,a7),
	HX_("_lastClickY",26,f3,b2,a7),
	HX_("_cachedScreenX",eb,1b,0a,9e),
	HX_("_cachedScreenY",ec,1b,0a,9e),
	HX_("_cachedClipComponent",8c,49,33,f9),
	HX_("_cachedClipComponentNone",64,3e,08,1f),
	HX_("_cachedRootComponent",fa,4f,19,db),
	HX_("_cachedOpacity",4a,b6,38,5f),
	HX_("clearCaches",5e,6d,df,44),
	HX_("cacheScreenPos",e6,b2,87,35),
	HX_("screenX",6c,c3,36,2a),
	HX_("get_screenX",83,23,31,b0),
	HX_("screenY",6d,c3,36,2a),
	HX_("get_screenY",84,23,31,b0),
	HX_("findRootComponent",42,1e,b8,7c),
	HX_("isRootComponent",f1,57,0f,1c),
	HX_("findClipComponent",d4,17,d2,9a),
	HX_("inBounds",3a,d0,9b,ee),
	HX_("calcOpacity",b6,d9,4b,87),
	HX_("isOffscreen",d1,42,31,f8),
	HX_("_batchStyleOperations",42,7a,ba,0f),
	HX_("_batchImageOperations",ec,0c,60,18),
	HX_("_batchTextOperations",d4,4d,c5,f5),
	HX_("clearBatchOperations",b9,13,be,6b),
	HX_("addBatchStyleOperation",6f,dc,ae,bb),
	HX_("addBatchImageOperation",05,cd,5b,8a),
	HX_("addBatchTextOperation",21,e8,d2,bb),
	HX_("renderTo",71,b6,db,b2),
	HX_("renderToBatch",89,a7,2c,76),
	HX_("renderToBatchOperations",55,ef,0e,03),
	HX_("renderStyleTo",56,d0,a3,fe),
	HX_("renderImageTo",00,a9,61,bd),
	HX_("renderTextTo",7e,5f,de,47),
	HX_("_componentBuffer",1e,10,49,92),
	HX_("renderToScaled",eb,ff,3b,d7),
	HX_("handleSize",89,44,f9,6a),
	HX_("handleVisibility",9a,57,d4,a2),
	HX_("mapEvent",de,37,07,ed),
	HX_("onTextInputChanged",96,9d,af,6a),
	HX_("unmapEvent",37,1f,cb,72),
	HX_("_mouseOverFlag",a6,f2,67,f9),
	HX_("__onMouseMove",97,bf,70,5f),
	HX_("_mouseDownFlag",b4,f8,f8,45),
	HX_("__onMouseDown",e8,d4,7d,59),
	HX_("__onMouseUp",61,f5,49,c6),
	HX_("__onDoubleClick",78,59,12,b8),
	HX_("__onMouseWheel",55,4d,8b,e0),
	HX_("__onKeyDown",22,6b,1e,a2),
	HX_("__onKeyUp",1b,a9,8a,f6),
	HX_("hasComponentOver",f7,50,0e,02),
	HX_("getComponentsAtPoint",71,16,33,4c),
	HX_("findChildrenAtPoint",a5,a2,ce,1d),
	HX_("hasChildRecursive",30,0b,20,44),
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

hx::Class ComponentImpl_obj::__mClass;

static ::String ComponentImpl_obj_sStaticFields[] = {
	HX_("useBatching",cf,3c,1c,a8),
	::String(null())
};

void ComponentImpl_obj::__register()
{
	ComponentImpl_obj _hx_dummy;
	ComponentImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.ComponentImpl",f1,e7,36,e7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ComponentImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ComponentImpl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ComponentImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ComponentImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ComponentImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ComponentImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
