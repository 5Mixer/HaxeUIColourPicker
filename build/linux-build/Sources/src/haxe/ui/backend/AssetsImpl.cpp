// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <hxinc/haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_AssetsBase
#include <hxinc/haxe/ui/backend/AssetsBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_AssetsImpl
#include <hxinc/haxe/ui/backend/AssetsImpl.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_FontList
#include <hxinc/kha/_Assets/FontList.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22d568b119f3373b_10_new,"haxe.ui.backend.AssetsImpl","new",0xd46da341,"haxe.ui.backend.AssetsImpl.new","haxe/ui/backend/AssetsImpl.hx",10,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_11_getImageInternal,"haxe.ui.backend.AssetsImpl","getImageInternal",0x8b3a73c1,"haxe.ui.backend.AssetsImpl.getImageInternal","haxe/ui/backend/AssetsImpl.hx",11,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_36_getImageFromHaxeResource,"haxe.ui.backend.AssetsImpl","getImageFromHaxeResource",0x481a7c22,"haxe.ui.backend.AssetsImpl.getImageFromHaxeResource","haxe/ui/backend/AssetsImpl.hx",36,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_33_getImageFromHaxeResource,"haxe.ui.backend.AssetsImpl","getImageFromHaxeResource",0x481a7c22,"haxe.ui.backend.AssetsImpl.getImageFromHaxeResource","haxe/ui/backend/AssetsImpl.hx",33,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_53_imageFromBytes,"haxe.ui.backend.AssetsImpl","imageFromBytes",0x721a3685,"haxe.ui.backend.AssetsImpl.imageFromBytes","haxe/ui/backend/AssetsImpl.hx",53,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_60_imageFromBytes,"haxe.ui.backend.AssetsImpl","imageFromBytes",0x721a3685,"haxe.ui.backend.AssetsImpl.imageFromBytes","haxe/ui/backend/AssetsImpl.hx",60,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_77_extensionFromMagicBytes,"haxe.ui.backend.AssetsImpl","extensionFromMagicBytes",0x86578748,"haxe.ui.backend.AssetsImpl.extensionFromMagicBytes","haxe/ui/backend/AssetsImpl.hx",77,0x4811180e)
static const int _hx_array_data_8fb0eecf_8[] = {
	(int)255,(int)216,(int)255,
};
static const int _hx_array_data_8fb0eecf_9[] = {
	(int)137,(int)80,(int)78,(int)71,(int)13,(int)10,(int)26,(int)10,
};
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_89_compareBytes,"haxe.ui.backend.AssetsImpl","compareBytes",0xd2d73285,"haxe.ui.backend.AssetsImpl.compareBytes","haxe/ui/backend/AssetsImpl.hx",89,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_102_getFontInternal,"haxe.ui.backend.AssetsImpl","getFontInternal",0xb7e6de43,"haxe.ui.backend.AssetsImpl.getFontInternal","haxe/ui/backend/AssetsImpl.hx",102,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_111_getFontFromHaxeResource,"haxe.ui.backend.AssetsImpl","getFontFromHaxeResource",0x14d838a4,"haxe.ui.backend.AssetsImpl.getFontFromHaxeResource","haxe/ui/backend/AssetsImpl.hx",111,0x4811180e)
HX_LOCAL_STACK_FRAME(_hx_pos_22d568b119f3373b_120_imageInfoFromImageData,"haxe.ui.backend.AssetsImpl","imageInfoFromImageData",0x2102daf1,"haxe.ui.backend.AssetsImpl.imageInfoFromImageData","haxe/ui/backend/AssetsImpl.hx",120,0x4811180e)
namespace haxe{
namespace ui{
namespace backend{

void AssetsImpl_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_10_new)
HXDLIN(  10)		super::__construct();
            	}

Dynamic AssetsImpl_obj::__CreateEmpty() { return new AssetsImpl_obj; }

void *AssetsImpl_obj::_hx_vtable = 0;

Dynamic AssetsImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetsImpl_obj > _hx_result = new AssetsImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetsImpl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d657426) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0d657426;
	} else {
		return inClassId==(int)0x120f0af5;
	}
}

void AssetsImpl_obj::getImageInternal(::String resourceId, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_11_getImageInternal)
HXLINE(  12)		if ((resourceId.indexOf(HX_(".",2e,00,00,00),null()) != -1)) {
HXLINE(  13)			::Array< ::String > parts = resourceId.split(HX_(".",2e,00,00,00));
HXLINE(  14)			parts->pop();
HXLINE(  15)			resourceId = parts->join(HX_(".",2e,00,00,00));
            		}
HXLINE(  17)		if ((resourceId.indexOf(HX_("/",2f,00,00,00),null()) != -1)) {
HXLINE(  18)			resourceId = ( (::String)(resourceId.split(HX_("/",2f,00,00,00))->pop()) );
            		}
HXLINE(  20)		 ::kha::Image img = ( ( ::kha::Image)(::Reflect_obj::field(::kha::Assets_obj::images,resourceId)) );
HXLINE(  21)		if (hx::IsNotNull( img )) {
HXLINE(  23)			int imageInfo = img->get_realWidth();
HXLINE(  22)			 ::Dynamic imageInfo1 =  ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),imageInfo)
            				->setFixed(1,HX_("height",e7,07,4c,02),img->get_realHeight())
            				->setFixed(2,HX_("data",2a,56,63,42),img));
HXLINE(  27)			callback(imageInfo1);
            		}
            		else {
HXLINE(  29)			callback(null());
            		}
            	}


void AssetsImpl_obj::getImageFromHaxeResource(::String resourceId, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,resourceId, ::Dynamic,callback) HXARGC(1)
            		void _hx_run( ::Dynamic imageInfo){
            			HX_STACKFRAME(&_hx_pos_22d568b119f3373b_36_getImageFromHaxeResource)
HXLINE(  36)			callback(resourceId,imageInfo);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_33_getImageFromHaxeResource)
HXLINE(  34)		 ::haxe::io::Bytes bytes = ::haxe::Resource_obj::getBytes(resourceId);
HXLINE(  35)		this->imageFromBytes(bytes, ::Dynamic(new _hx_Closure_0(resourceId,callback)));
            	}


void AssetsImpl_obj::imageFromBytes( ::haxe::io::Bytes bytes, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,callback) HXARGC(1)
            		void _hx_run( ::kha::Image image){
            			HX_STACKFRAME(&_hx_pos_22d568b119f3373b_53_imageFromBytes)
HXLINE(  55)			int imageInfo = image->get_realWidth();
HXLINE(  54)			 ::Dynamic imageInfo1 =  ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),imageInfo)
            				->setFixed(1,HX_("height",e7,07,4c,02),image->get_realHeight())
            				->setFixed(2,HX_("data",2a,56,63,42),image));
HXLINE(  59)			callback(imageInfo1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,callback) HXARGC(1)
            		void _hx_run(::String error){
            			HX_STACKFRAME(&_hx_pos_22d568b119f3373b_60_imageFromBytes)
HXLINE(  61)			::haxe::Log_obj::trace((HX_("Problem loading image: ",3c,b6,7d,e3) + error),hx::SourceInfo(HX_("haxe/ui/backend/AssetsImpl.hx",0e,18,11,48),61,HX_("haxe.ui.backend.AssetsImpl",cf,ee,b0,8f),HX_("imageFromBytes",c6,6f,67,40)));
HXLINE(  62)			callback(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_53_imageFromBytes)
HXDLIN(  53)		::kha::Image_obj::fromEncodedBytes(bytes,this->extensionFromMagicBytes(bytes), ::Dynamic(new _hx_Closure_0(callback)), ::Dynamic(new _hx_Closure_1(callback)),null());
            	}


::String AssetsImpl_obj::extensionFromMagicBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_77_extensionFromMagicBytes)
HXLINE(  78)		::String ext = HX_("",00,00,00,00);
HXLINE(  80)		if ((this->compareBytes(bytes,::Array_obj< int >::fromData( _hx_array_data_8fb0eecf_8,3)) == true)) {
HXLINE(  81)			ext = HX_("jpeg",a8,f2,65,46);
            		}
            		else {
HXLINE(  82)			if ((this->compareBytes(bytes,::Array_obj< int >::fromData( _hx_array_data_8fb0eecf_9,8)) == true)) {
HXLINE(  83)				ext = HX_("png",a9,5c,55,00);
            			}
            		}
HXLINE(  86)		return ext;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetsImpl_obj,extensionFromMagicBytes,return )

bool AssetsImpl_obj::compareBytes( ::haxe::io::Bytes bytes,::Array< int > startsWith){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_89_compareBytes)
HXLINE(  90)		bool b = true;
HXLINE(  91)		int i = 0;
HXLINE(  92)		{
HXLINE(  92)			int _g = 0;
HXDLIN(  92)			while((_g < startsWith->length)){
HXLINE(  92)				int t = startsWith->__get(_g);
HXDLIN(  92)				_g = (_g + 1);
HXLINE(  93)				if ((bytes->b->__get(i) != t)) {
HXLINE(  94)					b = false;
HXLINE(  95)					goto _hx_goto_10;
            				}
HXLINE(  97)				i = (i + 1);
            			}
            			_hx_goto_10:;
            		}
HXLINE(  99)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetsImpl_obj,compareBytes,return )

void AssetsImpl_obj::getFontInternal(::String resourceId, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_102_getFontInternal)
HXLINE( 103)		 ::kha::Kravur font = ::kha::Assets_obj::fonts->get(resourceId);
HXLINE( 104)		if (hx::IsNotNull( font )) {
HXLINE( 105)			callback( ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("data",2a,56,63,42),font)));
            		}
            		else {
HXLINE( 107)			callback(null());
            		}
            	}


void AssetsImpl_obj::getFontFromHaxeResource(::String resourceId, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_111_getFontFromHaxeResource)
HXLINE( 112)		 ::haxe::io::Bytes bytes = ::haxe::Resource_obj::getBytes(resourceId);
HXLINE( 113)		 ::Dynamic fontInfo =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("data",2a,56,63,42),::kha::Kravur_obj::fromBytes(bytes,null())));
HXLINE( 116)		callback(resourceId,fontInfo);
            	}


 ::Dynamic AssetsImpl_obj::imageInfoFromImageData( ::kha::Image imageData){
            	HX_STACKFRAME(&_hx_pos_22d568b119f3373b_120_imageInfoFromImageData)
HXLINE( 122)		int _hx_tmp = imageData->get_width();
HXLINE( 120)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("width",06,b6,62,ca),_hx_tmp)
            			->setFixed(1,HX_("height",e7,07,4c,02),imageData->get_height())
            			->setFixed(2,HX_("data",2a,56,63,42),imageData));
            	}



hx::ObjectPtr< AssetsImpl_obj > AssetsImpl_obj::__new() {
	hx::ObjectPtr< AssetsImpl_obj > __this = new AssetsImpl_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< AssetsImpl_obj > AssetsImpl_obj::__alloc(hx::Ctx *_hx_ctx) {
	AssetsImpl_obj *__this = (AssetsImpl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssetsImpl_obj), false, "haxe.ui.backend.AssetsImpl"));
	*(void **)__this = AssetsImpl_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AssetsImpl_obj::AssetsImpl_obj()
{
}

hx::Val AssetsImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"compareBytes") ) { return hx::Val( compareBytes_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"imageFromBytes") ) { return hx::Val( imageFromBytes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFontInternal") ) { return hx::Val( getFontInternal_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getImageInternal") ) { return hx::Val( getImageInternal_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"imageInfoFromImageData") ) { return hx::Val( imageInfoFromImageData_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"extensionFromMagicBytes") ) { return hx::Val( extensionFromMagicBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFontFromHaxeResource") ) { return hx::Val( getFontFromHaxeResource_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getImageFromHaxeResource") ) { return hx::Val( getImageFromHaxeResource_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *AssetsImpl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *AssetsImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetsImpl_obj_sMemberFields[] = {
	HX_("getImageInternal",42,3f,39,72),
	HX_("getImageFromHaxeResource",a3,30,02,17),
	HX_("imageFromBytes",c6,6f,67,40),
	HX_("extensionFromMagicBytes",e7,9d,03,6e),
	HX_("compareBytes",86,e9,47,5a),
	HX_("getFontInternal",e2,bd,2b,6d),
	HX_("getFontFromHaxeResource",43,4f,84,fc),
	HX_("imageInfoFromImageData",32,bd,fc,d3),
	::String(null()) };

hx::Class AssetsImpl_obj::__mClass;

void AssetsImpl_obj::__register()
{
	AssetsImpl_obj _hx_dummy;
	AssetsImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.AssetsImpl",cf,ee,b0,8f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetsImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetsImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetsImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetsImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
