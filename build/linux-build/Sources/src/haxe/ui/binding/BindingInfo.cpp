// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingInfo
#include <hxinc/haxe/ui/binding/BindingInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_PropertyInfo
#include <hxinc/haxe/ui/binding/PropertyInfo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ce9340dee5f5d5f9_54_new,"haxe.ui.binding.BindingInfo","new",0x67f9bcaa,"haxe.ui.binding.BindingInfo.new","haxe/ui/binding/BindingManager.hx",54,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_ce9340dee5f5d5f9_59_addProp,"haxe.ui.binding.BindingInfo","addProp",0x514ee3ae,"haxe.ui.binding.BindingInfo.addProp","haxe/ui/binding/BindingManager.hx",59,0xd9a5117a)
namespace haxe{
namespace ui{
namespace binding{

void BindingInfo_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ce9340dee5f5d5f9_54_new)
HXDLIN(  54)		this->_hx_set_props(HX_CTX,  ::haxe::ds::StringMap_obj::__alloc( HX_CTX ));
            	}

Dynamic BindingInfo_obj::__CreateEmpty() { return new BindingInfo_obj; }

void *BindingInfo_obj::_hx_vtable = 0;

Dynamic BindingInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BindingInfo_obj > _hx_result = new BindingInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BindingInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3aeef788;
}

 ::haxe::ui::binding::PropertyInfo BindingInfo_obj::addProp(::String name,::String script){
            	HX_GC_STACKFRAME(&_hx_pos_ce9340dee5f5d5f9_59_addProp)
HXLINE(  60)		 ::haxe::ui::binding::PropertyInfo p = ( ( ::haxe::ui::binding::PropertyInfo)(this->props->get(name)) );
HXLINE(  61)		if (hx::IsNull( p )) {
HXLINE(  62)			p =  ::haxe::ui::binding::PropertyInfo_obj::__alloc( HX_CTX );
HXLINE(  63)			p->_hx_set_name(HX_CTX, name);
HXLINE(  64)			p->_hx_set_script(HX_CTX, script);
HXLINE(  65)			this->props->set(name,p);
            		}
HXLINE(  67)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingInfo_obj,addProp,return )


hx::ObjectPtr< BindingInfo_obj > BindingInfo_obj::__new() {
	hx::ObjectPtr< BindingInfo_obj > __this = new BindingInfo_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BindingInfo_obj > BindingInfo_obj::__alloc(hx::Ctx *_hx_ctx) {
	BindingInfo_obj *__this = (BindingInfo_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BindingInfo_obj), true, "haxe.ui.binding.BindingInfo"));
	*(void **)__this = BindingInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BindingInfo_obj::BindingInfo_obj()
{
}

void BindingInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BindingInfo);
	HX_MARK_MEMBER_NAME(props,"props");
	HX_MARK_END_CLASS();
}

void BindingInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(props,"props");
}

hx::Val BindingInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { return hx::Val( props ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addProp") ) { return hx::Val( addProp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BindingInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { _hx_set_props(HX_CTX_GET,inValue.Cast<  ::haxe::ds::StringMap >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BindingInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("props",70,e7,8f,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BindingInfo_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BindingInfo_obj,props),HX_("props",70,e7,8f,c8)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BindingInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String BindingInfo_obj_sMemberFields[] = {
	HX_("props",70,e7,8f,c8),
	HX_("addProp",64,0a,9c,86),
	::String(null()) };

hx::Class BindingInfo_obj::__mClass;

void BindingInfo_obj::__register()
{
	BindingInfo_obj _hx_dummy;
	BindingInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.binding.BindingInfo",b8,df,a7,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BindingInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BindingInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BindingInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BindingInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace binding
