// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_PropertyInfo
#include <hxinc/haxe/ui/binding/PropertyInfo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7919f3505c1630e1_13_new,"haxe.ui.binding.PropertyInfo","new",0xbb30f250,"haxe.ui.binding.PropertyInfo.new","haxe/ui/binding/BindingManager.hx",13,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_7919f3505c1630e1_18_addObject,"haxe.ui.binding.PropertyInfo","addObject",0xcc6ee9b0,"haxe.ui.binding.PropertyInfo.addObject","haxe/ui/binding/BindingManager.hx",18,0xd9a5117a)
namespace haxe{
namespace ui{
namespace binding{

void PropertyInfo_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7919f3505c1630e1_13_new)
HXDLIN(  13)		this->_hx_set_objects(HX_CTX,  ::haxe::ds::StringMap_obj::__alloc( HX_CTX ));
            	}

Dynamic PropertyInfo_obj::__CreateEmpty() { return new PropertyInfo_obj; }

void *PropertyInfo_obj::_hx_vtable = 0;

Dynamic PropertyInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PropertyInfo_obj > _hx_result = new PropertyInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PropertyInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ff21a86;
}

void PropertyInfo_obj::addObject(::String objectId,::String objectProp){
            	HX_STACKFRAME(&_hx_pos_7919f3505c1630e1_18_addObject)
HXLINE(  19)		::Array< ::String > array = ( (::Array< ::String >)(this->objects->get(objectId)) );
HXLINE(  20)		if (hx::IsNull( array )) {
HXLINE(  21)			array = ::Array_obj< ::String >::__new(0);
HXLINE(  22)			this->objects->set(objectId,array);
            		}
HXLINE(  24)		if ((array->indexOf(objectProp,null()) == -1)) {
HXLINE(  25)			array->push(objectProp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PropertyInfo_obj,addObject,(void))


hx::ObjectPtr< PropertyInfo_obj > PropertyInfo_obj::__new() {
	hx::ObjectPtr< PropertyInfo_obj > __this = new PropertyInfo_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< PropertyInfo_obj > PropertyInfo_obj::__alloc(hx::Ctx *_hx_ctx) {
	PropertyInfo_obj *__this = (PropertyInfo_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PropertyInfo_obj), true, "haxe.ui.binding.PropertyInfo"));
	*(void **)__this = PropertyInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PropertyInfo_obj::PropertyInfo_obj()
{
}

void PropertyInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PropertyInfo);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(script,"script");
	HX_MARK_MEMBER_NAME(objects,"objects");
	HX_MARK_END_CLASS();
}

void PropertyInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(script,"script");
	HX_VISIT_MEMBER_NAME(objects,"objects");
}

hx::Val PropertyInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"script") ) { return hx::Val( script ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objects") ) { return hx::Val( objects ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addObject") ) { return hx::Val( addObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PropertyInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { _hx_set_name(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"script") ) { _hx_set_script(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objects") ) { _hx_set_objects(HX_CTX_GET,inValue.Cast<  ::haxe::ds::StringMap >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PropertyInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("script",0b,4e,60,47));
	outFields->push(HX_("objects",d4,68,4f,82));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PropertyInfo_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(PropertyInfo_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(PropertyInfo_obj,script),HX_("script",0b,4e,60,47)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PropertyInfo_obj,objects),HX_("objects",d4,68,4f,82)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PropertyInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String PropertyInfo_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("script",0b,4e,60,47),
	HX_("objects",d4,68,4f,82),
	HX_("addObject",c0,b3,63,cd),
	::String(null()) };

hx::Class PropertyInfo_obj::__mClass;

void PropertyInfo_obj::__register()
{
	PropertyInfo_obj _hx_dummy;
	PropertyInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.binding.PropertyInfo",5e,ca,1d,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PropertyInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PropertyInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PropertyInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PropertyInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace binding
