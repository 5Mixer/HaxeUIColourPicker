// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Stepper
#include <hxinc/haxe/ui/components/Stepper.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Stepper_IncBehaviour
#include <hxinc/haxe/ui/components/_Stepper/IncBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_VBox
#include <hxinc/haxe/ui/containers/VBox.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b8123e341750227_52_new,"haxe.ui.components._Stepper.IncBehaviour","new",0x2c35ea47,"haxe.ui.components._Stepper.IncBehaviour.new","haxe/ui/components/Stepper.hx",52,0x78893714)
HX_LOCAL_STACK_FRAME(_hx_pos_2b8123e341750227_53_call,"haxe.ui.components._Stepper.IncBehaviour","call",0x7baea8d7,"haxe.ui.components._Stepper.IncBehaviour.call","haxe/ui/components/Stepper.hx",53,0x78893714)
namespace haxe{
namespace ui{
namespace components{
namespace _Stepper{

void IncBehaviour_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_2b8123e341750227_52_new)
HXDLIN(  52)		super::__construct(component);
            	}

Dynamic IncBehaviour_obj::__CreateEmpty() { return new IncBehaviour_obj; }

void *IncBehaviour_obj::_hx_vtable = 0;

Dynamic IncBehaviour_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IncBehaviour_obj > _hx_result = new IncBehaviour_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool IncBehaviour_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5f0d5a85) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5f0d5a85;
	} else {
		return inClassId==(int)0x6c6873cd;
	}
}

 ::haxe::ui::util::VariantType IncBehaviour_obj::call( ::Dynamic param){
            	HX_STACKFRAME(&_hx_pos_2b8123e341750227_53_call)
HXLINE(  54)		 ::haxe::ui::components::Stepper stepper = hx::TCast<  ::haxe::ui::components::Stepper >::cast(this->_component);
HXLINE(  55)		Float newPos = stepper->get_pos();
HXLINE(  56)		newPos = (newPos + stepper->get_step());
HXLINE(  58)		bool _hx_tmp;
HXDLIN(  58)		if (hx::IsNotNull( stepper->get_max() )) {
HXLINE(  58)			_hx_tmp = hx::IsGreater( newPos,stepper->get_max() );
            		}
            		else {
HXLINE(  58)			_hx_tmp = false;
            		}
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  59)			newPos = ( (Float)(stepper->get_max()) );
            		}
HXLINE(  62)		if (hx::IsNotNull( stepper->get_precision() )) {
HXLINE(  63)			int precision = ( (int)(stepper->get_precision()) );
HXDLIN(  63)			newPos = (( (Float)(::Math_obj::round((newPos * ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) ))))) ) / ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
            		}
HXLINE(  66)		stepper->set_pos(newPos);
HXLINE(  67)		return null();
            	}



hx::ObjectPtr< IncBehaviour_obj > IncBehaviour_obj::__new( ::haxe::ui::core::Component component) {
	hx::ObjectPtr< IncBehaviour_obj > __this = new IncBehaviour_obj();
	__this->__construct(component);
	return __this;
}

hx::ObjectPtr< IncBehaviour_obj > IncBehaviour_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	IncBehaviour_obj *__this = (IncBehaviour_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IncBehaviour_obj), true, "haxe.ui.components._Stepper.IncBehaviour"));
	*(void **)__this = IncBehaviour_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

IncBehaviour_obj::IncBehaviour_obj()
{
}

hx::Val IncBehaviour_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return hx::Val( call_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *IncBehaviour_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IncBehaviour_obj_sStaticStorageInfo = 0;
#endif

static ::String IncBehaviour_obj_sMemberFields[] = {
	HX_("call",9e,18,ba,41),
	::String(null()) };

hx::Class IncBehaviour_obj::__mClass;

void IncBehaviour_obj::__register()
{
	IncBehaviour_obj _hx_dummy;
	IncBehaviour_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Stepper.IncBehaviour",d5,ba,bb,e7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IncBehaviour_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IncBehaviour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IncBehaviour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IncBehaviour_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Stepper
