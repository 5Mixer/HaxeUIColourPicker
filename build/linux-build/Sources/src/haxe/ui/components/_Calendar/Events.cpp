// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <hxinc/Date.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <hxinc/haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <hxinc/haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Calendar
#include <hxinc/haxe/ui/components/Calendar.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Calendar_Events
#include <hxinc/haxe/ui/components/_Calendar/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Grid
#include <hxinc/haxe/ui/containers/Grid.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_events_Events
#include <hxinc/haxe/ui/events/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <hxinc/haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <hxinc/haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a810e7e76db8b416_234_new,"haxe.ui.components._Calendar.Events","new",0x702e4ec2,"haxe.ui.components._Calendar.Events.new","haxe/ui/components/Calendar.hx",234,0xa4f8a419)
HX_LOCAL_STACK_FRAME(_hx_pos_a810e7e76db8b416_235_register,"haxe.ui.components._Calendar.Events","register",0xd0f5c4c1,"haxe.ui.components._Calendar.Events.register","haxe/ui/components/Calendar.hx",235,0xa4f8a419)
HX_LOCAL_STACK_FRAME(_hx_pos_a810e7e76db8b416_245_unregister,"haxe.ui.components._Calendar.Events","unregister",0xaf447f9a,"haxe.ui.components._Calendar.Events.unregister","haxe/ui/components/Calendar.hx",245,0xa4f8a419)
HX_LOCAL_STACK_FRAME(_hx_pos_a810e7e76db8b416_250_onDayClicked,"haxe.ui.components._Calendar.Events","onDayClicked",0xbb907308,"haxe.ui.components._Calendar.Events.onDayClicked","haxe/ui/components/Calendar.hx",250,0xa4f8a419)
namespace haxe{
namespace ui{
namespace components{
namespace _Calendar{

void Events_obj::__construct( ::haxe::ui::core::Component target){
            	HX_STACKFRAME(&_hx_pos_a810e7e76db8b416_234_new)
HXDLIN( 234)		super::__construct(target);
            	}

Dynamic Events_obj::__CreateEmpty() { return new Events_obj; }

void *Events_obj::_hx_vtable = 0;

Dynamic Events_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Events_obj > _hx_result = new Events_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Events_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5d294170) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5d294170;
	} else {
		return inClassId==(int)0x7e1bad66;
	}
}

void Events_obj::_hx_register(){
            	HX_STACKFRAME(&_hx_pos_a810e7e76db8b416_235_register)
HXLINE( 236)		this->unregister();
HXLINE( 237)		{
HXLINE( 237)			int _g = 0;
HXDLIN( 237)			 ::haxe::ui::core::Component _this = this->_target;
HXDLIN( 237)			::Array< ::Dynamic> _g1;
HXDLIN( 237)			if (hx::IsNull( _this->_children )) {
HXLINE( 237)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 237)				_g1 = _this->_children;
            			}
HXDLIN( 237)			while((_g < _g1->length)){
HXLINE( 237)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 237)				_g = (_g + 1);
HXLINE( 238)				bool _hx_tmp;
HXDLIN( 238)				if ((child->hasEvent(HX_("click",48,7c,5e,48),this->onDayClicked_dyn()) == false)) {
HXLINE( 238)					_hx_tmp = child->hasClass(HX_("calendar-day",0d,66,5d,f6));
            				}
            				else {
HXLINE( 238)					_hx_tmp = false;
            				}
HXDLIN( 238)				if (_hx_tmp) {
HXLINE( 239)					child->registerEvent(HX_("click",48,7c,5e,48),this->onDayClicked_dyn(),null());
            				}
            			}
            		}
            	}


void Events_obj::unregister(){
            	HX_STACKFRAME(&_hx_pos_a810e7e76db8b416_245_unregister)
HXDLIN( 245)		int _g = 0;
HXDLIN( 245)		 ::haxe::ui::core::Component _this = this->_target;
HXDLIN( 245)		::Array< ::Dynamic> _g1;
HXDLIN( 245)		if (hx::IsNull( _this->_children )) {
HXDLIN( 245)			_g1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXDLIN( 245)			_g1 = _this->_children;
            		}
HXDLIN( 245)		while((_g < _g1->length)){
HXDLIN( 245)			 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 245)			_g = (_g + 1);
HXLINE( 246)			child->unregisterEvent(HX_("click",48,7c,5e,48),this->onDayClicked_dyn());
            		}
            	}


void Events_obj::onDayClicked( ::haxe::ui::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_a810e7e76db8b416_250_onDayClicked)
HXLINE( 251)		 ::haxe::ui::components::Calendar calendar = hx::TCast<  ::haxe::ui::components::Calendar >::cast(this->_target);
HXLINE( 252)		int day = ( (int)(::Std_obj::parseInt(event->target->get_text())) );
HXLINE( 253)		int month = calendar->get_date()->getMonth();
HXLINE( 254)		int year = calendar->get_date()->getFullYear();
HXLINE( 255)		calendar->set_selectedDate( ::Date_obj::__alloc( HX_CTX ,year,month,day,0,0,0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onDayClicked,(void))


hx::ObjectPtr< Events_obj > Events_obj::__new( ::haxe::ui::core::Component target) {
	hx::ObjectPtr< Events_obj > __this = new Events_obj();
	__this->__construct(target);
	return __this;
}

hx::ObjectPtr< Events_obj > Events_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component target) {
	Events_obj *__this = (Events_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Events_obj), true, "haxe.ui.components._Calendar.Events"));
	*(void **)__this = Events_obj::_hx_vtable;
	__this->__construct(target);
	return __this;
}

Events_obj::Events_obj()
{
}

hx::Val Events_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"register") ) { return hx::Val( _hx_register_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unregister") ) { return hx::Val( unregister_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onDayClicked") ) { return hx::Val( onDayClicked_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Events_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Events_obj_sStaticStorageInfo = 0;
#endif

static ::String Events_obj_sMemberFields[] = {
	HX_("register",63,a6,9f,d0),
	HX_("unregister",bc,8d,63,56),
	HX_("onDayClicked",aa,cd,28,b3),
	::String(null()) };

hx::Class Events_obj::__mClass;

void Events_obj::__register()
{
	Events_obj _hx_dummy;
	Events_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Calendar.Events",d0,85,73,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Events_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Events_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Events_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Events_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Calendar
