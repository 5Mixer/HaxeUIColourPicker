// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageBase
#include <hxinc/haxe/ui/backend/ImageBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageDisplayImpl
#include <hxinc/haxe/ui/backend/ImageDisplayImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageSurface
#include <hxinc/haxe/ui/backend/ImageSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <hxinc/haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <hxinc/haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Image
#include <hxinc/haxe/ui/components/Image.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Image_ResourceBehaviour
#include <hxinc/haxe/ui/components/_Image/ResourceBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ImageDisplay
#include <hxinc/haxe/ui/core/ImageDisplay.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <hxinc/haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <hxinc/haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_util_ImageLoader
#include <hxinc/haxe/ui/util/ImageLoader.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2bce414617decee2_166_new,"haxe.ui.components._Image.ResourceBehaviour","new",0xc7c85df5,"haxe.ui.components._Image.ResourceBehaviour.new","haxe/ui/components/Image.hx",166,0xeed4974a)
HX_LOCAL_STACK_FRAME(_hx_pos_2bce414617decee2_176_validateData,"haxe.ui.components._Image.ResourceBehaviour","validateData",0x2fccedab,"haxe.ui.components._Image.ResourceBehaviour.validateData","haxe/ui/components/Image.hx",176,0xeed4974a)
HX_LOCAL_STACK_FRAME(_hx_pos_2bce414617decee2_167_validateData,"haxe.ui.components._Image.ResourceBehaviour","validateData",0x2fccedab,"haxe.ui.components._Image.ResourceBehaviour.validateData","haxe/ui/components/Image.hx",167,0xeed4974a)
namespace haxe{
namespace ui{
namespace components{
namespace _Image{

void ResourceBehaviour_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_2bce414617decee2_166_new)
HXDLIN( 166)		super::__construct(component);
            	}

Dynamic ResourceBehaviour_obj::__CreateEmpty() { return new ResourceBehaviour_obj; }

void *ResourceBehaviour_obj::_hx_vtable = 0;

Dynamic ResourceBehaviour_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ResourceBehaviour_obj > _hx_result = new ResourceBehaviour_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ResourceBehaviour_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x207cf043) {
		if (inClassId<=(int)0x1450488b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1450488b;
		} else {
			return inClassId==(int)0x207cf043;
		}
	} else {
		return inClassId==(int)0x3a374360 || inClassId==(int)0x6c6873cd;
	}
}

void ResourceBehaviour_obj::validateData(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::ui::components::_Image::ResourceBehaviour,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic imageInfo){
            			HX_GC_STACKFRAME(&_hx_pos_2bce414617decee2_176_validateData)
HXLINE( 176)			if (hx::IsNotNull( imageInfo )) {
HXLINE( 177)				bool _hx_tmp1;
HXDLIN( 177)				if (hx::IsNotNull( _gthis->_value )) {
HXLINE( 177)					_hx_tmp1 = ::haxe::ui::util::_Variant::Variant_Impl__obj::get_isNull(_gthis->_value);
            				}
            				else {
HXLINE( 177)					_hx_tmp1 = true;
            				}
HXDLIN( 177)				if (_hx_tmp1) {
HXLINE( 178)					_gthis->_component->removeImageDisplay();
HXLINE( 179)					_gthis->_component->invalidateComponent(null());
HXLINE( 180)					return;
            				}
HXLINE( 183)				 ::haxe::ui::components::Image image = hx::TCast<  ::haxe::ui::components::Image >::cast(_gthis->_component);
HXLINE( 184)				 ::haxe::ui::core::ImageDisplay display = image->getImageDisplay();
HXLINE( 185)				if (hx::IsNotNull( display )) {
HXLINE( 186)					display->set_imageInfo(imageInfo);
HXLINE( 187)					image->set_originalWidth(( (Float)(imageInfo->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
HXLINE( 188)					image->set_originalHeight(( (Float)(imageInfo->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ));
HXLINE( 189)					bool _hx_tmp2;
HXDLIN( 189)					if ((image->autoSize() == true)) {
HXLINE( 189)						_hx_tmp2 = hx::IsNotNull( image->parentComponent );
            					}
            					else {
HXLINE( 189)						_hx_tmp2 = false;
            					}
HXDLIN( 189)					if (_hx_tmp2) {
HXLINE( 190)						 ::haxe::ui::core::Component _this = image->parentComponent;
HXDLIN( 190)						bool _hx_tmp3;
HXDLIN( 190)						if (hx::IsNotNull( _this->_layout )) {
HXLINE( 190)							_hx_tmp3 = (_this->_layoutLocked == true);
            						}
            						else {
HXLINE( 190)							_hx_tmp3 = true;
            						}
HXDLIN( 190)						if (!(_hx_tmp3)) {
HXLINE( 190)							_this->invalidateComponent(HX_("layout",aa,ae,b8,58));
            						}
            					}
HXLINE( 192)					image->invalidateComponent(null());
HXLINE( 193)					display->validateComponent();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_2bce414617decee2_167_validateData)
HXDLIN( 167)		 ::haxe::ui::components::_Image::ResourceBehaviour _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 168)		bool _hx_tmp;
HXDLIN( 168)		if (hx::IsNotNull( this->_value )) {
HXLINE( 168)			_hx_tmp = ::haxe::ui::util::_Variant::Variant_Impl__obj::get_isNull(this->_value);
            		}
            		else {
HXLINE( 168)			_hx_tmp = true;
            		}
HXDLIN( 168)		if (_hx_tmp) {
HXLINE( 169)			this->_component->removeImageDisplay();
HXLINE( 170)			this->_component->invalidateComponent(null());
HXLINE( 171)			return;
            		}
HXLINE( 174)		 ::haxe::ui::util::ImageLoader imageLoader =  ::haxe::ui::util::ImageLoader_obj::__alloc( HX_CTX ,this->_value);
HXLINE( 175)		imageLoader->load( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}



hx::ObjectPtr< ResourceBehaviour_obj > ResourceBehaviour_obj::__new( ::haxe::ui::core::Component component) {
	hx::ObjectPtr< ResourceBehaviour_obj > __this = new ResourceBehaviour_obj();
	__this->__construct(component);
	return __this;
}

hx::ObjectPtr< ResourceBehaviour_obj > ResourceBehaviour_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	ResourceBehaviour_obj *__this = (ResourceBehaviour_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ResourceBehaviour_obj), true, "haxe.ui.components._Image.ResourceBehaviour"));
	*(void **)__this = ResourceBehaviour_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

ResourceBehaviour_obj::ResourceBehaviour_obj()
{
}

hx::Val ResourceBehaviour_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ResourceBehaviour_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ResourceBehaviour_obj_sStaticStorageInfo = 0;
#endif

static ::String ResourceBehaviour_obj_sMemberFields[] = {
	HX_("validateData",e0,55,63,96),
	::String(null()) };

hx::Class ResourceBehaviour_obj::__mClass;

void ResourceBehaviour_obj::__register()
{
	ResourceBehaviour_obj _hx_dummy;
	ResourceBehaviour_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Image.ResourceBehaviour",83,3f,83,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ResourceBehaviour_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ResourceBehaviour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResourceBehaviour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResourceBehaviour_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Image
