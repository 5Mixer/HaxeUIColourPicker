// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_TextBase
#include <hxinc/haxe/ui/backend/TextBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_TextInputImpl
#include <hxinc/haxe/ui/backend/TextInputImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_TextField
#include <hxinc/haxe/ui/components/TextField.h>
#endif
#ifndef INCLUDED_haxe_ui_components__TextField_Builder
#include <hxinc/haxe/ui/components/_TextField/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TextInput
#include <hxinc/haxe/ui/core/TextInput.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <hxinc/haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51c0c758e7e931c3_306_new,"haxe.ui.components._TextField.Builder","new",0x70429273,"haxe.ui.components._TextField.Builder.new","haxe/ui/components/TextField.hx",306,0x9dfe9498)
HX_LOCAL_STACK_FRAME(_hx_pos_51c0c758e7e931c3_311_applyStyle,"haxe.ui.components._TextField.Builder","applyStyle",0x327b1730,"haxe.ui.components._TextField.Builder.applyStyle","haxe/ui/components/TextField.hx",311,0x9dfe9498)
namespace haxe{
namespace ui{
namespace components{
namespace _TextField{

void Builder_obj::__construct( ::haxe::ui::components::TextField textfield){
            	HX_GC_STACKFRAME(&_hx_pos_51c0c758e7e931c3_306_new)
HXLINE( 307)		super::__construct(textfield);
HXLINE( 308)		this->_hx_set__textfield(HX_CTX, textfield);
            	}

Dynamic Builder_obj::__CreateEmpty() { return new Builder_obj; }

void *Builder_obj::_hx_vtable = 0;

Dynamic Builder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Builder_obj > _hx_result = new Builder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Builder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6b66263d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6b66263d;
	} else {
		return inClassId==(int)0x6fc7eb95;
	}
}

void Builder_obj::applyStyle( ::haxe::ui::styles::Style style){
            	HX_STACKFRAME(&_hx_pos_51c0c758e7e931c3_311_applyStyle)
HXLINE( 312)		if (hx::IsNotNull( style->icon )) {
HXLINE( 313)			this->_textfield->set_icon(style->icon);
            		}
HXLINE( 315)		if ((this->_textfield->hasTextInput() == true)) {
HXLINE( 316)			this->_textfield->getTextInput()->set_textStyle(style);
            		}
            	}



hx::ObjectPtr< Builder_obj > Builder_obj::__new( ::haxe::ui::components::TextField textfield) {
	hx::ObjectPtr< Builder_obj > __this = new Builder_obj();
	__this->__construct(textfield);
	return __this;
}

hx::ObjectPtr< Builder_obj > Builder_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::components::TextField textfield) {
	Builder_obj *__this = (Builder_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Builder_obj), true, "haxe.ui.components._TextField.Builder"));
	*(void **)__this = Builder_obj::_hx_vtable;
	__this->__construct(textfield);
	return __this;
}

Builder_obj::Builder_obj()
{
}

void Builder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Builder);
	HX_MARK_MEMBER_NAME(_textfield,"_textfield");
	 ::haxe::ui::core::CompositeBuilder_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Builder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_textfield,"_textfield");
	 ::haxe::ui::core::CompositeBuilder_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Builder_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_textfield") ) { return hx::Val( _textfield ); }
		if (HX_FIELD_EQ(inName,"applyStyle") ) { return hx::Val( applyStyle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Builder_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_textfield") ) { _hx_set__textfield(HX_CTX_GET,inValue.Cast<  ::haxe::ui::components::TextField >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Builder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_textfield",ae,30,f6,61));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Builder_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ui::components::TextField */ ,(int)offsetof(Builder_obj,_textfield),HX_("_textfield",ae,30,f6,61)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Builder_obj_sStaticStorageInfo = 0;
#endif

static ::String Builder_obj_sMemberFields[] = {
	HX_("_textfield",ae,30,f6,61),
	HX_("applyStyle",e3,20,6f,2f),
	::String(null()) };

hx::Class Builder_obj::__mClass;

void Builder_obj::__register()
{
	Builder_obj _hx_dummy;
	Builder_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._TextField.Builder",01,dd,6d,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Builder_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Builder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Builder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Builder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _TextField
