// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <hxinc/haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <hxinc/haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <hxinc/haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <hxinc/haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <hxinc/haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Range
#include <hxinc/haxe/ui/components/Range.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Range_RangeStart
#include <hxinc/haxe/ui/components/_Range/RangeStart.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <hxinc/haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <hxinc/haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <hxinc/haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <hxinc/haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <hxinc/haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <hxinc/haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_07fae1d7d21df2d6_72_new,"haxe.ui.components._Range.RangeStart","new",0x5d31ec41,"haxe.ui.components._Range.RangeStart.new","haxe/ui/components/Range.hx",72,0x313cba28)
HX_LOCAL_STACK_FRAME(_hx_pos_07fae1d7d21df2d6_73_validateData,"haxe.ui.components._Range.RangeStart","validateData",0x89dd35df,"haxe.ui.components._Range.RangeStart.validateData","haxe/ui/components/Range.hx",73,0x313cba28)
namespace haxe{
namespace ui{
namespace components{
namespace _Range{

void RangeStart_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_07fae1d7d21df2d6_72_new)
HXDLIN(  72)		super::__construct(component);
            	}

Dynamic RangeStart_obj::__CreateEmpty() { return new RangeStart_obj; }

void *RangeStart_obj::_hx_vtable = 0;

Dynamic RangeStart_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RangeStart_obj > _hx_result = new RangeStart_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RangeStart_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3a374360) {
		if (inClassId<=(int)0x207cf043) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x207cf043;
		} else {
			return inClassId==(int)0x3a374360;
		}
	} else {
		return inClassId==(int)0x6c6873cd || inClassId==(int)0x6edac3f3;
	}
}

void RangeStart_obj::validateData(){
            	HX_GC_STACKFRAME(&_hx_pos_07fae1d7d21df2d6_73_validateData)
HXLINE(  74)		 ::haxe::ui::components::Range range = hx::TCast<  ::haxe::ui::components::Range >::cast(this->_component);
HXLINE(  75)		bool _hx_tmp;
HXDLIN(  75)		if (hx::IsNotNull( this->_value )) {
HXLINE(  75)			 ::haxe::ui::util::VariantType _hx_tmp1 = this->_value;
HXDLIN(  75)			_hx_tmp = ::haxe::ui::util::_Variant::Variant_Impl__obj::lt(_hx_tmp1,::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(range->get_min()));
            		}
            		else {
HXLINE(  75)			_hx_tmp = false;
            		}
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  76)			this->_hx_set__value(HX_CTX, ::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(range->get_min()));
            		}
            		else {
HXLINE(  77)			bool _hx_tmp2;
HXDLIN(  77)			if (hx::IsNotNull( this->_value )) {
HXLINE(  77)				 ::haxe::ui::util::VariantType _hx_tmp3 = this->_value;
HXDLIN(  77)				_hx_tmp2 = ::haxe::ui::util::_Variant::Variant_Impl__obj::gt(_hx_tmp3,::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(range->get_max()));
            			}
            			else {
HXLINE(  77)				_hx_tmp2 = false;
            			}
HXDLIN(  77)			if (_hx_tmp2) {
HXLINE(  78)				this->_hx_set__value(HX_CTX, ::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(range->get_max()));
            			}
            		}
HXLINE(  80)		range->set_start(::haxe::ui::util::_Variant::Variant_Impl__obj::toFloat(this->_value));
HXLINE(  81)		{
HXLINE(  81)			 ::haxe::ui::core::Component _this = this->_component;
HXDLIN(  81)			bool _hx_tmp4;
HXDLIN(  81)			if (hx::IsNotNull( _this->_layout )) {
HXLINE(  81)				_hx_tmp4 = (_this->_layoutLocked == true);
            			}
            			else {
HXLINE(  81)				_hx_tmp4 = true;
            			}
HXDLIN(  81)			if (!(_hx_tmp4)) {
HXLINE(  81)				_this->invalidateComponent(HX_("layout",aa,ae,b8,58));
            			}
            		}
HXLINE(  83)		 ::haxe::ui::events::UIEvent changeEvent =  ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null());
HXLINE(  84)		this->_component->dispatch(changeEvent);
            	}



hx::ObjectPtr< RangeStart_obj > RangeStart_obj::__new( ::haxe::ui::core::Component component) {
	hx::ObjectPtr< RangeStart_obj > __this = new RangeStart_obj();
	__this->__construct(component);
	return __this;
}

hx::ObjectPtr< RangeStart_obj > RangeStart_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	RangeStart_obj *__this = (RangeStart_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RangeStart_obj), true, "haxe.ui.components._Range.RangeStart"));
	*(void **)__this = RangeStart_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

RangeStart_obj::RangeStart_obj()
{
}

hx::Val RangeStart_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *RangeStart_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RangeStart_obj_sStaticStorageInfo = 0;
#endif

static ::String RangeStart_obj_sMemberFields[] = {
	HX_("validateData",e0,55,63,96),
	::String(null()) };

hx::Class RangeStart_obj::__mClass;

void RangeStart_obj::__register()
{
	RangeStart_obj _hx_dummy;
	RangeStart_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Range.RangeStart",cf,b7,5c,5c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RangeStart_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RangeStart_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RangeStart_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RangeStart_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Range
