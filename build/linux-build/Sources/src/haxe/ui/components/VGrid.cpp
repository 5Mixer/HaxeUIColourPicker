// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_components_VGrid
#include <hxinc/haxe/ui/components/VGrid.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <hxinc/haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <hxinc/haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_VerticalGridLayout
#include <hxinc/haxe/ui/layouts/VerticalGridLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dfb81407ccea4086_8_new,"haxe.ui.components.VGrid","new",0xa203f3e8,"haxe.ui.components.VGrid.new","haxe/ui/components/VGrid.hx",8,0x9c69d6e9)
HX_LOCAL_STACK_FRAME(_hx_pos_dfb81407ccea4086_17_createDefaults,"haxe.ui.components.VGrid","createDefaults",0x77d34926,"haxe.ui.components.VGrid.createDefaults","haxe/ui/components/VGrid.hx",17,0x9c69d6e9)
HX_LOCAL_STACK_FRAME(_hx_pos_dfb81407ccea4086_28_get_columns,"haxe.ui.components.VGrid","get_columns",0x5c9ef87c,"haxe.ui.components.VGrid.get_columns","haxe/ui/components/VGrid.hx",28,0x9c69d6e9)
HX_LOCAL_STACK_FRAME(_hx_pos_dfb81407ccea4086_31_set_columns,"haxe.ui.components.VGrid","set_columns",0x670bff88,"haxe.ui.components.VGrid.set_columns","haxe/ui/components/VGrid.hx",31,0x9c69d6e9)
HX_LOCAL_STACK_FRAME(_hx_pos_37a5adbb31ed2af8_315_registerBehaviours,"haxe.ui.components.VGrid","registerBehaviours",0x5fecbd51,"haxe.ui.components.VGrid.registerBehaviours","haxe/ui/macros/Macros.hx",315,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfa5149fbdaab45_521_cloneComponent,"haxe.ui.components.VGrid","cloneComponent",0x9c55e318,"haxe.ui.components.VGrid.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",521,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_37a5adbb31ed2af8_302_self,"haxe.ui.components.VGrid","self",0x24bf7f04,"haxe.ui.components.VGrid.self","haxe/ui/macros/Macros.hx",302,0x27866361)
namespace haxe{
namespace ui{
namespace components{

void VGrid_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_dfb81407ccea4086_8_new)
HXLINE(   9)		super::__construct();
HXLINE(  11)		this->set_columns(1);
            	}

Dynamic VGrid_obj::__CreateEmpty() { return new VGrid_obj; }

void *VGrid_obj::_hx_vtable = 0;

Dynamic VGrid_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VGrid_obj > _hx_result = new VGrid_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VGrid_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4eb0678b) {
		if (inClassId<=(int)0x2a04b446) {
			if (inClassId<=(int)0x23af8dfd) {
				if (inClassId<=(int)0x0fddceef) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0fddceef;
				} else {
					return inClassId==(int)0x23af8dfd;
				}
			} else {
				return inClassId==(int)0x2a04b446;
			}
		} else {
			if (inClassId<=(int)0x4a06d0bc) {
				return inClassId==(int)0x324697fd || inClassId==(int)0x4a06d0bc;
			} else {
				return inClassId==(int)0x4eb0678b;
			}
		}
	} else {
		if (inClassId<=(int)0x7ee2d869) {
			if (inClassId<=(int)0x7140e8dc) {
				return inClassId==(int)0x6ca63888 || inClassId==(int)0x7140e8dc;
			} else {
				return inClassId==(int)0x7ee2d869;
			}
		} else {
			return inClassId==(int)0x7f63f3f1 || inClassId==(int)0x7ff0cb0e;
		}
	}
}

void VGrid_obj::createDefaults(){
            	HX_GC_STACKFRAME(&_hx_pos_dfb81407ccea4086_17_createDefaults)
HXLINE(  18)		this->super::createDefaults();
HXLINE(  19)		this->_hx_set__defaultLayoutClass(HX_CTX, hx::ClassOf< ::haxe::ui::layouts::VerticalGridLayout >());
            	}


int VGrid_obj::get_columns(){
            	HX_STACKFRAME(&_hx_pos_dfb81407ccea4086_28_get_columns)
HXDLIN(  28)		return this->_columns;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VGrid_obj,get_columns,return )

int VGrid_obj::set_columns(int value){
            	HX_STACKFRAME(&_hx_pos_dfb81407ccea4086_31_set_columns)
HXLINE(  32)		if ((this->_columns != value)) {
HXLINE(  34)			this->_columns = value;
HXLINE(  36)			hx::TCast<  ::haxe::ui::layouts::VerticalGridLayout >::cast(this->get_layout())->set_columns(value);
HXLINE(  37)			bool _hx_tmp;
HXDLIN(  37)			if (hx::IsNotNull( this->_layout )) {
HXLINE(  37)				_hx_tmp = (this->_layoutLocked == true);
            			}
            			else {
HXLINE(  37)				_hx_tmp = true;
            			}
HXDLIN(  37)			if (!(_hx_tmp)) {
HXLINE(  37)				this->invalidateComponent(HX_("layout",aa,ae,b8,58));
            			}
            		}
HXLINE(  39)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VGrid_obj,set_columns,return )

void VGrid_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_37a5adbb31ed2af8_315_registerBehaviours)
HXDLIN( 315)		this->super::registerBehaviours();
            	}


 ::haxe::ui::core::ComponentContainer VGrid_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_0cfa5149fbdaab45_521_cloneComponent)
HXLINE( 267)		 ::haxe::ui::components::VGrid c = ( ( ::haxe::ui::components::VGrid)(this->super::cloneComponent()) );
HXLINE( 281)		c->set_columns(this->get_columns());
HXLINE( 287)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 287)		if (hx::IsNull( this->_children )) {
HXLINE( 287)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp = this->_children;
            		}
HXDLIN( 287)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 287)		if (hx::IsNull( c->_children )) {
HXLINE( 287)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 287)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 287)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 288)			int _g = 0;
HXDLIN( 288)			::Array< ::Dynamic> _g1;
HXDLIN( 288)			if (hx::IsNull( this->_children )) {
HXLINE( 288)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 288)				_g1 = this->_children;
            			}
HXDLIN( 288)			while((_g < _g1->length)){
HXLINE( 288)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 288)				_g = (_g + 1);
HXLINE( 289)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 293)		return c;
            	}


 ::haxe::ui::core::ComponentContainer VGrid_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_37a5adbb31ed2af8_302_self)
HXDLIN( 302)		return  ::haxe::ui::components::VGrid_obj::__alloc( HX_CTX );
            	}



hx::ObjectPtr< VGrid_obj > VGrid_obj::__new() {
	hx::ObjectPtr< VGrid_obj > __this = new VGrid_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VGrid_obj > VGrid_obj::__alloc(hx::Ctx *_hx_ctx) {
	VGrid_obj *__this = (VGrid_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VGrid_obj), true, "haxe.ui.components.VGrid"));
	*(void **)__this = VGrid_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VGrid_obj::VGrid_obj()
{
}

hx::Val VGrid_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return hx::Val( self_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"columns") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_columns() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_columns") ) { return hx::Val( _columns ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_columns") ) { return hx::Val( get_columns_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_columns") ) { return hx::Val( set_columns_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createDefaults") ) { return hx::Val( createDefaults_dyn() ); }
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return hx::Val( cloneComponent_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VGrid_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"columns") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_columns(inValue.Cast< int >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_columns") ) { _columns=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VGrid_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_columns",5e,06,12,2d));
	outFields->push(HX_("columns",dd,ac,59,f3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo VGrid_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(VGrid_obj,_columns),HX_("_columns",5e,06,12,2d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VGrid_obj_sStaticStorageInfo = 0;
#endif

static ::String VGrid_obj_sMemberFields[] = {
	HX_("createDefaults",ae,4f,d4,01),
	HX_("_columns",5e,06,12,2d),
	HX_("get_columns",f4,0c,54,79),
	HX_("set_columns",00,14,c1,83),
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

hx::Class VGrid_obj::__mClass;

void VGrid_obj::__register()
{
	VGrid_obj _hx_dummy;
	VGrid_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components.VGrid",f6,1f,ba,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VGrid_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VGrid_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VGrid_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VGrid_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
