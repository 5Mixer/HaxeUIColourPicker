// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <hxinc/haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_components_ButtonLayout
#include <hxinc/haxe/ui/components/ButtonLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Image
#include <hxinc/haxe/ui/components/Image.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Label
#include <hxinc/haxe/ui/components/Label.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Size
#include <hxinc/haxe/ui/geom/Size.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_DefaultLayout
#include <hxinc/haxe/ui/layouts/DefaultLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <hxinc/haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <hxinc/haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <hxinc/haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_49c59bbbec578e16_121_new,"haxe.ui.components.ButtonLayout","new",0xc6d1ddd4,"haxe.ui.components.ButtonLayout.new","haxe/ui/components/Button.hx",121,0x45086125)
HX_LOCAL_STACK_FRAME(_hx_pos_49c59bbbec578e16_123_get_iconPosition,"haxe.ui.components.ButtonLayout","get_iconPosition",0x015f6bd7,"haxe.ui.components.ButtonLayout.get_iconPosition","haxe/ui/components/Button.hx",123,0x45086125)
HX_LOCAL_STACK_FRAME(_hx_pos_49c59bbbec578e16_130_resizeChildren,"haxe.ui.components.ButtonLayout","resizeChildren",0x32c1025f,"haxe.ui.components.ButtonLayout.resizeChildren","haxe/ui/components/Button.hx",130,0x45086125)
HX_LOCAL_STACK_FRAME(_hx_pos_49c59bbbec578e16_147_repositionChildren,"haxe.ui.components.ButtonLayout","repositionChildren",0x87f235c7,"haxe.ui.components.ButtonLayout.repositionChildren","haxe/ui/components/Button.hx",147,0x45086125)
HX_LOCAL_STACK_FRAME(_hx_pos_49c59bbbec578e16_253_getTextAlignPos,"haxe.ui.components.ButtonLayout","getTextAlignPos",0x0e58c6c6,"haxe.ui.components.ButtonLayout.getTextAlignPos","haxe/ui/components/Button.hx",253,0x45086125)
namespace haxe{
namespace ui{
namespace components{

void ButtonLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_49c59bbbec578e16_121_new)
HXDLIN( 121)		super::__construct();
            	}

Dynamic ButtonLayout_obj::__CreateEmpty() { return new ButtonLayout_obj; }

void *ButtonLayout_obj::_hx_vtable = 0;

Dynamic ButtonLayout_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ButtonLayout_obj > _hx_result = new ButtonLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ButtonLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x548a03f5) {
		if (inClassId<=(int)0x270192f4) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x270192f4;
		} else {
			return inClassId==(int)0x548a03f5;
		}
	} else {
		return inClassId==(int)0x652c3c60;
	}
}

::String ButtonLayout_obj::get_iconPosition(){
            	HX_STACKFRAME(&_hx_pos_49c59bbbec578e16_123_get_iconPosition)
HXLINE( 124)		bool _hx_tmp;
HXDLIN( 124)		if (hx::IsNotNull( this->get_component()->get_style() )) {
HXLINE( 124)			_hx_tmp = hx::IsNull( this->get_component()->get_style()->iconPosition );
            		}
            		else {
HXLINE( 124)			_hx_tmp = true;
            		}
HXDLIN( 124)		if (_hx_tmp) {
HXLINE( 125)			return HX_("left",07,08,b0,47);
            		}
HXLINE( 127)		return this->get_component()->get_style()->iconPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ButtonLayout_obj,get_iconPosition,return )

void ButtonLayout_obj::resizeChildren(){
            	HX_STACKFRAME(&_hx_pos_49c59bbbec578e16_130_resizeChildren)
HXLINE( 131)		this->super::resizeChildren();
HXLINE( 133)		 ::haxe::ui::components::Label label = this->get_component()->findComponent(null(),hx::ClassOf< ::haxe::ui::components::Label >(),false,null()).StaticCast<  ::haxe::ui::components::Label >();
HXLINE( 134)		 ::haxe::ui::components::Image icon = this->get_component()->findComponent(HX_("button-icon",f4,52,38,e9),null(),false,null()).StaticCast<  ::haxe::ui::components::Image >();
HXLINE( 135)		if ((this->_component->get_autoWidth() == false)) {
HXLINE( 136)			 ::haxe::ui::geom::Size ucx = this->get_usableSize();
HXLINE( 137)			if (hx::IsNotNull( label )) {
HXLINE( 138)				Float cx = ucx->width;
HXLINE( 139)				bool _hx_tmp;
HXDLIN( 139)				if (hx::IsNotNull( icon )) {
HXLINE( 139)					bool _hx_tmp1;
HXDLIN( 139)					bool _hx_tmp2;
HXDLIN( 139)					if ((this->get_iconPosition() != HX_("far-right",a6,3e,4f,24))) {
HXLINE( 139)						_hx_tmp2 = (this->get_iconPosition() == HX_("far-left",7d,bc,22,51));
            					}
            					else {
HXLINE( 139)						_hx_tmp2 = true;
            					}
HXDLIN( 139)					if (!(_hx_tmp2)) {
HXLINE( 139)						_hx_tmp1 = (this->get_iconPosition() == HX_("left",07,08,b0,47));
            					}
            					else {
HXLINE( 139)						_hx_tmp1 = true;
            					}
HXDLIN( 139)					if (!(_hx_tmp1)) {
HXLINE( 139)						_hx_tmp = (this->get_iconPosition() == HX_("right",dc,0b,64,e9));
            					}
            					else {
HXLINE( 139)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 139)					_hx_tmp = false;
            				}
HXDLIN( 139)				if (_hx_tmp) {
HXLINE( 140)					 ::Dynamic cx1 = icon->get_width();
HXDLIN( 140)					cx = (cx - (cx1 + this->get_verticalSpacing()));
            				}
HXLINE( 142)				label->set_width(cx);
            			}
            		}
            	}


void ButtonLayout_obj::repositionChildren(){
            	HX_STACKFRAME(&_hx_pos_49c59bbbec578e16_147_repositionChildren)
HXLINE( 148)		this->super::repositionChildren();
HXLINE( 150)		 ::haxe::ui::components::Label label = this->get_component()->findComponent(null(),hx::ClassOf< ::haxe::ui::components::Label >(),false,null()).StaticCast<  ::haxe::ui::components::Label >();
HXLINE( 151)		 ::haxe::ui::components::Image icon = this->get_component()->findComponent(HX_("button-icon",f4,52,38,e9),null(),false,null()).StaticCast<  ::haxe::ui::components::Image >();
HXLINE( 152)		::String _hx_switch_0 = this->get_iconPosition();
            		if (  (_hx_switch_0==HX_("far-left",7d,bc,22,51)) ){
HXLINE( 180)			bool _hx_tmp;
HXDLIN( 180)			if (hx::IsNotNull( label )) {
HXLINE( 180)				_hx_tmp = hx::IsNotNull( icon );
            			}
            			else {
HXLINE( 180)				_hx_tmp = false;
            			}
HXDLIN( 180)			if (_hx_tmp) {
HXLINE( 181)				Float x = this->get_paddingLeft();
HXLINE( 183)				if ((this->get_iconPosition() == HX_("far-left",7d,bc,22,51))) {
HXLINE( 184)					Float _hx_tmp1 = (x + this->marginLeft(icon));
HXDLIN( 184)					icon->set_left((_hx_tmp1 - this->marginRight(icon)));
HXLINE( 185)					Float x1 = this->get_horizontalSpacing();
HXDLIN( 185)					x = (x + (x1 + icon->get_componentWidth()));
HXLINE( 186)					Float _hx_tmp2 = (x + this->marginLeft(label));
HXDLIN( 186)					label->set_left((_hx_tmp2 - this->marginRight(label)));
            				}
HXLINE( 189)				Float _hx_tmp3 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 189)				int _hx_tmp4 = ::Std_obj::_hx_int((_hx_tmp3 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 189)				Float _hx_tmp5 = (_hx_tmp4 + this->marginTop(label));
HXDLIN( 189)				label->set_top((_hx_tmp5 - this->marginBottom(label)));
HXLINE( 190)				Float _hx_tmp6 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 190)				int _hx_tmp7 = ::Std_obj::_hx_int((_hx_tmp6 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 190)				Float _hx_tmp8 = (_hx_tmp7 + this->marginTop(icon));
HXDLIN( 190)				icon->set_top((_hx_tmp8 - this->marginBottom(icon)));
            			}
            			else {
HXLINE( 191)				if (hx::IsNotNull( label )) {
HXLINE( 192)					label->set_left(this->get_paddingLeft());
HXLINE( 193)					Float _hx_tmp9 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 193)					int _hx_tmp10 = ::Std_obj::_hx_int((_hx_tmp9 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 193)					Float _hx_tmp11 = (_hx_tmp10 + this->marginTop(label));
HXDLIN( 193)					label->set_top((_hx_tmp11 - this->marginBottom(label)));
            				}
            				else {
HXLINE( 194)					if (hx::IsNotNull( icon )) {
HXLINE( 195)						Float _hx_tmp12 = (( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) ));
HXDLIN( 195)						icon->set_left(::Std_obj::_hx_int((_hx_tmp12 - (( (Float)(icon->get_componentWidth()) ) / ( (Float)(2) )))));
HXLINE( 196)						Float _hx_tmp13 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 196)						int _hx_tmp14 = ::Std_obj::_hx_int((_hx_tmp13 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 196)						Float _hx_tmp15 = (_hx_tmp14 + this->marginTop(icon));
HXDLIN( 196)						icon->set_top((_hx_tmp15 - this->marginBottom(icon)));
            					}
            				}
            			}
HXLINE( 180)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("far-right",a6,3e,4f,24)) ){
HXLINE( 154)			bool _hx_tmp16;
HXDLIN( 154)			if (hx::IsNotNull( label )) {
HXLINE( 154)				_hx_tmp16 = hx::IsNotNull( icon );
            			}
            			else {
HXLINE( 154)				_hx_tmp16 = false;
            			}
HXDLIN( 154)			if (_hx_tmp16) {
HXLINE( 155)				 ::Dynamic cx = label->get_componentWidth();
HXDLIN( 155)				Float cx1 = (cx + icon->get_componentWidth());
HXDLIN( 155)				Float cx2 = (cx1 + this->get_horizontalSpacing());
HXLINE( 156)				Float x2 = ( (Float)(::Std_obj::_hx_int(((( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) )) - (cx2 / ( (Float)(2) ))))) );
HXLINE( 158)				if ((this->get_iconPosition() == HX_("far-right",a6,3e,4f,24))) {
HXLINE( 159)					Float _hx_tmp17 = (cx2 + this->get_paddingLeft());
HXDLIN( 159)					Float _hx_tmp18 = (_hx_tmp17 + this->get_paddingRight());
HXDLIN( 159)					if (hx::IsLess( _hx_tmp18,this->get_component()->get_componentWidth() )) {
HXLINE( 160)						label->set_left(this->get_paddingLeft());
HXLINE( 161)						Float x3 = this->get_horizontalSpacing();
HXDLIN( 161)						x2 = (x2 + (x3 + label->get_componentWidth()));
HXLINE( 162)						 ::Dynamic _hx_tmp19 = this->get_component()->get_componentWidth();
HXDLIN( 162)						Float _hx_tmp20 = (( (Float)(_hx_tmp19) ) - ( (Float)(icon->get_componentWidth()) ));
HXDLIN( 162)						Float _hx_tmp21 = (_hx_tmp20 - this->get_paddingRight());
HXDLIN( 162)						Float _hx_tmp22 = (_hx_tmp21 + this->marginLeft(icon));
HXDLIN( 162)						icon->set_left((_hx_tmp22 - this->marginRight(icon)));
            					}
            					else {
HXLINE( 164)						label->set_left(this->get_paddingLeft());
HXLINE( 165)						Float x4 = this->get_horizontalSpacing();
HXDLIN( 165)						x2 = (x2 + (x4 + label->get_componentWidth()));
HXLINE( 166)						Float _hx_tmp23 = (x2 + this->marginLeft(icon));
HXDLIN( 166)						icon->set_left((_hx_tmp23 - this->marginRight(icon)));
            					}
            				}
HXLINE( 170)				Float _hx_tmp24 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 170)				int _hx_tmp25 = ::Std_obj::_hx_int((_hx_tmp24 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 170)				Float _hx_tmp26 = (_hx_tmp25 + this->marginTop(label));
HXDLIN( 170)				label->set_top((_hx_tmp26 - this->marginBottom(label)));
HXLINE( 171)				Float _hx_tmp27 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 171)				int _hx_tmp28 = ::Std_obj::_hx_int((_hx_tmp27 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 171)				Float _hx_tmp29 = (_hx_tmp28 + this->marginTop(icon));
HXDLIN( 171)				icon->set_top((_hx_tmp29 - this->marginBottom(icon)));
            			}
            			else {
HXLINE( 172)				if (hx::IsNotNull( label )) {
HXLINE( 173)					label->set_left(this->get_paddingLeft());
HXLINE( 174)					Float _hx_tmp30 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 174)					int _hx_tmp31 = ::Std_obj::_hx_int((_hx_tmp30 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 174)					Float _hx_tmp32 = (_hx_tmp31 + this->marginTop(label));
HXDLIN( 174)					label->set_top((_hx_tmp32 - this->marginBottom(label)));
            				}
            				else {
HXLINE( 175)					if (hx::IsNotNull( icon )) {
HXLINE( 176)						Float _hx_tmp33 = (( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) ));
HXDLIN( 176)						icon->set_left(::Std_obj::_hx_int((_hx_tmp33 - (( (Float)(icon->get_componentWidth()) ) / ( (Float)(2) )))));
HXLINE( 177)						Float _hx_tmp34 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 177)						int _hx_tmp35 = ::Std_obj::_hx_int((_hx_tmp34 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 177)						Float _hx_tmp36 = (_hx_tmp35 + this->marginTop(icon));
HXDLIN( 177)						icon->set_top((_hx_tmp36 - this->marginBottom(icon)));
            					}
            				}
            			}
HXLINE( 154)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ||  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 199)			bool _hx_tmp37;
HXDLIN( 199)			if (hx::IsNotNull( label )) {
HXLINE( 199)				_hx_tmp37 = hx::IsNotNull( icon );
            			}
            			else {
HXLINE( 199)				_hx_tmp37 = false;
            			}
HXDLIN( 199)			if (_hx_tmp37) {
HXLINE( 200)				 ::Dynamic cx3 = label->get_componentWidth();
HXDLIN( 200)				Float cx4 = (cx3 + icon->get_componentWidth());
HXDLIN( 200)				Float cx5 = (cx4 + this->get_horizontalSpacing());
HXLINE( 201)				Float x5 = ( (Float)(::Std_obj::_hx_int(((( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) )) - (cx5 / ( (Float)(2) ))))) );
HXLINE( 202)				if ((hx::TCast<  ::haxe::ui::components::Button >::cast(this->get_component())->get_textAlign() == HX_("left",07,08,b0,47))) {
HXLINE( 203)					x5 = this->get_paddingLeft();
            				}
HXLINE( 206)				if ((this->get_iconPosition() == HX_("right",dc,0b,64,e9))) {
HXLINE( 207)					Float _hx_tmp38 = (x5 + this->marginLeft(label));
HXDLIN( 207)					label->set_left((_hx_tmp38 - this->marginRight(label)));
HXLINE( 208)					Float x6 = this->get_horizontalSpacing();
HXDLIN( 208)					x5 = (x5 + (x6 + label->get_componentWidth()));
HXLINE( 209)					Float _hx_tmp39 = (x5 + this->marginLeft(icon));
HXDLIN( 209)					icon->set_left((_hx_tmp39 - this->marginRight(icon)));
            				}
            				else {
HXLINE( 211)					Float _hx_tmp40 = (x5 + this->marginLeft(icon));
HXDLIN( 211)					icon->set_left((_hx_tmp40 - this->marginRight(icon)));
HXLINE( 212)					Float x7 = this->get_horizontalSpacing();
HXDLIN( 212)					x5 = (x5 + (x7 + icon->get_componentWidth()));
HXLINE( 213)					Float _hx_tmp41 = (x5 + this->marginLeft(label));
HXDLIN( 213)					label->set_left((_hx_tmp41 - this->marginRight(label)));
            				}
HXLINE( 216)				Float _hx_tmp42 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 216)				int _hx_tmp43 = ::Std_obj::_hx_int((_hx_tmp42 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 216)				Float _hx_tmp44 = (_hx_tmp43 + this->marginTop(label));
HXDLIN( 216)				label->set_top((_hx_tmp44 - this->marginBottom(label)));
HXLINE( 217)				Float _hx_tmp45 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 217)				int _hx_tmp46 = ::Std_obj::_hx_int((_hx_tmp45 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 217)				Float _hx_tmp47 = (_hx_tmp46 + this->marginTop(icon));
HXDLIN( 217)				icon->set_top((_hx_tmp47 - this->marginBottom(icon)));
            			}
            			else {
HXLINE( 218)				if (hx::IsNotNull( label )) {
HXLINE( 219)					label->set_left(this->getTextAlignPos(label,( (Float)(this->get_component()->get_componentWidth()) )));
HXLINE( 220)					Float _hx_tmp48 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 220)					int _hx_tmp49 = ::Std_obj::_hx_int((_hx_tmp48 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 220)					Float _hx_tmp50 = (_hx_tmp49 + this->marginTop(label));
HXDLIN( 220)					label->set_top((_hx_tmp50 - this->marginBottom(label)));
            				}
            				else {
HXLINE( 221)					if (hx::IsNotNull( icon )) {
HXLINE( 222)						Float _hx_tmp51 = (( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) ));
HXDLIN( 222)						icon->set_left(::Std_obj::_hx_int((_hx_tmp51 - (( (Float)(icon->get_componentWidth()) ) / ( (Float)(2) )))));
HXLINE( 223)						Float _hx_tmp52 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 223)						int _hx_tmp53 = ::Std_obj::_hx_int((_hx_tmp52 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 223)						Float _hx_tmp54 = (_hx_tmp53 + this->marginTop(icon));
HXDLIN( 223)						icon->set_top((_hx_tmp54 - this->marginBottom(icon)));
            					}
            				}
            			}
HXLINE( 199)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE( 226)			bool _hx_tmp55;
HXDLIN( 226)			if (hx::IsNotNull( label )) {
HXLINE( 226)				_hx_tmp55 = hx::IsNotNull( icon );
            			}
            			else {
HXLINE( 226)				_hx_tmp55 = false;
            			}
HXDLIN( 226)			if (_hx_tmp55) {
HXLINE( 227)				 ::Dynamic cy = label->get_componentHeight();
HXDLIN( 227)				Float cy1 = (cy + icon->get_componentHeight());
HXDLIN( 227)				Float cy2 = (cy1 + this->get_verticalSpacing());
HXLINE( 228)				Float y = ( (Float)(::Std_obj::_hx_int(((( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) )) - (cy2 / ( (Float)(2) ))))) );
HXLINE( 230)				if ((this->get_iconPosition() == HX_("bottom",eb,e6,78,65))) {
HXLINE( 231)					Float _hx_tmp56 = (y + this->marginTop(label));
HXDLIN( 231)					label->set_top((_hx_tmp56 - this->marginBottom(label)));
HXLINE( 232)					Float y1 = this->get_verticalSpacing();
HXDLIN( 232)					y = (y + (y1 + label->get_componentHeight()));
HXLINE( 233)					Float _hx_tmp57 = (y + this->marginTop(icon));
HXDLIN( 233)					icon->set_top((_hx_tmp57 - this->marginBottom(icon)));
            				}
            				else {
HXLINE( 235)					Float _hx_tmp58 = (y + this->marginTop(icon));
HXDLIN( 235)					icon->set_top((_hx_tmp58 - this->marginBottom(icon)));
HXLINE( 236)					Float y2 = this->get_verticalSpacing();
HXDLIN( 236)					y = (y + (y2 + icon->get_componentHeight()));
HXLINE( 237)					Float _hx_tmp59 = (y + this->marginTop(label));
HXDLIN( 237)					label->set_top((_hx_tmp59 - this->marginBottom(label)));
            				}
HXLINE( 240)				label->set_left(this->getTextAlignPos(label,( (Float)(this->get_component()->get_componentWidth()) )));
HXLINE( 241)				Float _hx_tmp60 = (( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) ));
HXDLIN( 241)				int _hx_tmp61 = ::Std_obj::_hx_int((_hx_tmp60 - (( (Float)(icon->get_componentWidth()) ) / ( (Float)(2) ))));
HXDLIN( 241)				Float _hx_tmp62 = (_hx_tmp61 + this->marginLeft(icon));
HXDLIN( 241)				icon->set_left((_hx_tmp62 - this->marginRight(icon)));
            			}
            			else {
HXLINE( 242)				if (hx::IsNotNull( label )) {
HXLINE( 243)					Float _hx_tmp63 = (( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) ));
HXDLIN( 243)					int _hx_tmp64 = ::Std_obj::_hx_int((_hx_tmp63 - (( (Float)(label->get_componentWidth()) ) / ( (Float)(2) ))));
HXDLIN( 243)					Float _hx_tmp65 = (_hx_tmp64 + this->marginLeft(label));
HXDLIN( 243)					label->set_left((_hx_tmp65 - this->marginRight(label)));
HXLINE( 244)					Float _hx_tmp66 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 244)					int _hx_tmp67 = ::Std_obj::_hx_int((_hx_tmp66 - (( (Float)(label->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 244)					Float _hx_tmp68 = (_hx_tmp67 + this->marginTop(label));
HXDLIN( 244)					label->set_top((_hx_tmp68 - this->marginBottom(label)));
            				}
            				else {
HXLINE( 245)					if (hx::IsNotNull( icon )) {
HXLINE( 246)						Float _hx_tmp69 = (( (Float)(this->get_component()->get_componentWidth()) ) / ( (Float)(2) ));
HXDLIN( 246)						int _hx_tmp70 = ::Std_obj::_hx_int((_hx_tmp69 - (( (Float)(icon->get_componentWidth()) ) / ( (Float)(2) ))));
HXDLIN( 246)						Float _hx_tmp71 = (_hx_tmp70 + this->marginLeft(icon));
HXDLIN( 246)						icon->set_left((_hx_tmp71 - this->marginRight(icon)));
HXLINE( 247)						Float _hx_tmp72 = (( (Float)(this->get_component()->get_componentHeight()) ) / ( (Float)(2) ));
HXDLIN( 247)						int _hx_tmp73 = ::Std_obj::_hx_int((_hx_tmp72 - (( (Float)(icon->get_componentHeight()) ) / ( (Float)(2) ))));
HXDLIN( 247)						Float _hx_tmp74 = (_hx_tmp73 + this->marginTop(icon));
HXDLIN( 247)						icon->set_top((_hx_tmp74 - this->marginBottom(icon)));
            					}
            				}
            			}
HXLINE( 226)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
            	}


Float ButtonLayout_obj::getTextAlignPos( ::haxe::ui::components::Label label,Float usableWidth){
            	HX_STACKFRAME(&_hx_pos_49c59bbbec578e16_253_getTextAlignPos)
HXDLIN( 253)		::String _hx_switch_0 = hx::TCast<  ::haxe::ui::components::Button >::cast(this->get_component())->get_textAlign();
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 255)			Float _hx_tmp = this->marginLeft(label);
HXDLIN( 255)			return (_hx_tmp + this->get_paddingLeft());
HXDLIN( 255)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 257)			Float _hx_tmp1 = (usableWidth - ( (Float)(label->get_componentWidth()) ));
HXDLIN( 257)			Float _hx_tmp2 = (_hx_tmp1 - this->marginRight(label));
HXDLIN( 257)			return (_hx_tmp2 - this->get_paddingRight());
HXDLIN( 257)			goto _hx_goto_5;
            		}
            		/* default */{
HXLINE( 259)			int _hx_tmp3 = ::Std_obj::_hx_int(((usableWidth / ( (Float)(2) )) - (( (Float)(label->get_componentWidth()) ) / ( (Float)(2) ))));
HXDLIN( 259)			Float _hx_tmp4 = (_hx_tmp3 + this->marginLeft(label));
HXDLIN( 259)			return (_hx_tmp4 - this->marginRight(label));
            		}
            		_hx_goto_5:;
HXLINE( 253)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ButtonLayout_obj,getTextAlignPos,return )


hx::ObjectPtr< ButtonLayout_obj > ButtonLayout_obj::__new() {
	hx::ObjectPtr< ButtonLayout_obj > __this = new ButtonLayout_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ButtonLayout_obj > ButtonLayout_obj::__alloc(hx::Ctx *_hx_ctx) {
	ButtonLayout_obj *__this = (ButtonLayout_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ButtonLayout_obj), true, "haxe.ui.components.ButtonLayout"));
	*(void **)__this = ButtonLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ButtonLayout_obj::ButtonLayout_obj()
{
}

void ButtonLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ButtonLayout);
	HX_MARK_MEMBER_NAME(iconPosition,"iconPosition");
	 ::haxe::ui::layouts::Layout_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ButtonLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iconPosition,"iconPosition");
	 ::haxe::ui::layouts::Layout_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ButtonLayout_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"iconPosition") ) { return hx::Val( inCallProp == hx::paccAlways ? get_iconPosition() : iconPosition ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resizeChildren") ) { return hx::Val( resizeChildren_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextAlignPos") ) { return hx::Val( getTextAlignPos_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_iconPosition") ) { return hx::Val( get_iconPosition_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"repositionChildren") ) { return hx::Val( repositionChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ButtonLayout_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"iconPosition") ) { _hx_set_iconPosition(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ButtonLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("iconPosition",42,e5,38,76));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ButtonLayout_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(ButtonLayout_obj,iconPosition),HX_("iconPosition",42,e5,38,76)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ButtonLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String ButtonLayout_obj_sMemberFields[] = {
	HX_("iconPosition",42,e5,38,76),
	HX_("get_iconPosition",cb,d1,d7,7a),
	HX_("resizeChildren",53,43,30,c1),
	HX_("repositionChildren",bb,00,c7,9c),
	HX_("getTextAlignPos",52,5b,42,21),
	::String(null()) };

hx::Class ButtonLayout_obj::__mClass;

void ButtonLayout_obj::__register()
{
	ButtonLayout_obj _hx_dummy;
	ButtonLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components.ButtonLayout",e2,a3,79,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ButtonLayout_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ButtonLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ButtonLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ButtonLayout_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
