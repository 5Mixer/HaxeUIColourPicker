// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <hxinc/haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <hxinc/haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_components_NumberStepper
#include <hxinc/haxe/ui/components/NumberStepper.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Stepper
#include <hxinc/haxe/ui/components/Stepper.h>
#endif
#ifndef INCLUDED_haxe_ui_components_TextField
#include <hxinc/haxe/ui/components/TextField.h>
#endif
#ifndef INCLUDED_haxe_ui_components__NumberStepper_Builder
#include <hxinc/haxe/ui/components/_NumberStepper/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <hxinc/haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_VBox
#include <hxinc/haxe/ui/containers/VBox.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <hxinc/haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <hxinc/haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <hxinc/haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <hxinc/haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <hxinc/haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <hxinc/haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <hxinc/haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <hxinc/haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <hxinc/haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <hxinc/haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <hxinc/haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <hxinc/haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <hxinc/haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1db12519812ff455_111_new,"haxe.ui.components._NumberStepper.Builder","new",0x785e5aee,"haxe.ui.components._NumberStepper.Builder.new","haxe/ui/components/NumberStepper.hx",111,0xb723c67d)
HX_LOCAL_STACK_FRAME(_hx_pos_1db12519812ff455_116_create,"haxe.ui.components._NumberStepper.Builder","create",0xbb93692e,"haxe.ui.components._NumberStepper.Builder.create","haxe/ui/components/NumberStepper.hx",116,0xb723c67d)
HX_LOCAL_STACK_FRAME(_hx_pos_1db12519812ff455_131_applyStyle,"haxe.ui.components._NumberStepper.Builder","applyStyle",0x18252415,"haxe.ui.components._NumberStepper.Builder.applyStyle","haxe/ui/components/NumberStepper.hx",131,0xb723c67d)
namespace haxe{
namespace ui{
namespace components{
namespace _NumberStepper{

void Builder_obj::__construct( ::haxe::ui::components::NumberStepper stepper){
            	HX_GC_STACKFRAME(&_hx_pos_1db12519812ff455_111_new)
HXLINE( 112)		super::__construct(stepper);
HXLINE( 113)		this->_hx_set__stepper(HX_CTX, stepper);
            	}

Dynamic Builder_obj::__CreateEmpty() { return new Builder_obj; }

void *Builder_obj::_hx_vtable = 0;

Dynamic Builder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Builder_obj > _hx_result = new Builder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Builder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6fc7eb95) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6fc7eb95;
	} else {
		return inClassId==(int)0x72a0c5e2;
	}
}

void Builder_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1db12519812ff455_116_create)
HXLINE( 117)		this->_stepper->addClass(HX_("textfield",ed,b4,53,06),null(),null());
HXLINE( 119)		 ::haxe::ui::components::TextField textfield =  ::haxe::ui::components::TextField_obj::__alloc( HX_CTX );
HXLINE( 120)		textfield->addClass(HX_("stepper-textfield",71,2b,a8,b3),null(),null());
HXLINE( 121)		textfield->set_id(HX_("stepper-textfield",71,2b,a8,b3));
HXLINE( 122)		textfield->set_restrictChars(HX_("0-9\\-\\.\\,",8f,56,39,cc));
HXLINE( 123)		this->_stepper->addComponent(textfield);
HXLINE( 125)		 ::haxe::ui::components::Stepper step =  ::haxe::ui::components::Stepper_obj::__alloc( HX_CTX );
HXLINE( 126)		step->addClass(HX_("stepper-step",48,ff,e2,4c),null(),null());
HXLINE( 127)		step->set_id(HX_("stepper-step",48,ff,e2,4c));
HXLINE( 128)		this->_stepper->addComponent(step);
            	}


void Builder_obj::applyStyle( ::haxe::ui::styles::Style style){
            	HX_GC_STACKFRAME(&_hx_pos_1db12519812ff455_131_applyStyle)
HXLINE( 132)		 ::haxe::ui::components::TextField textfield = this->_stepper->findComponent(null(),hx::ClassOf< ::haxe::ui::components::TextField >(),null(),null()).StaticCast<  ::haxe::ui::components::TextField >();
HXLINE( 133)		bool _hx_tmp;
HXDLIN( 133)		if (hx::IsNotNull( textfield )) {
HXLINE( 134)			bool _hx_tmp1;
HXDLIN( 134)			bool _hx_tmp2;
HXDLIN( 134)			if (hx::IsEq( textfield->customStyle->color,style->color )) {
HXLINE( 134)				_hx_tmp2 = (textfield->customStyle->fontName != style->fontName);
            			}
            			else {
HXLINE( 134)				_hx_tmp2 = true;
            			}
HXDLIN( 134)			if (!(_hx_tmp2)) {
HXLINE( 134)				_hx_tmp1 = hx::IsNotEq( textfield->customStyle->fontSize,style->fontSize );
            			}
            			else {
HXLINE( 134)				_hx_tmp1 = true;
            			}
HXDLIN( 134)			if (!(_hx_tmp1)) {
HXLINE( 133)				_hx_tmp = (textfield->customStyle->cursor != style->cursor);
            			}
            			else {
HXLINE( 133)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 133)			_hx_tmp = false;
            		}
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 139)			textfield->customStyle->_hx_set_color(HX_CTX, style->color);
HXLINE( 140)			textfield->customStyle->_hx_set_fontName(HX_CTX, style->fontName);
HXLINE( 141)			textfield->customStyle->_hx_set_fontSize(HX_CTX, style->fontSize);
HXLINE( 142)			textfield->customStyle->_hx_set_cursor(HX_CTX, style->cursor);
HXLINE( 143)			{
HXLINE( 143)				textfield->invalidateComponent(HX_("style",31,a5,1d,84));
HXDLIN( 143)				{
            				}
            			}
            		}
            	}



hx::ObjectPtr< Builder_obj > Builder_obj::__new( ::haxe::ui::components::NumberStepper stepper) {
	hx::ObjectPtr< Builder_obj > __this = new Builder_obj();
	__this->__construct(stepper);
	return __this;
}

hx::ObjectPtr< Builder_obj > Builder_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ui::components::NumberStepper stepper) {
	Builder_obj *__this = (Builder_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Builder_obj), true, "haxe.ui.components._NumberStepper.Builder"));
	*(void **)__this = Builder_obj::_hx_vtable;
	__this->__construct(stepper);
	return __this;
}

Builder_obj::Builder_obj()
{
}

void Builder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Builder);
	HX_MARK_MEMBER_NAME(_stepper,"_stepper");
	 ::haxe::ui::core::CompositeBuilder_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Builder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_stepper,"_stepper");
	 ::haxe::ui::core::CompositeBuilder_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Builder_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_stepper") ) { return hx::Val( _stepper ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"applyStyle") ) { return hx::Val( applyStyle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Builder_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_stepper") ) { _hx_set__stepper(HX_CTX_GET,inValue.Cast<  ::haxe::ui::components::NumberStepper >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Builder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_stepper",92,5e,18,bb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Builder_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ui::components::NumberStepper */ ,(int)offsetof(Builder_obj,_stepper),HX_("_stepper",92,5e,18,bb)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Builder_obj_sStaticStorageInfo = 0;
#endif

static ::String Builder_obj_sMemberFields[] = {
	HX_("_stepper",92,5e,18,bb),
	HX_("create",fc,66,0f,7c),
	HX_("applyStyle",e3,20,6f,2f),
	::String(null()) };

hx::Class Builder_obj::__mClass;

void Builder_obj::__register()
{
	Builder_obj _hx_dummy;
	Builder_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._NumberStepper.Builder",fc,0b,c7,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Builder_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Builder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Builder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Builder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _NumberStepper
