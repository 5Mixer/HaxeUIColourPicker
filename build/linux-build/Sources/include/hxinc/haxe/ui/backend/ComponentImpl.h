// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#define INCLUDED_haxe_ui_backend_ComponentImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <hxinc/haxe/ui/backend/ComponentBase.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(haxe,ui,backend,BatchOperation)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentSurface)
HX_DECLARE_CLASS3(haxe,ui,backend,EventBase)
HX_DECLARE_CLASS3(haxe,ui,backend,EventImpl)
HX_DECLARE_CLASS3(haxe,ui,core,Component)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentBounds)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentCommon)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentContainer)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentEvents)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentLayout)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentValidation)
HX_DECLARE_CLASS3(haxe,ui,core,IClonable)
HX_DECLARE_CLASS3(haxe,ui,core,IComponentBase)
HX_DECLARE_CLASS3(haxe,ui,events,UIEvent)
HX_DECLARE_CLASS3(haxe,ui,styles,Style)
HX_DECLARE_CLASS3(haxe,ui,validation,IValidating)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES ComponentImpl_obj : public  ::haxe::ui::backend::ComponentBase_obj
{
	public:
		typedef  ::haxe::ui::backend::ComponentBase_obj super;
		typedef ComponentImpl_obj OBJ_;
		ComponentImpl_obj();

	public:
		enum { _hx_ClassId = 0x4eb0678b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.ComponentImpl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.ComponentImpl"); }
		static hx::ObjectPtr< ComponentImpl_obj > __new();
		static hx::ObjectPtr< ComponentImpl_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ComponentImpl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ComponentImpl",1d,8e,4b,2b); }

		static bool useBatching();
		static ::Dynamic useBatching_dyn();

		 ::haxe::ds::StringMap _eventMap;
		inline  ::haxe::ds::StringMap _hx_set__eventMap(hx::StackContext *_hx_ctx, ::haxe::ds::StringMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _eventMap=_hx_v; }
		int lastMouseX;
		int lastMouseY;
		Float _lastClickTime;
		Float _lastClickTimeDiff;
		int _lastClickX;
		int _lastClickY;
		 ::Dynamic _cachedScreenX;
		inline  ::Dynamic _hx_set__cachedScreenX(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _cachedScreenX=_hx_v; }
		 ::Dynamic _cachedScreenY;
		inline  ::Dynamic _hx_set__cachedScreenY(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _cachedScreenY=_hx_v; }
		 ::haxe::ui::core::Component _cachedClipComponent;
		inline  ::haxe::ui::core::Component _hx_set__cachedClipComponent(hx::StackContext *_hx_ctx, ::haxe::ui::core::Component _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _cachedClipComponent=_hx_v; }
		 ::Dynamic _cachedClipComponentNone;
		inline  ::Dynamic _hx_set__cachedClipComponentNone(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _cachedClipComponentNone=_hx_v; }
		 ::haxe::ui::core::Component _cachedRootComponent;
		inline  ::haxe::ui::core::Component _hx_set__cachedRootComponent(hx::StackContext *_hx_ctx, ::haxe::ui::core::Component _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _cachedRootComponent=_hx_v; }
		 ::Dynamic _cachedOpacity;
		inline  ::Dynamic _hx_set__cachedOpacity(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _cachedOpacity=_hx_v; }
		void clearCaches();
		::Dynamic clearCaches_dyn();

		void cacheScreenPos();
		::Dynamic cacheScreenPos_dyn();

		Float screenX;
		Float get_screenX();
		::Dynamic get_screenX_dyn();

		Float screenY;
		Float get_screenY();
		::Dynamic get_screenY_dyn();

		 ::haxe::ui::core::Component findRootComponent();
		::Dynamic findRootComponent_dyn();

		bool isRootComponent();
		::Dynamic isRootComponent_dyn();

		 ::haxe::ui::core::Component findClipComponent();
		::Dynamic findClipComponent_dyn();

		bool inBounds(int x,int y);
		::Dynamic inBounds_dyn();

		Float calcOpacity();
		::Dynamic calcOpacity_dyn();

		bool isOffscreen();
		::Dynamic isOffscreen_dyn();

		::Array< ::Dynamic> _batchStyleOperations;
		inline ::Array< ::Dynamic> _hx_set__batchStyleOperations(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _batchStyleOperations=_hx_v; }
		::Array< ::Dynamic> _batchImageOperations;
		inline ::Array< ::Dynamic> _hx_set__batchImageOperations(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _batchImageOperations=_hx_v; }
		::Array< ::Dynamic> _batchTextOperations;
		inline ::Array< ::Dynamic> _hx_set__batchTextOperations(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _batchTextOperations=_hx_v; }
		void clearBatchOperations();
		::Dynamic clearBatchOperations_dyn();

		void addBatchStyleOperation( ::haxe::ui::backend::BatchOperation op);
		::Dynamic addBatchStyleOperation_dyn();

		void addBatchImageOperation( ::haxe::ui::backend::BatchOperation op);
		::Dynamic addBatchImageOperation_dyn();

		void addBatchTextOperation( ::haxe::ui::backend::BatchOperation op);
		::Dynamic addBatchTextOperation_dyn();

		void renderTo( ::kha::graphics2::Graphics g);
		::Dynamic renderTo_dyn();

		void renderToBatch( ::kha::graphics2::Graphics g);
		::Dynamic renderToBatch_dyn();

		void renderToBatchOperations( ::kha::graphics2::Graphics g,::Array< ::Dynamic> operations);
		::Dynamic renderToBatchOperations_dyn();

		void renderStyleTo( ::kha::graphics2::Graphics g, ::haxe::ui::backend::ComponentImpl c);
		::Dynamic renderStyleTo_dyn();

		void renderImageTo( ::kha::graphics2::Graphics g, ::haxe::ui::backend::ComponentImpl c);
		::Dynamic renderImageTo_dyn();

		void renderTextTo( ::kha::graphics2::Graphics g, ::haxe::ui::backend::ComponentImpl c);
		::Dynamic renderTextTo_dyn();

		 ::kha::Image _componentBuffer;
		inline  ::kha::Image _hx_set__componentBuffer(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _componentBuffer=_hx_v; }
		void renderToScaled( ::kha::graphics2::Graphics g,Float scaleX,Float scaleY);
		::Dynamic renderToScaled_dyn();

		void handleSize( ::Dynamic width, ::Dynamic height, ::haxe::ui::styles::Style style);

		void handleVisibility(bool show);

		void mapEvent(::String type, ::Dynamic listener);

		void onTextInputChanged(::String s);
		::Dynamic onTextInputChanged_dyn();

		void unmapEvent(::String type, ::Dynamic listener);

		bool _mouseOverFlag;
		void _hx___onMouseMove(int x,int y,int movementX,int movementY);
		::Dynamic _hx___onMouseMove_dyn();

		bool _mouseDownFlag;
		void _hx___onMouseDown(int button,int x,int y);
		::Dynamic _hx___onMouseDown_dyn();

		void _hx___onMouseUp(int button,int x,int y);
		::Dynamic _hx___onMouseUp_dyn();

		void _hx___onDoubleClick(int button,int x,int y);
		::Dynamic _hx___onDoubleClick_dyn();

		void _hx___onMouseWheel(int delta);
		::Dynamic _hx___onMouseWheel_dyn();

		void _hx___onKeyDown(int key);
		::Dynamic _hx___onKeyDown_dyn();

		void _hx___onKeyUp(int key);
		::Dynamic _hx___onKeyUp_dyn();

		bool hasComponentOver( ::haxe::ui::core::Component ref,int x,int y);
		::Dynamic hasComponentOver_dyn();

		::Array< ::Dynamic> getComponentsAtPoint(int x,int y);
		::Dynamic getComponentsAtPoint_dyn();

		void findChildrenAtPoint( ::haxe::ui::core::Component child,int x,int y,::Array< ::Dynamic> array);
		::Dynamic findChildrenAtPoint_dyn();

		bool hasChildRecursive( ::haxe::ui::core::Component parent, ::haxe::ui::core::Component child);
		::Dynamic hasChildRecursive_dyn();

		virtual void registerBehaviours();

		virtual  ::haxe::ui::core::ComponentContainer cloneComponent();

		virtual  ::haxe::ui::core::ComponentContainer self();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_ComponentImpl */ 
