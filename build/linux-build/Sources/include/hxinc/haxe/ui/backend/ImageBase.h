// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_ImageBase
#define INCLUDED_haxe_ui_backend_ImageBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_backend_ImageSurface
#include <hxinc/haxe/ui/backend/ImageSurface.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_592e86525b53325d_8_new)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentSurface)
HX_DECLARE_CLASS3(haxe,ui,backend,ImageBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ImageSurface)
HX_DECLARE_CLASS3(haxe,ui,core,Component)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentBounds)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentCommon)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentContainer)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentEvents)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentLayout)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentValidation)
HX_DECLARE_CLASS3(haxe,ui,core,IClonable)
HX_DECLARE_CLASS3(haxe,ui,core,IComponentBase)
HX_DECLARE_CLASS3(haxe,ui,geom,Rectangle)
HX_DECLARE_CLASS3(haxe,ui,validation,IValidating)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES ImageBase_obj : public  ::haxe::ui::backend::ImageSurface_obj
{
	public:
		typedef  ::haxe::ui::backend::ImageSurface_obj super;
		typedef ImageBase_obj OBJ_;
		ImageBase_obj();

	public:
		enum { _hx_ClassId = 0x2f4158f6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.ImageBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.ImageBase"); }

		inline static hx::ObjectPtr< ImageBase_obj > __new() {
			hx::ObjectPtr< ImageBase_obj > __this = new ImageBase_obj();
			__this->__construct();
			return __this;
		}

		inline static hx::ObjectPtr< ImageBase_obj > __alloc(hx::Ctx *_hx_ctx) {
			ImageBase_obj *__this = (ImageBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImageBase_obj), true, "haxe.ui.backend.ImageBase"));
			*(void **)__this = ImageBase_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_592e86525b53325d_8_new)
HXLINE(  15)		( ( ::haxe::ui::backend::ImageBase)(__this) )->_imageHeight = ((Float)0);
HXLINE(  14)		( ( ::haxe::ui::backend::ImageBase)(__this) )->_imageWidth = ((Float)0);
HXLINE(  13)		( ( ::haxe::ui::backend::ImageBase)(__this) )->_top = ((Float)0);
HXLINE(  12)		( ( ::haxe::ui::backend::ImageBase)(__this) )->_left = ((Float)0);
HXLINE(  10)		( ( ::haxe::ui::backend::ImageBase)(__this) )->aspectRatio = ((Float)1);
HXLINE(   8)		__this->super::__construct();
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ImageBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageBase",ec,5c,18,c5); }

		 ::haxe::ui::core::Component parentComponent;
		inline  ::haxe::ui::core::Component _hx_set_parentComponent(hx::StackContext *_hx_ctx, ::haxe::ui::core::Component _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return parentComponent=_hx_v; }
		Float aspectRatio;
		Float _left;
		Float _top;
		Float _imageWidth;
		Float _imageHeight;
		 ::Dynamic _imageInfo;
		inline  ::Dynamic _hx_set__imageInfo(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _imageInfo=_hx_v; }
		 ::haxe::ui::geom::Rectangle _imageClipRect;
		inline  ::haxe::ui::geom::Rectangle _hx_set__imageClipRect(hx::StackContext *_hx_ctx, ::haxe::ui::geom::Rectangle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _imageClipRect=_hx_v; }
		void dispose();
		::Dynamic dispose_dyn();

		virtual void validateData();
		::Dynamic validateData_dyn();

		void validatePosition();
		::Dynamic validatePosition_dyn();

		void validateDisplay();
		::Dynamic validateDisplay_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_ImageBase */ 
