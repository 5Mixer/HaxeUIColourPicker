// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_kha_TextField
#define INCLUDED_haxe_ui_backend_kha_TextField

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(haxe,ui,backend,kha,TextField)
HX_DECLARE_CLASS1(kha,Kravur)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace haxe{
namespace ui{
namespace backend{
namespace kha{


class HXCPP_CLASS_ATTRIBUTES TextField_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TextField_obj OBJ_;
		TextField_obj();

	public:
		enum { _hx_ClassId = 0x2e99b0e3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.kha.TextField")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.kha.TextField"); }
		static hx::ObjectPtr< TextField_obj > __new();
		static hx::ObjectPtr< TextField_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextField_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextField",ad,04,54,3b); }

		static void __boot();
		static int SPACE;
		static int CR;
		static int LF;
		static  ::haxe::ui::backend::kha::TextField _currentFocus;
		static int REPEAT_TIMER_GROUP;
		 ::Dynamic _selectionInfo;
		inline  ::Dynamic _hx_set__selectionInfo(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _selectionInfo=_hx_v; }
		 ::Dynamic _caretInfo;
		inline  ::Dynamic _hx_set__caretInfo(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _caretInfo=_hx_v; }
		Float left;
		Float top;
		bool editable;
		int textColor;
		int backgroundColor;
		int selectedTextColor;
		int selectedBackgroundColor;
		int scrollTop;
		Float scrollLeft;
		::Array< ::Dynamic> _textChanged;
		inline ::Array< ::Dynamic> _hx_set__textChanged(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _textChanged=_hx_v; }
		::Array< ::Dynamic> _caretMoved;
		inline ::Array< ::Dynamic> _hx_set__caretMoved(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _caretMoved=_hx_v; }
		void notify( ::Dynamic textChanged, ::Dynamic caretMoved);
		::Dynamic notify_dyn();

		void notifyTextChanged();
		::Dynamic notifyTextChanged_dyn();

		void notifyCaretMoved();
		::Dynamic notifyCaretMoved_dyn();

		::Array< ::Dynamic> _lines;
		inline ::Array< ::Dynamic> _hx_set__lines(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _lines=_hx_v; }
		::String _text;
		inline ::String _hx_set__text(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return _text=_hx_v; }
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		Float _width;
		Float get_width();
		::Dynamic get_width_dyn();

		Float set_width(Float value);
		::Dynamic set_width_dyn();

		Float _height;
		Float get_height();
		::Dynamic get_height_dyn();

		Float set_height(Float value);
		::Dynamic set_height_dyn();

		bool _password;
		bool get_password();
		::Dynamic get_password_dyn();

		bool set_password(bool value);
		::Dynamic set_password_dyn();

		 ::kha::Kravur _font;
		inline  ::kha::Kravur _hx_set__font(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _font=_hx_v; }
		 ::kha::Kravur get_font();
		::Dynamic get_font_dyn();

		 ::kha::Kravur set_font( ::kha::Kravur value);
		::Dynamic set_font_dyn();

		int _fontSize;
		int get_fontSize();
		::Dynamic get_fontSize_dyn();

		int set_fontSize(int value);
		::Dynamic set_fontSize_dyn();

		bool _multiline;
		bool get_multiline();
		::Dynamic get_multiline_dyn();

		bool set_multiline(bool value);
		::Dynamic set_multiline_dyn();

		bool _wordWrap;
		bool get_wordWrap();
		::Dynamic get_wordWrap_dyn();

		bool set_wordWrap(bool value);
		::Dynamic set_wordWrap_dyn();

		bool _autoHeight;
		bool get_autoHeight();
		::Dynamic get_autoHeight_dyn();

		bool set_autoHeight(bool value);
		::Dynamic set_autoHeight_dyn();

		int maxVisibleLines;
		int get_maxVisibleLines();
		::Dynamic get_maxVisibleLines_dyn();

		int numLines;
		int get_numLines();
		::Dynamic get_numLines_dyn();

		void resetSelection();
		::Dynamic resetSelection_dyn();

		bool hasSelection;
		bool get_hasSelection();
		::Dynamic get_hasSelection_dyn();

		int selectionStart;
		int get_selectionStart();
		::Dynamic get_selectionStart_dyn();

		int selectionEnd;
		int get_selectionEnd();
		::Dynamic get_selectionEnd_dyn();

		int get_caretPosition();
		::Dynamic get_caretPosition_dyn();

		int set_caretPosition(int value);
		::Dynamic set_caretPosition_dyn();

		bool isActive;
		bool get_isActive();
		::Dynamic get_isActive_dyn();

		void recalc();
		::Dynamic recalc_dyn();

		bool inBounds(Float x,Float y);
		::Dynamic inBounds_dyn();

		Float requiredWidth;
		Float get_requiredWidth();
		::Dynamic get_requiredWidth_dyn();

		Float requiredHeight;
		Float get_requiredHeight();
		::Dynamic get_requiredHeight_dyn();

		void moveCaretRight();
		::Dynamic moveCaretRight_dyn();

		void moveCaretLeft();
		::Dynamic moveCaretLeft_dyn();

		void handleNegativeSelection();
		::Dynamic handleNegativeSelection_dyn();

		void handlePositiveSelection();
		::Dynamic handlePositiveSelection_dyn();

		void performKeyOperation(int code);
		::Dynamic performKeyOperation_dyn();

		void insertText(::String s);
		::Dynamic insertText_dyn();

		Float caretLeft;
		Float get_caretLeft();
		::Dynamic get_caretLeft_dyn();

		Float caretTop;
		Float get_caretTop();
		::Dynamic get_caretTop_dyn();

		Float caretWidth;
		Float get_caretWidth();
		::Dynamic get_caretWidth_dyn();

		Float caretHeight;
		Float get_caretHeight();
		::Dynamic get_caretHeight_dyn();

		int _repeatTimerId;
		int _downKey;
		bool _shift;
		bool _ctrl;
		::String onCut();
		::Dynamic onCut_dyn();

		::String onCopy();
		::Dynamic onCopy_dyn();

		void onPaste(::String text);
		::Dynamic onPaste_dyn();

		void onKeyDown(int code);
		::Dynamic onKeyDown_dyn();

		void onKeyRepeat();
		::Dynamic onKeyRepeat_dyn();

		void onKeyPress(::String character);
		::Dynamic onKeyPress_dyn();

		void onKeyUp(int code);
		::Dynamic onKeyUp_dyn();

		void onMouseDown(int button,int x,int y);
		::Dynamic onMouseDown_dyn();

		void focus();
		::Dynamic focus_dyn();

		void onFocus();
		::Dynamic onFocus_dyn();

		void blur();
		::Dynamic blur_dyn();

		void onBlur();
		::Dynamic onBlur_dyn();

		void splitLines();
		::Dynamic splitLines_dyn();

		void deleteCharsFromCaret(hx::Null< int >  count,hx::Null< bool >  moveCaret);
		::Dynamic deleteCharsFromCaret_dyn();

		void deleteChars(int count, ::Dynamic from,hx::Null< bool >  moveCaret);
		::Dynamic deleteChars_dyn();

		int posToIndex( ::Dynamic pos);
		::Dynamic posToIndex_dyn();

		 ::Dynamic indexToPos(int index);
		::Dynamic indexToPos_dyn();

		void scrollToCaret();
		::Dynamic scrollToCaret_dyn();

		void ensureRowVisible(int row);
		::Dynamic ensureRowVisible_dyn();

		int findClosestColumn( ::Dynamic origin,int offset);
		::Dynamic findClosestColumn_dyn();

		void render( ::kha::graphics2::Graphics g);
		::Dynamic render_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend
} // end namespace kha

#endif /* INCLUDED_haxe_ui_backend_kha_TextField */ 
