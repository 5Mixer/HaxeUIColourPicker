// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_AppImpl
#define INCLUDED_haxe_ui_backend_AppImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_backend_AppBase
#include <hxinc/haxe/ui/backend/AppBase.h>
#endif
HX_DECLARE_CLASS3(haxe,ui,backend,AppBase)
HX_DECLARE_CLASS3(haxe,ui,backend,AppImpl)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)
HX_DECLARE_CLASS1(kha,Window)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES AppImpl_obj : public  ::haxe::ui::backend::AppBase_obj
{
	public:
		typedef  ::haxe::ui::backend::AppBase_obj super;
		typedef AppImpl_obj OBJ_;
		AppImpl_obj();

	public:
		enum { _hx_ClassId = 0x681b4c27 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.AppImpl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.AppImpl"); }
		static hx::ObjectPtr< AppImpl_obj > __new();
		static hx::ObjectPtr< AppImpl_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AppImpl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AppImpl",01,34,60,04); }

		 ::Dynamic _callback;
		inline  ::Dynamic _hx_set__callback(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _callback=_hx_v; }
		Dynamic _callback_dyn() { return _callback;}
		int _backgroudColor;
		virtual void init( ::Dynamic callback, ::Dynamic onEnd);

		void initialized( ::kha::Window _);
		::Dynamic initialized_dyn();

		void assetsLoaded();
		::Dynamic assetsLoaded_dyn();

		void render(::Array< ::Dynamic> framebuffers);
		::Dynamic render_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_AppImpl */ 
