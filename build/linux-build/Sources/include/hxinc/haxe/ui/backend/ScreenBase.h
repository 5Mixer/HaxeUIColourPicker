// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_ScreenBase
#define INCLUDED_haxe_ui_backend_ScreenBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(haxe,ui,backend,ComponentBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentSurface)
HX_DECLARE_CLASS3(haxe,ui,backend,EventBase)
HX_DECLARE_CLASS3(haxe,ui,backend,EventImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ScreenBase)
HX_DECLARE_CLASS3(haxe,ui,core,Component)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentBounds)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentCommon)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentContainer)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentEvents)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentLayout)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentValidation)
HX_DECLARE_CLASS3(haxe,ui,core,IClonable)
HX_DECLARE_CLASS3(haxe,ui,core,IComponentBase)
HX_DECLARE_CLASS3(haxe,ui,events,UIEvent)
HX_DECLARE_CLASS3(haxe,ui,validation,IValidating)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES ScreenBase_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ScreenBase_obj OBJ_;
		ScreenBase_obj();

	public:
		enum { _hx_ClassId = 0x095a7d57 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.ScreenBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.ScreenBase"); }
		static hx::ObjectPtr< ScreenBase_obj > __new();
		static hx::ObjectPtr< ScreenBase_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ScreenBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScreenBase",bd,79,f8,af); }

		::Array< ::Dynamic> _topLevelComponents;
		inline ::Array< ::Dynamic> _hx_set__topLevelComponents(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _topLevelComponents=_hx_v; }
		 ::haxe::ui::core::Component _focus;
		inline  ::haxe::ui::core::Component _hx_set__focus(hx::StackContext *_hx_ctx, ::haxe::ui::core::Component _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _focus=_hx_v; }
		 ::haxe::ui::core::Component get_focus();
		::Dynamic get_focus_dyn();

		 ::haxe::ui::core::Component set_focus( ::haxe::ui::core::Component value);
		::Dynamic set_focus_dyn();

		 ::Dynamic _options;
		inline  ::Dynamic _hx_set__options(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _options=_hx_v; }
		 ::Dynamic get_options();
		::Dynamic get_options_dyn();

		 ::Dynamic set_options( ::Dynamic value);
		::Dynamic set_options_dyn();

		Float dpi;
		virtual Float get_dpi();
		::Dynamic get_dpi_dyn();

		virtual ::String get_title();
		::Dynamic get_title_dyn();

		virtual ::String set_title(::String s);
		::Dynamic set_title_dyn();

		Float width;
		virtual Float get_width();
		::Dynamic get_width_dyn();

		Float height;
		virtual Float get_height();
		::Dynamic get_height_dyn();

		bool isRetina;
		bool get_isRetina();
		::Dynamic get_isRetina_dyn();

		virtual  ::haxe::ui::core::Component addComponent( ::haxe::ui::core::Component component);
		::Dynamic addComponent_dyn();

		virtual  ::haxe::ui::core::Component removeComponent( ::haxe::ui::core::Component component);
		::Dynamic removeComponent_dyn();

		void handleSetComponentIndex( ::haxe::ui::core::Component child,int index);
		::Dynamic handleSetComponentIndex_dyn();

		void resizeComponent( ::haxe::ui::core::Component c);
		::Dynamic resizeComponent_dyn();

		virtual bool supportsEvent(::String type);
		::Dynamic supportsEvent_dyn();

		virtual void mapEvent(::String type, ::Dynamic listener);
		::Dynamic mapEvent_dyn();

		virtual void unmapEvent(::String type, ::Dynamic listener);
		::Dynamic unmapEvent_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_ScreenBase */ 
