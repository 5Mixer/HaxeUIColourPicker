// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_MessageBoxBase
#define INCLUDED_haxe_ui_backend_MessageBoxBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_containers_dialogs_Dialog
#include <hxinc/haxe/ui/containers/dialogs/Dialog.h>
#endif
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentSurface)
HX_DECLARE_CLASS3(haxe,ui,backend,DialogBase)
HX_DECLARE_CLASS3(haxe,ui,backend,MessageBoxBase)
HX_DECLARE_CLASS3(haxe,ui,components,Image)
HX_DECLARE_CLASS3(haxe,ui,components,Label)
HX_DECLARE_CLASS3(haxe,ui,containers,Box)
HX_DECLARE_CLASS4(haxe,ui,containers,dialogs,Dialog)
HX_DECLARE_CLASS3(haxe,ui,core,Component)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentBounds)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentCommon)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentContainer)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentEvents)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentLayout)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentValidation)
HX_DECLARE_CLASS3(haxe,ui,core,IClonable)
HX_DECLARE_CLASS3(haxe,ui,core,IComponentBase)
HX_DECLARE_CLASS3(haxe,ui,validation,IValidating)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES MessageBoxBase_obj : public  ::haxe::ui::containers::dialogs::Dialog_obj
{
	public:
		typedef  ::haxe::ui::containers::dialogs::Dialog_obj super;
		typedef MessageBoxBase_obj OBJ_;
		MessageBoxBase_obj();

	public:
		enum { _hx_ClassId = 0x20bcbec3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.MessageBoxBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.MessageBoxBase"); }
		static hx::ObjectPtr< MessageBoxBase_obj > __new();
		static hx::ObjectPtr< MessageBoxBase_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MessageBoxBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MessageBoxBase",d5,10,61,2a); }

		 ::haxe::ui::components::Image iconImage;
		inline  ::haxe::ui::components::Image _hx_set_iconImage(hx::StackContext *_hx_ctx, ::haxe::ui::components::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return iconImage=_hx_v; }
		 ::haxe::ui::components::Label messageLabel;
		inline  ::haxe::ui::components::Label _hx_set_messageLabel(hx::StackContext *_hx_ctx, ::haxe::ui::components::Label _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return messageLabel=_hx_v; }
		::String get_message();
		::Dynamic get_message_dyn();

		::String set_message(::String value);
		::Dynamic set_message_dyn();

		::String _type;
		inline ::String _hx_set__type(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return _type=_hx_v; }
		::String get_type();
		::Dynamic get_type_dyn();

		::String set_type(::String value);
		::Dynamic set_type_dyn();

		virtual void registerBehaviours();

		virtual  ::haxe::ui::core::ComponentContainer cloneComponent();

		virtual  ::haxe::ui::core::ComponentContainer self();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_MessageBoxBase */ 
