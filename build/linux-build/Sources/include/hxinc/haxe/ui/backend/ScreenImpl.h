// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_ScreenImpl
#define INCLUDED_haxe_ui_backend_ScreenImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_backend_ScreenBase
#include <hxinc/haxe/ui/backend/ScreenBase.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentSurface)
HX_DECLARE_CLASS3(haxe,ui,backend,EventBase)
HX_DECLARE_CLASS3(haxe,ui,backend,EventImpl)
HX_DECLARE_CLASS3(haxe,ui,backend,ScreenBase)
HX_DECLARE_CLASS3(haxe,ui,backend,ScreenImpl)
HX_DECLARE_CLASS3(haxe,ui,core,Component)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentBounds)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentCommon)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentContainer)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentEvents)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentLayout)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentValidation)
HX_DECLARE_CLASS3(haxe,ui,core,IClonable)
HX_DECLARE_CLASS3(haxe,ui,core,IComponentBase)
HX_DECLARE_CLASS3(haxe,ui,events,UIEvent)
HX_DECLARE_CLASS3(haxe,ui,validation,IValidating)
HX_DECLARE_CLASS1(kha,Kravur)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES ScreenImpl_obj : public  ::haxe::ui::backend::ScreenBase_obj
{
	public:
		typedef  ::haxe::ui::backend::ScreenBase_obj super;
		typedef ScreenImpl_obj OBJ_;
		ScreenImpl_obj();

	public:
		enum { _hx_ClassId = 0x0e041426 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.ScreenImpl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.ScreenImpl"); }
		static hx::ObjectPtr< ScreenImpl_obj > __new();
		static hx::ObjectPtr< ScreenImpl_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ScreenImpl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScreenImpl",8c,10,a2,b4); }

		 ::haxe::ds::StringMap _mapping;
		inline  ::haxe::ds::StringMap _hx_set__mapping(hx::StackContext *_hx_ctx, ::haxe::ds::StringMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _mapping=_hx_v; }
		Float get_width();

		Float get_height();

		Float get_dpi();

		::String get_title();

		::String set_title(::String s);

		virtual  ::haxe::ui::core::Component addComponent( ::haxe::ui::core::Component component);

		virtual  ::haxe::ui::core::Component removeComponent( ::haxe::ui::core::Component component);

		void renderTo( ::kha::graphics2::Graphics g);
		::Dynamic renderTo_dyn();

		Float _deltaTime;
		Float _lastTime;
		Float fps;
		 ::kha::Kravur _fpsFont;
		inline  ::kha::Kravur _hx_set__fpsFont(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _fpsFont=_hx_v; }
		Float _fpsLowest;
		Float _fpsHigest;
		Float _fpsCountdown;
		void updateFPS( ::kha::graphics2::Graphics g);
		::Dynamic updateFPS_dyn();

		bool _hasListener;
		void addResizeListener();
		::Dynamic addResizeListener_dyn();

		bool supportsEvent(::String type);

		void mapEvent(::String type, ::Dynamic listener);

		void unmapEvent(::String type, ::Dynamic listener);

		void _hx___onMouseMove(int x,int y,int movementX,int movementY);
		::Dynamic _hx___onMouseMove_dyn();

		void _hx___onMouseDown(int button,int x,int y);
		::Dynamic _hx___onMouseDown_dyn();

		void _hx___onMouseUp(int button,int x,int y);
		::Dynamic _hx___onMouseUp_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_ScreenImpl */ 
