// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_backend_TextInputImpl
#define INCLUDED_haxe_ui_backend_TextInputImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_backend_TextBase
#include <hxinc/haxe/ui/backend/TextBase.h>
#endif
HX_DECLARE_CLASS3(haxe,ui,backend,TextBase)
HX_DECLARE_CLASS3(haxe,ui,backend,TextInputImpl)
HX_DECLARE_CLASS4(haxe,ui,backend,kha,TextField)
HX_DECLARE_CLASS1(kha,Kravur)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace haxe{
namespace ui{
namespace backend{


class HXCPP_CLASS_ATTRIBUTES TextInputImpl_obj : public  ::haxe::ui::backend::TextBase_obj
{
	public:
		typedef  ::haxe::ui::backend::TextBase_obj super;
		typedef TextInputImpl_obj OBJ_;
		TextInputImpl_obj();

	public:
		enum { _hx_ClassId = 0x66c0ea87 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.backend.TextInputImpl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.backend.TextInputImpl"); }
		static hx::ObjectPtr< TextInputImpl_obj > __new();
		static hx::ObjectPtr< TextInputImpl_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextInputImpl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextInputImpl",7d,21,68,0c); }

		 ::haxe::ui::backend::kha::TextField _tf;
		inline  ::haxe::ui::backend::kha::TextField _hx_set__tf(hx::StackContext *_hx_ctx, ::haxe::ui::backend::kha::TextField _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _tf=_hx_v; }
		 ::kha::Kravur _font;
		inline  ::kha::Kravur _hx_set__font(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _font=_hx_v; }
		::String _textAlign;
		inline ::String _hx_set__textAlign(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return _textAlign=_hx_v; }
		Float _fontSize;
		::String _fontName;
		inline ::String _hx_set__fontName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return _fontName=_hx_v; }
		int _color;
		virtual void focus();

		virtual void blur();

		void onTextChanged(::String text);
		::Dynamic onTextChanged_dyn();

		void onCaretMoved( ::Dynamic pos);
		::Dynamic onCaretMoved_dyn();

		void validateData();

		bool validateStyle();

		void validateDisplay();

		void renderTo( ::kha::graphics2::Graphics g,Float x,Float y);
		::Dynamic renderTo_dyn();

		void measureText();

		::String normalizeText(::String text);
		::Dynamic normalizeText_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace backend

#endif /* INCLUDED_haxe_ui_backend_TextInputImpl */ 
