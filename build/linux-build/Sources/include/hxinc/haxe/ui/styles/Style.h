// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_styles_Style
#define INCLUDED_haxe_ui_styles_Style

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(haxe,ui,filters,Filter)
HX_DECLARE_CLASS3(haxe,ui,styles,Style)
HX_DECLARE_CLASS4(haxe,ui,styles,animation,AnimationOptions)

namespace haxe{
namespace ui{
namespace styles{


class HXCPP_CLASS_ATTRIBUTES Style_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Style_obj OBJ_;
		Style_obj();

	public:
		enum { _hx_ClassId = 0x23ee4ab5 };

		void __construct( ::Dynamic left, ::Dynamic top, ::Dynamic autoWidth, ::Dynamic width, ::Dynamic percentWidth, ::Dynamic initialWidth, ::Dynamic initialPercentWidth, ::Dynamic minWidth, ::Dynamic maxWidth, ::Dynamic autoHeight, ::Dynamic height, ::Dynamic percentHeight, ::Dynamic initialHeight, ::Dynamic initialPercentHeight, ::Dynamic minHeight, ::Dynamic maxHeight, ::Dynamic paddingTop, ::Dynamic paddingLeft, ::Dynamic paddingRight, ::Dynamic paddingBottom, ::Dynamic marginTop, ::Dynamic marginLeft, ::Dynamic marginRight, ::Dynamic marginBottom, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic backgroundColorEnd,::String backgroundGradientStyle, ::Dynamic backgroundOpacity,::String backgroundImage,::String backgroundImageRepeat, ::Dynamic backgroundImageClipTop, ::Dynamic backgroundImageClipLeft, ::Dynamic backgroundImageClipBottom, ::Dynamic backgroundImageClipRight, ::Dynamic backgroundImageSliceTop, ::Dynamic backgroundImageSliceLeft, ::Dynamic backgroundImageSliceBottom, ::Dynamic backgroundImageSliceRight, ::Dynamic borderColor, ::Dynamic borderTopColor, ::Dynamic borderLeftColor, ::Dynamic borderBottomColor, ::Dynamic borderRightColor, ::Dynamic borderSize, ::Dynamic borderTopSize, ::Dynamic borderLeftSize, ::Dynamic borderBottomSize, ::Dynamic borderRightSize, ::Dynamic borderRadius, ::Dynamic borderOpacity,::String borderStyle,::String icon,::String iconPosition,::String horizontalAlign,::String verticalAlign,::String textAlign, ::Dynamic opacity, ::Dynamic clip, ::Dynamic native,::String fontName, ::Dynamic fontSize, ::Dynamic fontBold, ::Dynamic fontUnderline, ::Dynamic fontItalic,::String cursor, ::Dynamic hidden,::Array< ::Dynamic> filter,::String resource,::String animationName, ::haxe::ui::styles::animation::AnimationOptions animationOptions,::String mode,::String pointerEvents);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.styles.Style")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.styles.Style"); }
		static hx::ObjectPtr< Style_obj > __new( ::Dynamic left, ::Dynamic top, ::Dynamic autoWidth, ::Dynamic width, ::Dynamic percentWidth, ::Dynamic initialWidth, ::Dynamic initialPercentWidth, ::Dynamic minWidth, ::Dynamic maxWidth, ::Dynamic autoHeight, ::Dynamic height, ::Dynamic percentHeight, ::Dynamic initialHeight, ::Dynamic initialPercentHeight, ::Dynamic minHeight, ::Dynamic maxHeight, ::Dynamic paddingTop, ::Dynamic paddingLeft, ::Dynamic paddingRight, ::Dynamic paddingBottom, ::Dynamic marginTop, ::Dynamic marginLeft, ::Dynamic marginRight, ::Dynamic marginBottom, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic backgroundColorEnd,::String backgroundGradientStyle, ::Dynamic backgroundOpacity,::String backgroundImage,::String backgroundImageRepeat, ::Dynamic backgroundImageClipTop, ::Dynamic backgroundImageClipLeft, ::Dynamic backgroundImageClipBottom, ::Dynamic backgroundImageClipRight, ::Dynamic backgroundImageSliceTop, ::Dynamic backgroundImageSliceLeft, ::Dynamic backgroundImageSliceBottom, ::Dynamic backgroundImageSliceRight, ::Dynamic borderColor, ::Dynamic borderTopColor, ::Dynamic borderLeftColor, ::Dynamic borderBottomColor, ::Dynamic borderRightColor, ::Dynamic borderSize, ::Dynamic borderTopSize, ::Dynamic borderLeftSize, ::Dynamic borderBottomSize, ::Dynamic borderRightSize, ::Dynamic borderRadius, ::Dynamic borderOpacity,::String borderStyle,::String icon,::String iconPosition,::String horizontalAlign,::String verticalAlign,::String textAlign, ::Dynamic opacity, ::Dynamic clip, ::Dynamic native,::String fontName, ::Dynamic fontSize, ::Dynamic fontBold, ::Dynamic fontUnderline, ::Dynamic fontItalic,::String cursor, ::Dynamic hidden,::Array< ::Dynamic> filter,::String resource,::String animationName, ::haxe::ui::styles::animation::AnimationOptions animationOptions,::String mode,::String pointerEvents);
		static hx::ObjectPtr< Style_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic left, ::Dynamic top, ::Dynamic autoWidth, ::Dynamic width, ::Dynamic percentWidth, ::Dynamic initialWidth, ::Dynamic initialPercentWidth, ::Dynamic minWidth, ::Dynamic maxWidth, ::Dynamic autoHeight, ::Dynamic height, ::Dynamic percentHeight, ::Dynamic initialHeight, ::Dynamic initialPercentHeight, ::Dynamic minHeight, ::Dynamic maxHeight, ::Dynamic paddingTop, ::Dynamic paddingLeft, ::Dynamic paddingRight, ::Dynamic paddingBottom, ::Dynamic marginTop, ::Dynamic marginLeft, ::Dynamic marginRight, ::Dynamic marginBottom, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic backgroundColorEnd,::String backgroundGradientStyle, ::Dynamic backgroundOpacity,::String backgroundImage,::String backgroundImageRepeat, ::Dynamic backgroundImageClipTop, ::Dynamic backgroundImageClipLeft, ::Dynamic backgroundImageClipBottom, ::Dynamic backgroundImageClipRight, ::Dynamic backgroundImageSliceTop, ::Dynamic backgroundImageSliceLeft, ::Dynamic backgroundImageSliceBottom, ::Dynamic backgroundImageSliceRight, ::Dynamic borderColor, ::Dynamic borderTopColor, ::Dynamic borderLeftColor, ::Dynamic borderBottomColor, ::Dynamic borderRightColor, ::Dynamic borderSize, ::Dynamic borderTopSize, ::Dynamic borderLeftSize, ::Dynamic borderBottomSize, ::Dynamic borderRightSize, ::Dynamic borderRadius, ::Dynamic borderOpacity,::String borderStyle,::String icon,::String iconPosition,::String horizontalAlign,::String verticalAlign,::String textAlign, ::Dynamic opacity, ::Dynamic clip, ::Dynamic native,::String fontName, ::Dynamic fontSize, ::Dynamic fontBold, ::Dynamic fontUnderline, ::Dynamic fontItalic,::String cursor, ::Dynamic hidden,::Array< ::Dynamic> filter,::String resource,::String animationName, ::haxe::ui::styles::animation::AnimationOptions animationOptions,::String mode,::String pointerEvents);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Style_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Style",11,15,4b,17); }

		 ::Dynamic left;
		inline  ::Dynamic _hx_set_left(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return left=_hx_v; }
		 ::Dynamic top;
		inline  ::Dynamic _hx_set_top(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return top=_hx_v; }
		 ::Dynamic autoWidth;
		inline  ::Dynamic _hx_set_autoWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return autoWidth=_hx_v; }
		 ::Dynamic width;
		inline  ::Dynamic _hx_set_width(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return width=_hx_v; }
		 ::Dynamic percentWidth;
		inline  ::Dynamic _hx_set_percentWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return percentWidth=_hx_v; }
		 ::Dynamic initialWidth;
		inline  ::Dynamic _hx_set_initialWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return initialWidth=_hx_v; }
		 ::Dynamic initialPercentWidth;
		inline  ::Dynamic _hx_set_initialPercentWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return initialPercentWidth=_hx_v; }
		 ::Dynamic minWidth;
		inline  ::Dynamic _hx_set_minWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return minWidth=_hx_v; }
		 ::Dynamic maxWidth;
		inline  ::Dynamic _hx_set_maxWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return maxWidth=_hx_v; }
		 ::Dynamic autoHeight;
		inline  ::Dynamic _hx_set_autoHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return autoHeight=_hx_v; }
		 ::Dynamic height;
		inline  ::Dynamic _hx_set_height(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return height=_hx_v; }
		 ::Dynamic percentHeight;
		inline  ::Dynamic _hx_set_percentHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return percentHeight=_hx_v; }
		 ::Dynamic initialHeight;
		inline  ::Dynamic _hx_set_initialHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return initialHeight=_hx_v; }
		 ::Dynamic initialPercentHeight;
		inline  ::Dynamic _hx_set_initialPercentHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return initialPercentHeight=_hx_v; }
		 ::Dynamic minHeight;
		inline  ::Dynamic _hx_set_minHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return minHeight=_hx_v; }
		 ::Dynamic maxHeight;
		inline  ::Dynamic _hx_set_maxHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return maxHeight=_hx_v; }
		 ::Dynamic paddingTop;
		inline  ::Dynamic _hx_set_paddingTop(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return paddingTop=_hx_v; }
		 ::Dynamic paddingLeft;
		inline  ::Dynamic _hx_set_paddingLeft(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return paddingLeft=_hx_v; }
		 ::Dynamic paddingRight;
		inline  ::Dynamic _hx_set_paddingRight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return paddingRight=_hx_v; }
		 ::Dynamic paddingBottom;
		inline  ::Dynamic _hx_set_paddingBottom(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return paddingBottom=_hx_v; }
		 ::Dynamic marginTop;
		inline  ::Dynamic _hx_set_marginTop(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return marginTop=_hx_v; }
		 ::Dynamic marginLeft;
		inline  ::Dynamic _hx_set_marginLeft(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return marginLeft=_hx_v; }
		 ::Dynamic marginRight;
		inline  ::Dynamic _hx_set_marginRight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return marginRight=_hx_v; }
		 ::Dynamic marginBottom;
		inline  ::Dynamic _hx_set_marginBottom(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return marginBottom=_hx_v; }
		 ::Dynamic horizontalSpacing;
		inline  ::Dynamic _hx_set_horizontalSpacing(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return horizontalSpacing=_hx_v; }
		 ::Dynamic verticalSpacing;
		inline  ::Dynamic _hx_set_verticalSpacing(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return verticalSpacing=_hx_v; }
		 ::Dynamic color;
		inline  ::Dynamic _hx_set_color(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return color=_hx_v; }
		 ::Dynamic backgroundColor;
		inline  ::Dynamic _hx_set_backgroundColor(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundColor=_hx_v; }
		 ::Dynamic backgroundColorEnd;
		inline  ::Dynamic _hx_set_backgroundColorEnd(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundColorEnd=_hx_v; }
		::String backgroundGradientStyle;
		inline ::String _hx_set_backgroundGradientStyle(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return backgroundGradientStyle=_hx_v; }
		 ::Dynamic backgroundOpacity;
		inline  ::Dynamic _hx_set_backgroundOpacity(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundOpacity=_hx_v; }
		::String backgroundImage;
		inline ::String _hx_set_backgroundImage(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return backgroundImage=_hx_v; }
		::String backgroundImageRepeat;
		inline ::String _hx_set_backgroundImageRepeat(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return backgroundImageRepeat=_hx_v; }
		 ::Dynamic backgroundImageClipTop;
		inline  ::Dynamic _hx_set_backgroundImageClipTop(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageClipTop=_hx_v; }
		 ::Dynamic backgroundImageClipLeft;
		inline  ::Dynamic _hx_set_backgroundImageClipLeft(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageClipLeft=_hx_v; }
		 ::Dynamic backgroundImageClipBottom;
		inline  ::Dynamic _hx_set_backgroundImageClipBottom(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageClipBottom=_hx_v; }
		 ::Dynamic backgroundImageClipRight;
		inline  ::Dynamic _hx_set_backgroundImageClipRight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageClipRight=_hx_v; }
		 ::Dynamic backgroundImageSliceTop;
		inline  ::Dynamic _hx_set_backgroundImageSliceTop(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageSliceTop=_hx_v; }
		 ::Dynamic backgroundImageSliceLeft;
		inline  ::Dynamic _hx_set_backgroundImageSliceLeft(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageSliceLeft=_hx_v; }
		 ::Dynamic backgroundImageSliceBottom;
		inline  ::Dynamic _hx_set_backgroundImageSliceBottom(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageSliceBottom=_hx_v; }
		 ::Dynamic backgroundImageSliceRight;
		inline  ::Dynamic _hx_set_backgroundImageSliceRight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return backgroundImageSliceRight=_hx_v; }
		 ::Dynamic borderColor;
		inline  ::Dynamic _hx_set_borderColor(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderColor=_hx_v; }
		 ::Dynamic borderTopColor;
		inline  ::Dynamic _hx_set_borderTopColor(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderTopColor=_hx_v; }
		 ::Dynamic borderLeftColor;
		inline  ::Dynamic _hx_set_borderLeftColor(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderLeftColor=_hx_v; }
		 ::Dynamic borderBottomColor;
		inline  ::Dynamic _hx_set_borderBottomColor(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderBottomColor=_hx_v; }
		 ::Dynamic borderRightColor;
		inline  ::Dynamic _hx_set_borderRightColor(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderRightColor=_hx_v; }
		 ::Dynamic borderSize;
		inline  ::Dynamic _hx_set_borderSize(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderSize=_hx_v; }
		 ::Dynamic borderTopSize;
		inline  ::Dynamic _hx_set_borderTopSize(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderTopSize=_hx_v; }
		 ::Dynamic borderLeftSize;
		inline  ::Dynamic _hx_set_borderLeftSize(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderLeftSize=_hx_v; }
		 ::Dynamic borderBottomSize;
		inline  ::Dynamic _hx_set_borderBottomSize(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderBottomSize=_hx_v; }
		 ::Dynamic borderRightSize;
		inline  ::Dynamic _hx_set_borderRightSize(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderRightSize=_hx_v; }
		 ::Dynamic borderRadius;
		inline  ::Dynamic _hx_set_borderRadius(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderRadius=_hx_v; }
		 ::Dynamic borderOpacity;
		inline  ::Dynamic _hx_set_borderOpacity(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return borderOpacity=_hx_v; }
		::String borderStyle;
		inline ::String _hx_set_borderStyle(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return borderStyle=_hx_v; }
		::String icon;
		inline ::String _hx_set_icon(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return icon=_hx_v; }
		::String iconPosition;
		inline ::String _hx_set_iconPosition(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return iconPosition=_hx_v; }
		::String horizontalAlign;
		inline ::String _hx_set_horizontalAlign(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return horizontalAlign=_hx_v; }
		::String verticalAlign;
		inline ::String _hx_set_verticalAlign(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return verticalAlign=_hx_v; }
		::String textAlign;
		inline ::String _hx_set_textAlign(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return textAlign=_hx_v; }
		 ::Dynamic opacity;
		inline  ::Dynamic _hx_set_opacity(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return opacity=_hx_v; }
		 ::Dynamic clip;
		inline  ::Dynamic _hx_set_clip(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return clip=_hx_v; }
		 ::Dynamic native;
		inline  ::Dynamic _hx_set_native(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return native=_hx_v; }
		::String fontName;
		inline ::String _hx_set_fontName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return fontName=_hx_v; }
		 ::Dynamic fontSize;
		inline  ::Dynamic _hx_set_fontSize(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return fontSize=_hx_v; }
		 ::Dynamic fontBold;
		inline  ::Dynamic _hx_set_fontBold(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return fontBold=_hx_v; }
		 ::Dynamic fontUnderline;
		inline  ::Dynamic _hx_set_fontUnderline(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return fontUnderline=_hx_v; }
		 ::Dynamic fontItalic;
		inline  ::Dynamic _hx_set_fontItalic(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return fontItalic=_hx_v; }
		::String cursor;
		inline ::String _hx_set_cursor(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return cursor=_hx_v; }
		 ::Dynamic hidden;
		inline  ::Dynamic _hx_set_hidden(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return hidden=_hx_v; }
		::Array< ::Dynamic> filter;
		inline ::Array< ::Dynamic> _hx_set_filter(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return filter=_hx_v; }
		::String resource;
		inline ::String _hx_set_resource(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return resource=_hx_v; }
		::String animationName;
		inline ::String _hx_set_animationName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return animationName=_hx_v; }
		 ::haxe::ui::styles::animation::AnimationOptions animationOptions;
		inline  ::haxe::ui::styles::animation::AnimationOptions _hx_set_animationOptions(hx::StackContext *_hx_ctx, ::haxe::ui::styles::animation::AnimationOptions _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return animationOptions=_hx_v; }
		::String mode;
		inline ::String _hx_set_mode(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return mode=_hx_v; }
		::String pointerEvents;
		inline ::String _hx_set_pointerEvents(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return pointerEvents=_hx_v; }
		void mergeDirectives( ::haxe::ds::StringMap map);
		::Dynamic mergeDirectives_dyn();

		void apply( ::haxe::ui::styles::Style s);
		::Dynamic apply_dyn();

		bool equalTo( ::haxe::ui::styles::Style s);
		::Dynamic equalTo_dyn();

		void createAnimationOptions();
		::Dynamic createAnimationOptions_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace styles

#endif /* INCLUDED_haxe_ui_styles_Style */ 
