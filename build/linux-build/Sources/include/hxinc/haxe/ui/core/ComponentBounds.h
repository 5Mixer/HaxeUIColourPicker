// Generated by Haxe 4.0.5
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#define INCLUDED_haxe_ui_core_ComponentBounds

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <hxinc/haxe/ui/core/ComponentLayout.h>
#endif
HX_DECLARE_CLASS3(haxe,ui,backend,ComponentSurface)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentBounds)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentCommon)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentContainer)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentEvents)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentLayout)
HX_DECLARE_CLASS3(haxe,ui,core,ComponentValidation)
HX_DECLARE_CLASS3(haxe,ui,core,IClonable)
HX_DECLARE_CLASS3(haxe,ui,geom,Rectangle)

namespace haxe{
namespace ui{
namespace core{


class HXCPP_CLASS_ATTRIBUTES ComponentBounds_obj : public  ::haxe::ui::core::ComponentLayout_obj
{
	public:
		typedef  ::haxe::ui::core::ComponentLayout_obj super;
		typedef ComponentBounds_obj OBJ_;
		ComponentBounds_obj();

	public:
		enum { _hx_ClassId = 0x7f63f3f1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ui.core.ComponentBounds")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.ui.core.ComponentBounds"); }
		static hx::ObjectPtr< ComponentBounds_obj > __new();
		static hx::ObjectPtr< ComponentBounds_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ComponentBounds_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ComponentBounds",f2,9e,7e,9d); }

		static void __boot();
		static  ::Dynamic __meta__;
		bool autoWidth;
		bool get_autoWidth();
		::Dynamic get_autoWidth_dyn();

		bool autoHeight;
		bool get_autoHeight();
		::Dynamic get_autoHeight_dyn();

		void resizeComponent( ::Dynamic w, ::Dynamic h);
		::Dynamic resizeComponent_dyn();

		Float actualComponentWidth;
		Float get_actualComponentWidth();
		::Dynamic get_actualComponentWidth_dyn();

		Float actualComponentHeight;
		Float get_actualComponentHeight();
		::Dynamic get_actualComponentHeight_dyn();

		 ::Dynamic _componentWidth;
		inline  ::Dynamic _hx_set__componentWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _componentWidth=_hx_v; }
		 ::Dynamic get_componentWidth();
		::Dynamic get_componentWidth_dyn();

		 ::Dynamic set_componentWidth( ::Dynamic value);
		::Dynamic set_componentWidth_dyn();

		 ::Dynamic _componentHeight;
		inline  ::Dynamic _hx_set__componentHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _componentHeight=_hx_v; }
		 ::Dynamic get_componentHeight();
		::Dynamic get_componentHeight_dyn();

		 ::Dynamic set_componentHeight( ::Dynamic value);
		::Dynamic set_componentHeight_dyn();

		 ::Dynamic _percentWidth;
		inline  ::Dynamic _hx_set__percentWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _percentWidth=_hx_v; }
		 ::Dynamic get_percentWidth();
		::Dynamic get_percentWidth_dyn();

		 ::Dynamic set_percentWidth( ::Dynamic value);
		::Dynamic set_percentWidth_dyn();

		 ::Dynamic _percentHeight;
		inline  ::Dynamic _hx_set__percentHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _percentHeight=_hx_v; }
		 ::Dynamic get_percentHeight();
		::Dynamic get_percentHeight_dyn();

		 ::Dynamic set_percentHeight( ::Dynamic value);
		::Dynamic set_percentHeight_dyn();

		 ::Dynamic _width;
		inline  ::Dynamic _hx_set__width(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _width=_hx_v; }
		 ::Dynamic set_width( ::Dynamic value);
		::Dynamic set_width_dyn();

		 ::Dynamic get_width();
		::Dynamic get_width_dyn();

		 ::Dynamic _height;
		inline  ::Dynamic _hx_set__height(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _height=_hx_v; }
		 ::Dynamic set_height( ::Dynamic value);
		::Dynamic set_height_dyn();

		 ::Dynamic get_height();
		::Dynamic get_height_dyn();

		 ::Dynamic _actualWidth;
		inline  ::Dynamic _hx_set__actualWidth(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _actualWidth=_hx_v; }
		 ::Dynamic _actualHeight;
		inline  ::Dynamic _hx_set__actualHeight(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _actualHeight=_hx_v; }
		bool hitTest(Float left,Float top);
		::Dynamic hitTest_dyn();

		bool autoSize();
		::Dynamic autoSize_dyn();

		void moveComponent( ::Dynamic left, ::Dynamic top);
		::Dynamic moveComponent_dyn();

		 ::Dynamic _left;
		inline  ::Dynamic _hx_set__left(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _left=_hx_v; }
		 ::Dynamic get_left();
		::Dynamic get_left_dyn();

		 ::Dynamic set_left( ::Dynamic value);
		::Dynamic set_left_dyn();

		 ::Dynamic _top;
		inline  ::Dynamic _hx_set__top(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _top=_hx_v; }
		 ::Dynamic get_top();
		::Dynamic get_top_dyn();

		 ::Dynamic set_top( ::Dynamic value);
		::Dynamic set_top_dyn();

		Float screenLeft;
		Float get_screenLeft();
		::Dynamic get_screenLeft_dyn();

		Float screenTop;
		Float get_screenTop();
		::Dynamic get_screenTop_dyn();

		 ::haxe::ui::geom::Rectangle _componentClipRect;
		inline  ::haxe::ui::geom::Rectangle _hx_set__componentClipRect(hx::StackContext *_hx_ctx, ::haxe::ui::geom::Rectangle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return _componentClipRect=_hx_v; }
		 ::haxe::ui::geom::Rectangle get_componentClipRect();
		::Dynamic get_componentClipRect_dyn();

		 ::haxe::ui::geom::Rectangle set_componentClipRect( ::haxe::ui::geom::Rectangle value);
		::Dynamic set_componentClipRect_dyn();

		virtual void registerBehaviours();

		virtual  ::haxe::ui::core::ComponentContainer cloneComponent();

		virtual  ::haxe::ui::core::ComponentContainer self();

};

} // end namespace haxe
} // end namespace ui
} // end namespace core

#endif /* INCLUDED_haxe_ui_core_ComponentBounds */ 
